/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MSceneUpdate : TBase
  {
    private List<MSceneObject> _AddedSceneObjects;
    private List<MSceneObjectUpdate> _ChangedSceneObjects;
    private List<string> _RemovedSceneObjects;
    private List<MMIStandard.MAvatar> _AddedAvatars;
    private List<MAvatarUpdate> _ChangedAvatars;
    private List<string> _RemovedAvatars;

    public List<MSceneObject> AddedSceneObjects
    {
      get
      {
        return _AddedSceneObjects;
      }
      set
      {
        __isset.AddedSceneObjects = true;
        this._AddedSceneObjects = value;
      }
    }

    public List<MSceneObjectUpdate> ChangedSceneObjects
    {
      get
      {
        return _ChangedSceneObjects;
      }
      set
      {
        __isset.ChangedSceneObjects = true;
        this._ChangedSceneObjects = value;
      }
    }

    public List<string> RemovedSceneObjects
    {
      get
      {
        return _RemovedSceneObjects;
      }
      set
      {
        __isset.RemovedSceneObjects = true;
        this._RemovedSceneObjects = value;
      }
    }

    public List<MMIStandard.MAvatar> AddedAvatars
    {
      get
      {
        return _AddedAvatars;
      }
      set
      {
        __isset.AddedAvatars = true;
        this._AddedAvatars = value;
      }
    }

    public List<MAvatarUpdate> ChangedAvatars
    {
      get
      {
        return _ChangedAvatars;
      }
      set
      {
        __isset.ChangedAvatars = true;
        this._ChangedAvatars = value;
      }
    }

    public List<string> RemovedAvatars
    {
      get
      {
        return _RemovedAvatars;
      }
      set
      {
        __isset.RemovedAvatars = true;
        this._RemovedAvatars = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool AddedSceneObjects;
      public bool ChangedSceneObjects;
      public bool RemovedSceneObjects;
      public bool AddedAvatars;
      public bool ChangedAvatars;
      public bool RemovedAvatars;
    }

    public MSceneUpdate() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  AddedSceneObjects = new List<MSceneObject>();
                  TList _list142 = iprot.ReadListBegin();
                  for( int _i143 = 0; _i143 < _list142.Count; ++_i143)
                  {
                    MSceneObject _elem144;
                    _elem144 = new MSceneObject();
                    _elem144.Read(iprot);
                    AddedSceneObjects.Add(_elem144);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  ChangedSceneObjects = new List<MSceneObjectUpdate>();
                  TList _list145 = iprot.ReadListBegin();
                  for( int _i146 = 0; _i146 < _list145.Count; ++_i146)
                  {
                    MSceneObjectUpdate _elem147;
                    _elem147 = new MSceneObjectUpdate();
                    _elem147.Read(iprot);
                    ChangedSceneObjects.Add(_elem147);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  RemovedSceneObjects = new List<string>();
                  TList _list148 = iprot.ReadListBegin();
                  for( int _i149 = 0; _i149 < _list148.Count; ++_i149)
                  {
                    string _elem150;
                    _elem150 = iprot.ReadString();
                    RemovedSceneObjects.Add(_elem150);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  AddedAvatars = new List<MMIStandard.MAvatar>();
                  TList _list151 = iprot.ReadListBegin();
                  for( int _i152 = 0; _i152 < _list151.Count; ++_i152)
                  {
                    MMIStandard.MAvatar _elem153;
                    _elem153 = new MMIStandard.MAvatar();
                    _elem153.Read(iprot);
                    AddedAvatars.Add(_elem153);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  ChangedAvatars = new List<MAvatarUpdate>();
                  TList _list154 = iprot.ReadListBegin();
                  for( int _i155 = 0; _i155 < _list154.Count; ++_i155)
                  {
                    MAvatarUpdate _elem156;
                    _elem156 = new MAvatarUpdate();
                    _elem156.Read(iprot);
                    ChangedAvatars.Add(_elem156);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  RemovedAvatars = new List<string>();
                  TList _list157 = iprot.ReadListBegin();
                  for( int _i158 = 0; _i158 < _list157.Count; ++_i158)
                  {
                    string _elem159;
                    _elem159 = iprot.ReadString();
                    RemovedAvatars.Add(_elem159);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MSceneUpdate");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AddedSceneObjects != null && __isset.AddedSceneObjects) {
          field.Name = "AddedSceneObjects";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, AddedSceneObjects.Count));
            foreach (MSceneObject _iter160 in AddedSceneObjects)
            {
              _iter160.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ChangedSceneObjects != null && __isset.ChangedSceneObjects) {
          field.Name = "ChangedSceneObjects";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ChangedSceneObjects.Count));
            foreach (MSceneObjectUpdate _iter161 in ChangedSceneObjects)
            {
              _iter161.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (RemovedSceneObjects != null && __isset.RemovedSceneObjects) {
          field.Name = "RemovedSceneObjects";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, RemovedSceneObjects.Count));
            foreach (string _iter162 in RemovedSceneObjects)
            {
              oprot.WriteString(_iter162);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AddedAvatars != null && __isset.AddedAvatars) {
          field.Name = "AddedAvatars";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, AddedAvatars.Count));
            foreach (MMIStandard.MAvatar _iter163 in AddedAvatars)
            {
              _iter163.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ChangedAvatars != null && __isset.ChangedAvatars) {
          field.Name = "ChangedAvatars";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ChangedAvatars.Count));
            foreach (MAvatarUpdate _iter164 in ChangedAvatars)
            {
              _iter164.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (RemovedAvatars != null && __isset.RemovedAvatars) {
          field.Name = "RemovedAvatars";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, RemovedAvatars.Count));
            foreach (string _iter165 in RemovedAvatars)
            {
              oprot.WriteString(_iter165);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MSceneUpdate(");
      bool __first = true;
      if (AddedSceneObjects != null && __isset.AddedSceneObjects) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AddedSceneObjects: ");
        __sb.Append(AddedSceneObjects);
      }
      if (ChangedSceneObjects != null && __isset.ChangedSceneObjects) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChangedSceneObjects: ");
        __sb.Append(ChangedSceneObjects);
      }
      if (RemovedSceneObjects != null && __isset.RemovedSceneObjects) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RemovedSceneObjects: ");
        __sb.Append(RemovedSceneObjects);
      }
      if (AddedAvatars != null && __isset.AddedAvatars) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AddedAvatars: ");
        __sb.Append(AddedAvatars);
      }
      if (ChangedAvatars != null && __isset.ChangedAvatars) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChangedAvatars: ");
        __sb.Append(ChangedAvatars);
      }
      if (RemovedAvatars != null && __isset.RemovedAvatars) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RemovedAvatars: ");
        __sb.Append(RemovedAvatars);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
