/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MSkeletonAccess {
    public interface ISync : MMIServiceBase.ISync {
      void InitializeAnthropometry(MMIStandard.MAvatarDescription description);
      MMIStandard.MAvatarDescription GetAvatarDescription(string avatarID);
      void SetAnimatedJoints(string avatarID, List<MMIStandard.MJointType> joints);
      void SetChannelData(MMIStandard.MAvatarPostureValues values);
      MMIStandard.MAvatarPosture GetCurrentGlobalPosture(string avatarID);
      MMIStandard.MAvatarPosture GetCurrentLocalPosture(string avatarID);
      MMIStandard.MAvatarPostureValues GetCurrentPostureValues(string avatarID);
      MMIStandard.MAvatarPostureValues GetCurrentPostureValuesPartial(string avatarID, List<MMIStandard.MJointType> joints);
      List<MMIStandard.MVector3> GetCurrentJointPositions(string avatarID);
      MMIStandard.MVector3 GetRootPosition(string avatarID);
      MMIStandard.MQuaternion GetRootRotation(string avatarID);
      MMIStandard.MVector3 GetGlobalJointPosition(string avatarId, MMIStandard.MJointType joint);
      MMIStandard.MQuaternion GetGlobalJointRotation(string avatarId, MMIStandard.MJointType joint);
      MMIStandard.MVector3 GetLocalJointPosition(string avatarId, MMIStandard.MJointType joint);
      MMIStandard.MQuaternion GetLocalJointRotation(string avatarId, MMIStandard.MJointType joint);
      void SetRootPosition(string avatarId, MMIStandard.MVector3 position);
      void SetRootRotation(string avatarId, MMIStandard.MQuaternion rotation);
      void SetGlobalJointPosition(string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position);
      void SetGlobalJointRotation(string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation);
      void SetLocalJointPosition(string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position);
      void SetLocalJointRotation(string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation);
      MMIStandard.MAvatarPostureValues RecomputeCurrentPostureValues(string avatarId);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_InitializeAnthropometry(AsyncCallback callback, object state, MMIStandard.MAvatarDescription description);
      void End_InitializeAnthropometry(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAvatarDescription(AsyncCallback callback, object state, string avatarID);
      MMIStandard.MAvatarDescription End_GetAvatarDescription(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SetAnimatedJoints(AsyncCallback callback, object state, string avatarID, List<MMIStandard.MJointType> joints);
      void End_SetAnimatedJoints(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SetChannelData(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues values);
      void End_SetChannelData(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetCurrentGlobalPosture(AsyncCallback callback, object state, string avatarID);
      MMIStandard.MAvatarPosture End_GetCurrentGlobalPosture(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetCurrentLocalPosture(AsyncCallback callback, object state, string avatarID);
      MMIStandard.MAvatarPosture End_GetCurrentLocalPosture(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetCurrentPostureValues(AsyncCallback callback, object state, string avatarID);
      MMIStandard.MAvatarPostureValues End_GetCurrentPostureValues(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetCurrentPostureValuesPartial(AsyncCallback callback, object state, string avatarID, List<MMIStandard.MJointType> joints);
      MMIStandard.MAvatarPostureValues End_GetCurrentPostureValuesPartial(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetCurrentJointPositions(AsyncCallback callback, object state, string avatarID);
      List<MMIStandard.MVector3> End_GetCurrentJointPositions(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetRootPosition(AsyncCallback callback, object state, string avatarID);
      MMIStandard.MVector3 End_GetRootPosition(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetRootRotation(AsyncCallback callback, object state, string avatarID);
      MMIStandard.MQuaternion End_GetRootRotation(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetGlobalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint);
      MMIStandard.MVector3 End_GetGlobalJointPosition(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetGlobalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint);
      MMIStandard.MQuaternion End_GetGlobalJointRotation(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetLocalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint);
      MMIStandard.MVector3 End_GetLocalJointPosition(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetLocalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint);
      MMIStandard.MQuaternion End_GetLocalJointRotation(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SetRootPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MVector3 position);
      void End_SetRootPosition(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SetRootRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MQuaternion rotation);
      void End_SetRootRotation(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SetGlobalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position);
      void End_SetGlobalJointPosition(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SetGlobalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation);
      void End_SetGlobalJointRotation(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SetLocalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position);
      void End_SetLocalJointPosition(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SetLocalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation);
      void End_SetLocalJointRotation(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RecomputeCurrentPostureValues(AsyncCallback callback, object state, string avatarId);
      MMIStandard.MAvatarPostureValues End_RecomputeCurrentPostureValues(IAsyncResult asyncResult);
      #endif
    }

    public class Client : MMIServiceBase.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_InitializeAnthropometry(AsyncCallback callback, object state, MMIStandard.MAvatarDescription description)
      {
        return send_InitializeAnthropometry(callback, state, description);
      }

      public void End_InitializeAnthropometry(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_InitializeAnthropometry();
      }

      #endif

      public void InitializeAnthropometry(MMIStandard.MAvatarDescription description)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_InitializeAnthropometry(null, null, description);
        End_InitializeAnthropometry(asyncResult);

        #else
        send_InitializeAnthropometry(description);
        recv_InitializeAnthropometry();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_InitializeAnthropometry(AsyncCallback callback, object state, MMIStandard.MAvatarDescription description)
      {
        oprot_.WriteMessageBegin(new TMessage("InitializeAnthropometry", TMessageType.Call, seqid_));
        InitializeAnthropometry_args args = new InitializeAnthropometry_args();
        args.Description = description;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_InitializeAnthropometry(MMIStandard.MAvatarDescription description)
      {
        oprot_.WriteMessageBegin(new TMessage("InitializeAnthropometry", TMessageType.Call, seqid_));
        InitializeAnthropometry_args args = new InitializeAnthropometry_args();
        args.Description = description;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_InitializeAnthropometry()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        InitializeAnthropometry_result result = new InitializeAnthropometry_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAvatarDescription(AsyncCallback callback, object state, string avatarID)
      {
        return send_GetAvatarDescription(callback, state, avatarID);
      }

      public MMIStandard.MAvatarDescription End_GetAvatarDescription(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAvatarDescription();
      }

      #endif

      public MMIStandard.MAvatarDescription GetAvatarDescription(string avatarID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAvatarDescription(null, null, avatarID);
        return End_GetAvatarDescription(asyncResult);

        #else
        send_GetAvatarDescription(avatarID);
        return recv_GetAvatarDescription();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAvatarDescription(AsyncCallback callback, object state, string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvatarDescription", TMessageType.Call, seqid_));
        GetAvatarDescription_args args = new GetAvatarDescription_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAvatarDescription(string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvatarDescription", TMessageType.Call, seqid_));
        GetAvatarDescription_args args = new GetAvatarDescription_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MAvatarDescription recv_GetAvatarDescription()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAvatarDescription_result result = new GetAvatarDescription_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAvatarDescription failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SetAnimatedJoints(AsyncCallback callback, object state, string avatarID, List<MMIStandard.MJointType> joints)
      {
        return send_SetAnimatedJoints(callback, state, avatarID, joints);
      }

      public void End_SetAnimatedJoints(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SetAnimatedJoints();
      }

      #endif

      public void SetAnimatedJoints(string avatarID, List<MMIStandard.MJointType> joints)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SetAnimatedJoints(null, null, avatarID, joints);
        End_SetAnimatedJoints(asyncResult);

        #else
        send_SetAnimatedJoints(avatarID, joints);
        recv_SetAnimatedJoints();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetAnimatedJoints(AsyncCallback callback, object state, string avatarID, List<MMIStandard.MJointType> joints)
      {
        oprot_.WriteMessageBegin(new TMessage("SetAnimatedJoints", TMessageType.Call, seqid_));
        SetAnimatedJoints_args args = new SetAnimatedJoints_args();
        args.AvatarID = avatarID;
        args.Joints = joints;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SetAnimatedJoints(string avatarID, List<MMIStandard.MJointType> joints)
      {
        oprot_.WriteMessageBegin(new TMessage("SetAnimatedJoints", TMessageType.Call, seqid_));
        SetAnimatedJoints_args args = new SetAnimatedJoints_args();
        args.AvatarID = avatarID;
        args.Joints = joints;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_SetAnimatedJoints()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetAnimatedJoints_result result = new SetAnimatedJoints_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SetChannelData(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues values)
      {
        return send_SetChannelData(callback, state, values);
      }

      public void End_SetChannelData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SetChannelData();
      }

      #endif

      public void SetChannelData(MMIStandard.MAvatarPostureValues values)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SetChannelData(null, null, values);
        End_SetChannelData(asyncResult);

        #else
        send_SetChannelData(values);
        recv_SetChannelData();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetChannelData(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues values)
      {
        oprot_.WriteMessageBegin(new TMessage("SetChannelData", TMessageType.Call, seqid_));
        SetChannelData_args args = new SetChannelData_args();
        args.Values = values;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SetChannelData(MMIStandard.MAvatarPostureValues values)
      {
        oprot_.WriteMessageBegin(new TMessage("SetChannelData", TMessageType.Call, seqid_));
        SetChannelData_args args = new SetChannelData_args();
        args.Values = values;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_SetChannelData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetChannelData_result result = new SetChannelData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetCurrentGlobalPosture(AsyncCallback callback, object state, string avatarID)
      {
        return send_GetCurrentGlobalPosture(callback, state, avatarID);
      }

      public MMIStandard.MAvatarPosture End_GetCurrentGlobalPosture(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCurrentGlobalPosture();
      }

      #endif

      public MMIStandard.MAvatarPosture GetCurrentGlobalPosture(string avatarID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetCurrentGlobalPosture(null, null, avatarID);
        return End_GetCurrentGlobalPosture(asyncResult);

        #else
        send_GetCurrentGlobalPosture(avatarID);
        return recv_GetCurrentGlobalPosture();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCurrentGlobalPosture(AsyncCallback callback, object state, string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentGlobalPosture", TMessageType.Call, seqid_));
        GetCurrentGlobalPosture_args args = new GetCurrentGlobalPosture_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetCurrentGlobalPosture(string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentGlobalPosture", TMessageType.Call, seqid_));
        GetCurrentGlobalPosture_args args = new GetCurrentGlobalPosture_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MAvatarPosture recv_GetCurrentGlobalPosture()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCurrentGlobalPosture_result result = new GetCurrentGlobalPosture_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCurrentGlobalPosture failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetCurrentLocalPosture(AsyncCallback callback, object state, string avatarID)
      {
        return send_GetCurrentLocalPosture(callback, state, avatarID);
      }

      public MMIStandard.MAvatarPosture End_GetCurrentLocalPosture(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCurrentLocalPosture();
      }

      #endif

      public MMIStandard.MAvatarPosture GetCurrentLocalPosture(string avatarID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetCurrentLocalPosture(null, null, avatarID);
        return End_GetCurrentLocalPosture(asyncResult);

        #else
        send_GetCurrentLocalPosture(avatarID);
        return recv_GetCurrentLocalPosture();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCurrentLocalPosture(AsyncCallback callback, object state, string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentLocalPosture", TMessageType.Call, seqid_));
        GetCurrentLocalPosture_args args = new GetCurrentLocalPosture_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetCurrentLocalPosture(string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentLocalPosture", TMessageType.Call, seqid_));
        GetCurrentLocalPosture_args args = new GetCurrentLocalPosture_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MAvatarPosture recv_GetCurrentLocalPosture()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCurrentLocalPosture_result result = new GetCurrentLocalPosture_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCurrentLocalPosture failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetCurrentPostureValues(AsyncCallback callback, object state, string avatarID)
      {
        return send_GetCurrentPostureValues(callback, state, avatarID);
      }

      public MMIStandard.MAvatarPostureValues End_GetCurrentPostureValues(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCurrentPostureValues();
      }

      #endif

      public MMIStandard.MAvatarPostureValues GetCurrentPostureValues(string avatarID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetCurrentPostureValues(null, null, avatarID);
        return End_GetCurrentPostureValues(asyncResult);

        #else
        send_GetCurrentPostureValues(avatarID);
        return recv_GetCurrentPostureValues();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCurrentPostureValues(AsyncCallback callback, object state, string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentPostureValues", TMessageType.Call, seqid_));
        GetCurrentPostureValues_args args = new GetCurrentPostureValues_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetCurrentPostureValues(string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentPostureValues", TMessageType.Call, seqid_));
        GetCurrentPostureValues_args args = new GetCurrentPostureValues_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MAvatarPostureValues recv_GetCurrentPostureValues()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCurrentPostureValues_result result = new GetCurrentPostureValues_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCurrentPostureValues failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetCurrentPostureValuesPartial(AsyncCallback callback, object state, string avatarID, List<MMIStandard.MJointType> joints)
      {
        return send_GetCurrentPostureValuesPartial(callback, state, avatarID, joints);
      }

      public MMIStandard.MAvatarPostureValues End_GetCurrentPostureValuesPartial(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCurrentPostureValuesPartial();
      }

      #endif

      public MMIStandard.MAvatarPostureValues GetCurrentPostureValuesPartial(string avatarID, List<MMIStandard.MJointType> joints)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetCurrentPostureValuesPartial(null, null, avatarID, joints);
        return End_GetCurrentPostureValuesPartial(asyncResult);

        #else
        send_GetCurrentPostureValuesPartial(avatarID, joints);
        return recv_GetCurrentPostureValuesPartial();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCurrentPostureValuesPartial(AsyncCallback callback, object state, string avatarID, List<MMIStandard.MJointType> joints)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentPostureValuesPartial", TMessageType.Call, seqid_));
        GetCurrentPostureValuesPartial_args args = new GetCurrentPostureValuesPartial_args();
        args.AvatarID = avatarID;
        args.Joints = joints;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetCurrentPostureValuesPartial(string avatarID, List<MMIStandard.MJointType> joints)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentPostureValuesPartial", TMessageType.Call, seqid_));
        GetCurrentPostureValuesPartial_args args = new GetCurrentPostureValuesPartial_args();
        args.AvatarID = avatarID;
        args.Joints = joints;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MAvatarPostureValues recv_GetCurrentPostureValuesPartial()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCurrentPostureValuesPartial_result result = new GetCurrentPostureValuesPartial_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCurrentPostureValuesPartial failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetCurrentJointPositions(AsyncCallback callback, object state, string avatarID)
      {
        return send_GetCurrentJointPositions(callback, state, avatarID);
      }

      public List<MMIStandard.MVector3> End_GetCurrentJointPositions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCurrentJointPositions();
      }

      #endif

      public List<MMIStandard.MVector3> GetCurrentJointPositions(string avatarID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetCurrentJointPositions(null, null, avatarID);
        return End_GetCurrentJointPositions(asyncResult);

        #else
        send_GetCurrentJointPositions(avatarID);
        return recv_GetCurrentJointPositions();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCurrentJointPositions(AsyncCallback callback, object state, string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentJointPositions", TMessageType.Call, seqid_));
        GetCurrentJointPositions_args args = new GetCurrentJointPositions_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetCurrentJointPositions(string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentJointPositions", TMessageType.Call, seqid_));
        GetCurrentJointPositions_args args = new GetCurrentJointPositions_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MVector3> recv_GetCurrentJointPositions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCurrentJointPositions_result result = new GetCurrentJointPositions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCurrentJointPositions failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetRootPosition(AsyncCallback callback, object state, string avatarID)
      {
        return send_GetRootPosition(callback, state, avatarID);
      }

      public MMIStandard.MVector3 End_GetRootPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRootPosition();
      }

      #endif

      public MMIStandard.MVector3 GetRootPosition(string avatarID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetRootPosition(null, null, avatarID);
        return End_GetRootPosition(asyncResult);

        #else
        send_GetRootPosition(avatarID);
        return recv_GetRootPosition();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRootPosition(AsyncCallback callback, object state, string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetRootPosition", TMessageType.Call, seqid_));
        GetRootPosition_args args = new GetRootPosition_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetRootPosition(string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetRootPosition", TMessageType.Call, seqid_));
        GetRootPosition_args args = new GetRootPosition_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MVector3 recv_GetRootPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRootPosition_result result = new GetRootPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRootPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetRootRotation(AsyncCallback callback, object state, string avatarID)
      {
        return send_GetRootRotation(callback, state, avatarID);
      }

      public MMIStandard.MQuaternion End_GetRootRotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRootRotation();
      }

      #endif

      public MMIStandard.MQuaternion GetRootRotation(string avatarID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetRootRotation(null, null, avatarID);
        return End_GetRootRotation(asyncResult);

        #else
        send_GetRootRotation(avatarID);
        return recv_GetRootRotation();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRootRotation(AsyncCallback callback, object state, string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetRootRotation", TMessageType.Call, seqid_));
        GetRootRotation_args args = new GetRootRotation_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetRootRotation(string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetRootRotation", TMessageType.Call, seqid_));
        GetRootRotation_args args = new GetRootRotation_args();
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MQuaternion recv_GetRootRotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRootRotation_result result = new GetRootRotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRootRotation failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetGlobalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint)
      {
        return send_GetGlobalJointPosition(callback, state, avatarId, joint);
      }

      public MMIStandard.MVector3 End_GetGlobalJointPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGlobalJointPosition();
      }

      #endif

      public MMIStandard.MVector3 GetGlobalJointPosition(string avatarId, MMIStandard.MJointType joint)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetGlobalJointPosition(null, null, avatarId, joint);
        return End_GetGlobalJointPosition(asyncResult);

        #else
        send_GetGlobalJointPosition(avatarId, joint);
        return recv_GetGlobalJointPosition();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGlobalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint)
      {
        oprot_.WriteMessageBegin(new TMessage("GetGlobalJointPosition", TMessageType.Call, seqid_));
        GetGlobalJointPosition_args args = new GetGlobalJointPosition_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetGlobalJointPosition(string avatarId, MMIStandard.MJointType joint)
      {
        oprot_.WriteMessageBegin(new TMessage("GetGlobalJointPosition", TMessageType.Call, seqid_));
        GetGlobalJointPosition_args args = new GetGlobalJointPosition_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MVector3 recv_GetGlobalJointPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGlobalJointPosition_result result = new GetGlobalJointPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGlobalJointPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetGlobalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint)
      {
        return send_GetGlobalJointRotation(callback, state, avatarId, joint);
      }

      public MMIStandard.MQuaternion End_GetGlobalJointRotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGlobalJointRotation();
      }

      #endif

      public MMIStandard.MQuaternion GetGlobalJointRotation(string avatarId, MMIStandard.MJointType joint)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetGlobalJointRotation(null, null, avatarId, joint);
        return End_GetGlobalJointRotation(asyncResult);

        #else
        send_GetGlobalJointRotation(avatarId, joint);
        return recv_GetGlobalJointRotation();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGlobalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint)
      {
        oprot_.WriteMessageBegin(new TMessage("GetGlobalJointRotation", TMessageType.Call, seqid_));
        GetGlobalJointRotation_args args = new GetGlobalJointRotation_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetGlobalJointRotation(string avatarId, MMIStandard.MJointType joint)
      {
        oprot_.WriteMessageBegin(new TMessage("GetGlobalJointRotation", TMessageType.Call, seqid_));
        GetGlobalJointRotation_args args = new GetGlobalJointRotation_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MQuaternion recv_GetGlobalJointRotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGlobalJointRotation_result result = new GetGlobalJointRotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGlobalJointRotation failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetLocalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint)
      {
        return send_GetLocalJointPosition(callback, state, avatarId, joint);
      }

      public MMIStandard.MVector3 End_GetLocalJointPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetLocalJointPosition();
      }

      #endif

      public MMIStandard.MVector3 GetLocalJointPosition(string avatarId, MMIStandard.MJointType joint)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetLocalJointPosition(null, null, avatarId, joint);
        return End_GetLocalJointPosition(asyncResult);

        #else
        send_GetLocalJointPosition(avatarId, joint);
        return recv_GetLocalJointPosition();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetLocalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint)
      {
        oprot_.WriteMessageBegin(new TMessage("GetLocalJointPosition", TMessageType.Call, seqid_));
        GetLocalJointPosition_args args = new GetLocalJointPosition_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetLocalJointPosition(string avatarId, MMIStandard.MJointType joint)
      {
        oprot_.WriteMessageBegin(new TMessage("GetLocalJointPosition", TMessageType.Call, seqid_));
        GetLocalJointPosition_args args = new GetLocalJointPosition_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MVector3 recv_GetLocalJointPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetLocalJointPosition_result result = new GetLocalJointPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLocalJointPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetLocalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint)
      {
        return send_GetLocalJointRotation(callback, state, avatarId, joint);
      }

      public MMIStandard.MQuaternion End_GetLocalJointRotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetLocalJointRotation();
      }

      #endif

      public MMIStandard.MQuaternion GetLocalJointRotation(string avatarId, MMIStandard.MJointType joint)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetLocalJointRotation(null, null, avatarId, joint);
        return End_GetLocalJointRotation(asyncResult);

        #else
        send_GetLocalJointRotation(avatarId, joint);
        return recv_GetLocalJointRotation();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetLocalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint)
      {
        oprot_.WriteMessageBegin(new TMessage("GetLocalJointRotation", TMessageType.Call, seqid_));
        GetLocalJointRotation_args args = new GetLocalJointRotation_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetLocalJointRotation(string avatarId, MMIStandard.MJointType joint)
      {
        oprot_.WriteMessageBegin(new TMessage("GetLocalJointRotation", TMessageType.Call, seqid_));
        GetLocalJointRotation_args args = new GetLocalJointRotation_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MQuaternion recv_GetLocalJointRotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetLocalJointRotation_result result = new GetLocalJointRotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLocalJointRotation failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SetRootPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MVector3 position)
      {
        return send_SetRootPosition(callback, state, avatarId, position);
      }

      public void End_SetRootPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SetRootPosition();
      }

      #endif

      public void SetRootPosition(string avatarId, MMIStandard.MVector3 position)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SetRootPosition(null, null, avatarId, position);
        End_SetRootPosition(asyncResult);

        #else
        send_SetRootPosition(avatarId, position);
        recv_SetRootPosition();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetRootPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MVector3 position)
      {
        oprot_.WriteMessageBegin(new TMessage("SetRootPosition", TMessageType.Call, seqid_));
        SetRootPosition_args args = new SetRootPosition_args();
        args.AvatarId = avatarId;
        args.Position = position;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SetRootPosition(string avatarId, MMIStandard.MVector3 position)
      {
        oprot_.WriteMessageBegin(new TMessage("SetRootPosition", TMessageType.Call, seqid_));
        SetRootPosition_args args = new SetRootPosition_args();
        args.AvatarId = avatarId;
        args.Position = position;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_SetRootPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetRootPosition_result result = new SetRootPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SetRootRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MQuaternion rotation)
      {
        return send_SetRootRotation(callback, state, avatarId, rotation);
      }

      public void End_SetRootRotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SetRootRotation();
      }

      #endif

      public void SetRootRotation(string avatarId, MMIStandard.MQuaternion rotation)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SetRootRotation(null, null, avatarId, rotation);
        End_SetRootRotation(asyncResult);

        #else
        send_SetRootRotation(avatarId, rotation);
        recv_SetRootRotation();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetRootRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MQuaternion rotation)
      {
        oprot_.WriteMessageBegin(new TMessage("SetRootRotation", TMessageType.Call, seqid_));
        SetRootRotation_args args = new SetRootRotation_args();
        args.AvatarId = avatarId;
        args.Rotation = rotation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SetRootRotation(string avatarId, MMIStandard.MQuaternion rotation)
      {
        oprot_.WriteMessageBegin(new TMessage("SetRootRotation", TMessageType.Call, seqid_));
        SetRootRotation_args args = new SetRootRotation_args();
        args.AvatarId = avatarId;
        args.Rotation = rotation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_SetRootRotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetRootRotation_result result = new SetRootRotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SetGlobalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position)
      {
        return send_SetGlobalJointPosition(callback, state, avatarId, joint, position);
      }

      public void End_SetGlobalJointPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SetGlobalJointPosition();
      }

      #endif

      public void SetGlobalJointPosition(string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SetGlobalJointPosition(null, null, avatarId, joint, position);
        End_SetGlobalJointPosition(asyncResult);

        #else
        send_SetGlobalJointPosition(avatarId, joint, position);
        recv_SetGlobalJointPosition();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetGlobalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position)
      {
        oprot_.WriteMessageBegin(new TMessage("SetGlobalJointPosition", TMessageType.Call, seqid_));
        SetGlobalJointPosition_args args = new SetGlobalJointPosition_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Position = position;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SetGlobalJointPosition(string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position)
      {
        oprot_.WriteMessageBegin(new TMessage("SetGlobalJointPosition", TMessageType.Call, seqid_));
        SetGlobalJointPosition_args args = new SetGlobalJointPosition_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Position = position;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_SetGlobalJointPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetGlobalJointPosition_result result = new SetGlobalJointPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SetGlobalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation)
      {
        return send_SetGlobalJointRotation(callback, state, avatarId, joint, rotation);
      }

      public void End_SetGlobalJointRotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SetGlobalJointRotation();
      }

      #endif

      public void SetGlobalJointRotation(string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SetGlobalJointRotation(null, null, avatarId, joint, rotation);
        End_SetGlobalJointRotation(asyncResult);

        #else
        send_SetGlobalJointRotation(avatarId, joint, rotation);
        recv_SetGlobalJointRotation();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetGlobalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation)
      {
        oprot_.WriteMessageBegin(new TMessage("SetGlobalJointRotation", TMessageType.Call, seqid_));
        SetGlobalJointRotation_args args = new SetGlobalJointRotation_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Rotation = rotation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SetGlobalJointRotation(string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation)
      {
        oprot_.WriteMessageBegin(new TMessage("SetGlobalJointRotation", TMessageType.Call, seqid_));
        SetGlobalJointRotation_args args = new SetGlobalJointRotation_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Rotation = rotation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_SetGlobalJointRotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetGlobalJointRotation_result result = new SetGlobalJointRotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SetLocalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position)
      {
        return send_SetLocalJointPosition(callback, state, avatarId, joint, position);
      }

      public void End_SetLocalJointPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SetLocalJointPosition();
      }

      #endif

      public void SetLocalJointPosition(string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SetLocalJointPosition(null, null, avatarId, joint, position);
        End_SetLocalJointPosition(asyncResult);

        #else
        send_SetLocalJointPosition(avatarId, joint, position);
        recv_SetLocalJointPosition();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetLocalJointPosition(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position)
      {
        oprot_.WriteMessageBegin(new TMessage("SetLocalJointPosition", TMessageType.Call, seqid_));
        SetLocalJointPosition_args args = new SetLocalJointPosition_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Position = position;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SetLocalJointPosition(string avatarId, MMIStandard.MJointType joint, MMIStandard.MVector3 position)
      {
        oprot_.WriteMessageBegin(new TMessage("SetLocalJointPosition", TMessageType.Call, seqid_));
        SetLocalJointPosition_args args = new SetLocalJointPosition_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Position = position;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_SetLocalJointPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetLocalJointPosition_result result = new SetLocalJointPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SetLocalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation)
      {
        return send_SetLocalJointRotation(callback, state, avatarId, joint, rotation);
      }

      public void End_SetLocalJointRotation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SetLocalJointRotation();
      }

      #endif

      public void SetLocalJointRotation(string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SetLocalJointRotation(null, null, avatarId, joint, rotation);
        End_SetLocalJointRotation(asyncResult);

        #else
        send_SetLocalJointRotation(avatarId, joint, rotation);
        recv_SetLocalJointRotation();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetLocalJointRotation(AsyncCallback callback, object state, string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation)
      {
        oprot_.WriteMessageBegin(new TMessage("SetLocalJointRotation", TMessageType.Call, seqid_));
        SetLocalJointRotation_args args = new SetLocalJointRotation_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Rotation = rotation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SetLocalJointRotation(string avatarId, MMIStandard.MJointType joint, MMIStandard.MQuaternion rotation)
      {
        oprot_.WriteMessageBegin(new TMessage("SetLocalJointRotation", TMessageType.Call, seqid_));
        SetLocalJointRotation_args args = new SetLocalJointRotation_args();
        args.AvatarId = avatarId;
        args.Joint = joint;
        args.Rotation = rotation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_SetLocalJointRotation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetLocalJointRotation_result result = new SetLocalJointRotation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_RecomputeCurrentPostureValues(AsyncCallback callback, object state, string avatarId)
      {
        return send_RecomputeCurrentPostureValues(callback, state, avatarId);
      }

      public MMIStandard.MAvatarPostureValues End_RecomputeCurrentPostureValues(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RecomputeCurrentPostureValues();
      }

      #endif

      public MMIStandard.MAvatarPostureValues RecomputeCurrentPostureValues(string avatarId)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_RecomputeCurrentPostureValues(null, null, avatarId);
        return End_RecomputeCurrentPostureValues(asyncResult);

        #else
        send_RecomputeCurrentPostureValues(avatarId);
        return recv_RecomputeCurrentPostureValues();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RecomputeCurrentPostureValues(AsyncCallback callback, object state, string avatarId)
      {
        oprot_.WriteMessageBegin(new TMessage("RecomputeCurrentPostureValues", TMessageType.Call, seqid_));
        RecomputeCurrentPostureValues_args args = new RecomputeCurrentPostureValues_args();
        args.AvatarId = avatarId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_RecomputeCurrentPostureValues(string avatarId)
      {
        oprot_.WriteMessageBegin(new TMessage("RecomputeCurrentPostureValues", TMessageType.Call, seqid_));
        RecomputeCurrentPostureValues_args args = new RecomputeCurrentPostureValues_args();
        args.AvatarId = avatarId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MAvatarPostureValues recv_RecomputeCurrentPostureValues()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RecomputeCurrentPostureValues_result result = new RecomputeCurrentPostureValues_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RecomputeCurrentPostureValues failed: unknown result");
      }

    }
    public class Processor : MMIServiceBase.Processor, TProcessor {
      public Processor(ISync iface) : base(iface)
      {
        iface_ = iface;
        processMap_["InitializeAnthropometry"] = InitializeAnthropometry_Process;
        processMap_["GetAvatarDescription"] = GetAvatarDescription_Process;
        processMap_["SetAnimatedJoints"] = SetAnimatedJoints_Process;
        processMap_["SetChannelData"] = SetChannelData_Process;
        processMap_["GetCurrentGlobalPosture"] = GetCurrentGlobalPosture_Process;
        processMap_["GetCurrentLocalPosture"] = GetCurrentLocalPosture_Process;
        processMap_["GetCurrentPostureValues"] = GetCurrentPostureValues_Process;
        processMap_["GetCurrentPostureValuesPartial"] = GetCurrentPostureValuesPartial_Process;
        processMap_["GetCurrentJointPositions"] = GetCurrentJointPositions_Process;
        processMap_["GetRootPosition"] = GetRootPosition_Process;
        processMap_["GetRootRotation"] = GetRootRotation_Process;
        processMap_["GetGlobalJointPosition"] = GetGlobalJointPosition_Process;
        processMap_["GetGlobalJointRotation"] = GetGlobalJointRotation_Process;
        processMap_["GetLocalJointPosition"] = GetLocalJointPosition_Process;
        processMap_["GetLocalJointRotation"] = GetLocalJointRotation_Process;
        processMap_["SetRootPosition"] = SetRootPosition_Process;
        processMap_["SetRootRotation"] = SetRootRotation_Process;
        processMap_["SetGlobalJointPosition"] = SetGlobalJointPosition_Process;
        processMap_["SetGlobalJointRotation"] = SetGlobalJointRotation_Process;
        processMap_["SetLocalJointPosition"] = SetLocalJointPosition_Process;
        processMap_["SetLocalJointRotation"] = SetLocalJointRotation_Process;
        processMap_["RecomputeCurrentPostureValues"] = RecomputeCurrentPostureValues_Process;
      }

      private ISync iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void InitializeAnthropometry_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        InitializeAnthropometry_args args = new InitializeAnthropometry_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        InitializeAnthropometry_result result = new InitializeAnthropometry_result();
        try
        {
          iface_.InitializeAnthropometry(args.Description);
          oprot.WriteMessageBegin(new TMessage("InitializeAnthropometry", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("InitializeAnthropometry", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAvatarDescription_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAvatarDescription_args args = new GetAvatarDescription_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAvatarDescription_result result = new GetAvatarDescription_result();
        try
        {
          result.Success = iface_.GetAvatarDescription(args.AvatarID);
          oprot.WriteMessageBegin(new TMessage("GetAvatarDescription", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAvatarDescription", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetAnimatedJoints_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetAnimatedJoints_args args = new SetAnimatedJoints_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetAnimatedJoints_result result = new SetAnimatedJoints_result();
        try
        {
          iface_.SetAnimatedJoints(args.AvatarID, args.Joints);
          oprot.WriteMessageBegin(new TMessage("SetAnimatedJoints", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetAnimatedJoints", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetChannelData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetChannelData_args args = new SetChannelData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetChannelData_result result = new SetChannelData_result();
        try
        {
          iface_.SetChannelData(args.Values);
          oprot.WriteMessageBegin(new TMessage("SetChannelData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetChannelData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCurrentGlobalPosture_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCurrentGlobalPosture_args args = new GetCurrentGlobalPosture_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCurrentGlobalPosture_result result = new GetCurrentGlobalPosture_result();
        try
        {
          result.Success = iface_.GetCurrentGlobalPosture(args.AvatarID);
          oprot.WriteMessageBegin(new TMessage("GetCurrentGlobalPosture", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetCurrentGlobalPosture", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCurrentLocalPosture_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCurrentLocalPosture_args args = new GetCurrentLocalPosture_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCurrentLocalPosture_result result = new GetCurrentLocalPosture_result();
        try
        {
          result.Success = iface_.GetCurrentLocalPosture(args.AvatarID);
          oprot.WriteMessageBegin(new TMessage("GetCurrentLocalPosture", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetCurrentLocalPosture", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCurrentPostureValues_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCurrentPostureValues_args args = new GetCurrentPostureValues_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCurrentPostureValues_result result = new GetCurrentPostureValues_result();
        try
        {
          result.Success = iface_.GetCurrentPostureValues(args.AvatarID);
          oprot.WriteMessageBegin(new TMessage("GetCurrentPostureValues", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetCurrentPostureValues", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCurrentPostureValuesPartial_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCurrentPostureValuesPartial_args args = new GetCurrentPostureValuesPartial_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCurrentPostureValuesPartial_result result = new GetCurrentPostureValuesPartial_result();
        try
        {
          result.Success = iface_.GetCurrentPostureValuesPartial(args.AvatarID, args.Joints);
          oprot.WriteMessageBegin(new TMessage("GetCurrentPostureValuesPartial", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetCurrentPostureValuesPartial", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCurrentJointPositions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCurrentJointPositions_args args = new GetCurrentJointPositions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCurrentJointPositions_result result = new GetCurrentJointPositions_result();
        try
        {
          result.Success = iface_.GetCurrentJointPositions(args.AvatarID);
          oprot.WriteMessageBegin(new TMessage("GetCurrentJointPositions", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetCurrentJointPositions", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRootPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRootPosition_args args = new GetRootPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRootPosition_result result = new GetRootPosition_result();
        try
        {
          result.Success = iface_.GetRootPosition(args.AvatarID);
          oprot.WriteMessageBegin(new TMessage("GetRootPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetRootPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRootRotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRootRotation_args args = new GetRootRotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRootRotation_result result = new GetRootRotation_result();
        try
        {
          result.Success = iface_.GetRootRotation(args.AvatarID);
          oprot.WriteMessageBegin(new TMessage("GetRootRotation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetRootRotation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGlobalJointPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGlobalJointPosition_args args = new GetGlobalJointPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGlobalJointPosition_result result = new GetGlobalJointPosition_result();
        try
        {
          result.Success = iface_.GetGlobalJointPosition(args.AvatarId, args.Joint);
          oprot.WriteMessageBegin(new TMessage("GetGlobalJointPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetGlobalJointPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGlobalJointRotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGlobalJointRotation_args args = new GetGlobalJointRotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGlobalJointRotation_result result = new GetGlobalJointRotation_result();
        try
        {
          result.Success = iface_.GetGlobalJointRotation(args.AvatarId, args.Joint);
          oprot.WriteMessageBegin(new TMessage("GetGlobalJointRotation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetGlobalJointRotation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetLocalJointPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetLocalJointPosition_args args = new GetLocalJointPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetLocalJointPosition_result result = new GetLocalJointPosition_result();
        try
        {
          result.Success = iface_.GetLocalJointPosition(args.AvatarId, args.Joint);
          oprot.WriteMessageBegin(new TMessage("GetLocalJointPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetLocalJointPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetLocalJointRotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetLocalJointRotation_args args = new GetLocalJointRotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetLocalJointRotation_result result = new GetLocalJointRotation_result();
        try
        {
          result.Success = iface_.GetLocalJointRotation(args.AvatarId, args.Joint);
          oprot.WriteMessageBegin(new TMessage("GetLocalJointRotation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetLocalJointRotation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetRootPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetRootPosition_args args = new SetRootPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetRootPosition_result result = new SetRootPosition_result();
        try
        {
          iface_.SetRootPosition(args.AvatarId, args.Position);
          oprot.WriteMessageBegin(new TMessage("SetRootPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetRootPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetRootRotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetRootRotation_args args = new SetRootRotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetRootRotation_result result = new SetRootRotation_result();
        try
        {
          iface_.SetRootRotation(args.AvatarId, args.Rotation);
          oprot.WriteMessageBegin(new TMessage("SetRootRotation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetRootRotation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetGlobalJointPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetGlobalJointPosition_args args = new SetGlobalJointPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetGlobalJointPosition_result result = new SetGlobalJointPosition_result();
        try
        {
          iface_.SetGlobalJointPosition(args.AvatarId, args.Joint, args.Position);
          oprot.WriteMessageBegin(new TMessage("SetGlobalJointPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetGlobalJointPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetGlobalJointRotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetGlobalJointRotation_args args = new SetGlobalJointRotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetGlobalJointRotation_result result = new SetGlobalJointRotation_result();
        try
        {
          iface_.SetGlobalJointRotation(args.AvatarId, args.Joint, args.Rotation);
          oprot.WriteMessageBegin(new TMessage("SetGlobalJointRotation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetGlobalJointRotation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetLocalJointPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetLocalJointPosition_args args = new SetLocalJointPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetLocalJointPosition_result result = new SetLocalJointPosition_result();
        try
        {
          iface_.SetLocalJointPosition(args.AvatarId, args.Joint, args.Position);
          oprot.WriteMessageBegin(new TMessage("SetLocalJointPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetLocalJointPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetLocalJointRotation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetLocalJointRotation_args args = new SetLocalJointRotation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetLocalJointRotation_result result = new SetLocalJointRotation_result();
        try
        {
          iface_.SetLocalJointRotation(args.AvatarId, args.Joint, args.Rotation);
          oprot.WriteMessageBegin(new TMessage("SetLocalJointRotation", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetLocalJointRotation", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RecomputeCurrentPostureValues_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RecomputeCurrentPostureValues_args args = new RecomputeCurrentPostureValues_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RecomputeCurrentPostureValues_result result = new RecomputeCurrentPostureValues_result();
        try
        {
          result.Success = iface_.RecomputeCurrentPostureValues(args.AvatarId);
          oprot.WriteMessageBegin(new TMessage("RecomputeCurrentPostureValues", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RecomputeCurrentPostureValues", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InitializeAnthropometry_args : TBase
    {
      private MMIStandard.MAvatarDescription _description;

      public MMIStandard.MAvatarDescription Description
      {
        get
        {
          return _description;
        }
        set
        {
          __isset.description = true;
          this._description = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool description;
      }

      public InitializeAnthropometry_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Description = new MMIStandard.MAvatarDescription();
                  Description.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InitializeAnthropometry_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Description != null && __isset.description) {
            field.Name = "description";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Description.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InitializeAnthropometry_args(");
        bool __first = true;
        if (Description != null && __isset.description) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Description: ");
          __sb.Append(Description== null ? "<null>" : Description.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class InitializeAnthropometry_result : TBase
    {

      public InitializeAnthropometry_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("InitializeAnthropometry_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("InitializeAnthropometry_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvatarDescription_args : TBase
    {
      private string _avatarID;

      public string AvatarID
      {
        get
        {
          return _avatarID;
        }
        set
        {
          __isset.avatarID = true;
          this._avatarID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarID;
      }

      public GetAvatarDescription_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvatarDescription_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarID != null && __isset.avatarID) {
            field.Name = "avatarID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvatarDescription_args(");
        bool __first = true;
        if (AvatarID != null && __isset.avatarID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarID: ");
          __sb.Append(AvatarID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvatarDescription_result : TBase
    {
      private MMIStandard.MAvatarDescription _success;

      public MMIStandard.MAvatarDescription Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAvatarDescription_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MAvatarDescription();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvatarDescription_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvatarDescription_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetAnimatedJoints_args : TBase
    {
      private string _avatarID;
      private List<MMIStandard.MJointType> _joints;

      public string AvatarID
      {
        get
        {
          return _avatarID;
        }
        set
        {
          __isset.avatarID = true;
          this._avatarID = value;
        }
      }

      public List<MMIStandard.MJointType> Joints
      {
        get
        {
          return _joints;
        }
        set
        {
          __isset.joints = true;
          this._joints = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarID;
        public bool joints;
      }

      public SetAnimatedJoints_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Joints = new List<MMIStandard.MJointType>();
                    TList _list162 = iprot.ReadListBegin();
                    for( int _i163 = 0; _i163 < _list162.Count; ++_i163)
                    {
                      MMIStandard.MJointType _elem164;
                      _elem164 = (MMIStandard.MJointType)iprot.ReadI32();
                      Joints.Add(_elem164);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetAnimatedJoints_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarID != null && __isset.avatarID) {
            field.Name = "avatarID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarID);
            oprot.WriteFieldEnd();
          }
          if (Joints != null && __isset.joints) {
            field.Name = "joints";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, Joints.Count));
              foreach (MMIStandard.MJointType _iter165 in Joints)
              {
                oprot.WriteI32((int)_iter165);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetAnimatedJoints_args(");
        bool __first = true;
        if (AvatarID != null && __isset.avatarID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarID: ");
          __sb.Append(AvatarID);
        }
        if (Joints != null && __isset.joints) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Joints: ");
          __sb.Append(Joints);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetAnimatedJoints_result : TBase
    {

      public SetAnimatedJoints_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetAnimatedJoints_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetAnimatedJoints_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetChannelData_args : TBase
    {
      private MMIStandard.MAvatarPostureValues _values;

      public MMIStandard.MAvatarPostureValues Values
      {
        get
        {
          return _values;
        }
        set
        {
          __isset.values = true;
          this._values = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool values;
      }

      public SetChannelData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Values = new MMIStandard.MAvatarPostureValues();
                  Values.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetChannelData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Values != null && __isset.values) {
            field.Name = "values";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Values.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetChannelData_args(");
        bool __first = true;
        if (Values != null && __isset.values) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Values: ");
          __sb.Append(Values== null ? "<null>" : Values.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetChannelData_result : TBase
    {

      public SetChannelData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetChannelData_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetChannelData_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentGlobalPosture_args : TBase
    {
      private string _avatarID;

      public string AvatarID
      {
        get
        {
          return _avatarID;
        }
        set
        {
          __isset.avatarID = true;
          this._avatarID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarID;
      }

      public GetCurrentGlobalPosture_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentGlobalPosture_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarID != null && __isset.avatarID) {
            field.Name = "avatarID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentGlobalPosture_args(");
        bool __first = true;
        if (AvatarID != null && __isset.avatarID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarID: ");
          __sb.Append(AvatarID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentGlobalPosture_result : TBase
    {
      private MMIStandard.MAvatarPosture _success;

      public MMIStandard.MAvatarPosture Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCurrentGlobalPosture_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MAvatarPosture();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentGlobalPosture_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentGlobalPosture_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentLocalPosture_args : TBase
    {
      private string _avatarID;

      public string AvatarID
      {
        get
        {
          return _avatarID;
        }
        set
        {
          __isset.avatarID = true;
          this._avatarID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarID;
      }

      public GetCurrentLocalPosture_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentLocalPosture_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarID != null && __isset.avatarID) {
            field.Name = "avatarID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentLocalPosture_args(");
        bool __first = true;
        if (AvatarID != null && __isset.avatarID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarID: ");
          __sb.Append(AvatarID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentLocalPosture_result : TBase
    {
      private MMIStandard.MAvatarPosture _success;

      public MMIStandard.MAvatarPosture Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCurrentLocalPosture_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MAvatarPosture();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentLocalPosture_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentLocalPosture_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentPostureValues_args : TBase
    {
      private string _avatarID;

      public string AvatarID
      {
        get
        {
          return _avatarID;
        }
        set
        {
          __isset.avatarID = true;
          this._avatarID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarID;
      }

      public GetCurrentPostureValues_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentPostureValues_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarID != null && __isset.avatarID) {
            field.Name = "avatarID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentPostureValues_args(");
        bool __first = true;
        if (AvatarID != null && __isset.avatarID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarID: ");
          __sb.Append(AvatarID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentPostureValues_result : TBase
    {
      private MMIStandard.MAvatarPostureValues _success;

      public MMIStandard.MAvatarPostureValues Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCurrentPostureValues_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MAvatarPostureValues();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentPostureValues_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentPostureValues_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentPostureValuesPartial_args : TBase
    {
      private string _avatarID;
      private List<MMIStandard.MJointType> _joints;

      public string AvatarID
      {
        get
        {
          return _avatarID;
        }
        set
        {
          __isset.avatarID = true;
          this._avatarID = value;
        }
      }

      public List<MMIStandard.MJointType> Joints
      {
        get
        {
          return _joints;
        }
        set
        {
          __isset.joints = true;
          this._joints = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarID;
        public bool joints;
      }

      public GetCurrentPostureValuesPartial_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Joints = new List<MMIStandard.MJointType>();
                    TList _list166 = iprot.ReadListBegin();
                    for( int _i167 = 0; _i167 < _list166.Count; ++_i167)
                    {
                      MMIStandard.MJointType _elem168;
                      _elem168 = (MMIStandard.MJointType)iprot.ReadI32();
                      Joints.Add(_elem168);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentPostureValuesPartial_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarID != null && __isset.avatarID) {
            field.Name = "avatarID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarID);
            oprot.WriteFieldEnd();
          }
          if (Joints != null && __isset.joints) {
            field.Name = "joints";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, Joints.Count));
              foreach (MMIStandard.MJointType _iter169 in Joints)
              {
                oprot.WriteI32((int)_iter169);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentPostureValuesPartial_args(");
        bool __first = true;
        if (AvatarID != null && __isset.avatarID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarID: ");
          __sb.Append(AvatarID);
        }
        if (Joints != null && __isset.joints) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Joints: ");
          __sb.Append(Joints);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentPostureValuesPartial_result : TBase
    {
      private MMIStandard.MAvatarPostureValues _success;

      public MMIStandard.MAvatarPostureValues Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCurrentPostureValuesPartial_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MAvatarPostureValues();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentPostureValuesPartial_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentPostureValuesPartial_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentJointPositions_args : TBase
    {
      private string _avatarID;

      public string AvatarID
      {
        get
        {
          return _avatarID;
        }
        set
        {
          __isset.avatarID = true;
          this._avatarID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarID;
      }

      public GetCurrentJointPositions_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentJointPositions_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarID != null && __isset.avatarID) {
            field.Name = "avatarID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentJointPositions_args(");
        bool __first = true;
        if (AvatarID != null && __isset.avatarID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarID: ");
          __sb.Append(AvatarID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentJointPositions_result : TBase
    {
      private List<MMIStandard.MVector3> _success;

      public List<MMIStandard.MVector3> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCurrentJointPositions_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MVector3>();
                    TList _list170 = iprot.ReadListBegin();
                    for( int _i171 = 0; _i171 < _list170.Count; ++_i171)
                    {
                      MMIStandard.MVector3 _elem172;
                      _elem172 = new MMIStandard.MVector3();
                      _elem172.Read(iprot);
                      Success.Add(_elem172);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentJointPositions_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MVector3 _iter173 in Success)
                {
                  _iter173.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentJointPositions_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRootPosition_args : TBase
    {
      private string _avatarID;

      public string AvatarID
      {
        get
        {
          return _avatarID;
        }
        set
        {
          __isset.avatarID = true;
          this._avatarID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarID;
      }

      public GetRootPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetRootPosition_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarID != null && __isset.avatarID) {
            field.Name = "avatarID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetRootPosition_args(");
        bool __first = true;
        if (AvatarID != null && __isset.avatarID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarID: ");
          __sb.Append(AvatarID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRootPosition_result : TBase
    {
      private MMIStandard.MVector3 _success;

      public MMIStandard.MVector3 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRootPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MVector3();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetRootPosition_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetRootPosition_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRootRotation_args : TBase
    {
      private string _avatarID;

      public string AvatarID
      {
        get
        {
          return _avatarID;
        }
        set
        {
          __isset.avatarID = true;
          this._avatarID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarID;
      }

      public GetRootRotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetRootRotation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarID != null && __isset.avatarID) {
            field.Name = "avatarID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetRootRotation_args(");
        bool __first = true;
        if (AvatarID != null && __isset.avatarID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarID: ");
          __sb.Append(AvatarID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRootRotation_result : TBase
    {
      private MMIStandard.MQuaternion _success;

      public MMIStandard.MQuaternion Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRootRotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MQuaternion();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetRootRotation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetRootRotation_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGlobalJointPosition_args : TBase
    {
      private string _avatarId;
      private MMIStandard.MJointType _joint;

      public string AvatarId
      {
        get
        {
          return _avatarId;
        }
        set
        {
          __isset.avatarId = true;
          this._avatarId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MMIStandard.MJointType"/>
      /// </summary>
      public MMIStandard.MJointType Joint
      {
        get
        {
          return _joint;
        }
        set
        {
          __isset.joint = true;
          this._joint = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarId;
        public bool joint;
      }

      public GetGlobalJointPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Joint = (MMIStandard.MJointType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGlobalJointPosition_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarId != null && __isset.avatarId) {
            field.Name = "avatarId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarId);
            oprot.WriteFieldEnd();
          }
          if (__isset.joint) {
            field.Name = "joint";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Joint);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGlobalJointPosition_args(");
        bool __first = true;
        if (AvatarId != null && __isset.avatarId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarId: ");
          __sb.Append(AvatarId);
        }
        if (__isset.joint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Joint: ");
          __sb.Append(Joint);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGlobalJointPosition_result : TBase
    {
      private MMIStandard.MVector3 _success;

      public MMIStandard.MVector3 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGlobalJointPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MVector3();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGlobalJointPosition_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGlobalJointPosition_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGlobalJointRotation_args : TBase
    {
      private string _avatarId;
      private MMIStandard.MJointType _joint;

      public string AvatarId
      {
        get
        {
          return _avatarId;
        }
        set
        {
          __isset.avatarId = true;
          this._avatarId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MMIStandard.MJointType"/>
      /// </summary>
      public MMIStandard.MJointType Joint
      {
        get
        {
          return _joint;
        }
        set
        {
          __isset.joint = true;
          this._joint = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarId;
        public bool joint;
      }

      public GetGlobalJointRotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Joint = (MMIStandard.MJointType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGlobalJointRotation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarId != null && __isset.avatarId) {
            field.Name = "avatarId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarId);
            oprot.WriteFieldEnd();
          }
          if (__isset.joint) {
            field.Name = "joint";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Joint);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGlobalJointRotation_args(");
        bool __first = true;
        if (AvatarId != null && __isset.avatarId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarId: ");
          __sb.Append(AvatarId);
        }
        if (__isset.joint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Joint: ");
          __sb.Append(Joint);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGlobalJointRotation_result : TBase
    {
      private MMIStandard.MQuaternion _success;

      public MMIStandard.MQuaternion Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGlobalJointRotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MQuaternion();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGlobalJointRotation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGlobalJointRotation_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLocalJointPosition_args : TBase
    {
      private string _avatarId;
      private MMIStandard.MJointType _joint;

      public string AvatarId
      {
        get
        {
          return _avatarId;
        }
        set
        {
          __isset.avatarId = true;
          this._avatarId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MMIStandard.MJointType"/>
      /// </summary>
      public MMIStandard.MJointType Joint
      {
        get
        {
          return _joint;
        }
        set
        {
          __isset.joint = true;
          this._joint = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarId;
        public bool joint;
      }

      public GetLocalJointPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Joint = (MMIStandard.MJointType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetLocalJointPosition_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarId != null && __isset.avatarId) {
            field.Name = "avatarId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarId);
            oprot.WriteFieldEnd();
          }
          if (__isset.joint) {
            field.Name = "joint";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Joint);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLocalJointPosition_args(");
        bool __first = true;
        if (AvatarId != null && __isset.avatarId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarId: ");
          __sb.Append(AvatarId);
        }
        if (__isset.joint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Joint: ");
          __sb.Append(Joint);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLocalJointPosition_result : TBase
    {
      private MMIStandard.MVector3 _success;

      public MMIStandard.MVector3 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetLocalJointPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MVector3();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetLocalJointPosition_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLocalJointPosition_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLocalJointRotation_args : TBase
    {
      private string _avatarId;
      private MMIStandard.MJointType _joint;

      public string AvatarId
      {
        get
        {
          return _avatarId;
        }
        set
        {
          __isset.avatarId = true;
          this._avatarId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MMIStandard.MJointType"/>
      /// </summary>
      public MMIStandard.MJointType Joint
      {
        get
        {
          return _joint;
        }
        set
        {
          __isset.joint = true;
          this._joint = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarId;
        public bool joint;
      }

      public GetLocalJointRotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Joint = (MMIStandard.MJointType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetLocalJointRotation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarId != null && __isset.avatarId) {
            field.Name = "avatarId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarId);
            oprot.WriteFieldEnd();
          }
          if (__isset.joint) {
            field.Name = "joint";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Joint);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLocalJointRotation_args(");
        bool __first = true;
        if (AvatarId != null && __isset.avatarId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarId: ");
          __sb.Append(AvatarId);
        }
        if (__isset.joint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Joint: ");
          __sb.Append(Joint);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLocalJointRotation_result : TBase
    {
      private MMIStandard.MQuaternion _success;

      public MMIStandard.MQuaternion Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetLocalJointRotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MQuaternion();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetLocalJointRotation_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLocalJointRotation_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetRootPosition_args : TBase
    {
      private string _avatarId;
      private MMIStandard.MVector3 _position;

      public string AvatarId
      {
        get
        {
          return _avatarId;
        }
        set
        {
          __isset.avatarId = true;
          this._avatarId = value;
        }
      }

      public MMIStandard.MVector3 Position
      {
        get
        {
          return _position;
        }
        set
        {
          __isset.position = true;
          this._position = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarId;
        public bool position;
      }

      public SetRootPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Position = new MMIStandard.MVector3();
                  Position.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetRootPosition_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarId != null && __isset.avatarId) {
            field.Name = "avatarId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarId);
            oprot.WriteFieldEnd();
          }
          if (Position != null && __isset.position) {
            field.Name = "position";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Position.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetRootPosition_args(");
        bool __first = true;
        if (AvatarId != null && __isset.avatarId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarId: ");
          __sb.Append(AvatarId);
        }
        if (Position != null && __isset.position) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Position: ");
          __sb.Append(Position== null ? "<null>" : Position.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetRootPosition_result : TBase
    {

      public SetRootPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetRootPosition_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetRootPosition_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetRootRotation_args : TBase
    {
      private string _avatarId;
      private MMIStandard.MQuaternion _rotation;

      public string AvatarId
      {
        get
        {
          return _avatarId;
        }
        set
        {
          __isset.avatarId = true;
          this._avatarId = value;
        }
      }

      public MMIStandard.MQuaternion Rotation
      {
        get
        {
          return _rotation;
        }
        set
        {
          __isset.rotation = true;
          this._rotation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarId;
        public bool rotation;
      }

      public SetRootRotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Rotation = new MMIStandard.MQuaternion();
                  Rotation.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetRootRotation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarId != null && __isset.avatarId) {
            field.Name = "avatarId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarId);
            oprot.WriteFieldEnd();
          }
          if (Rotation != null && __isset.rotation) {
            field.Name = "rotation";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Rotation.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetRootRotation_args(");
        bool __first = true;
        if (AvatarId != null && __isset.avatarId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarId: ");
          __sb.Append(AvatarId);
        }
        if (Rotation != null && __isset.rotation) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Rotation: ");
          __sb.Append(Rotation== null ? "<null>" : Rotation.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetRootRotation_result : TBase
    {

      public SetRootRotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetRootRotation_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetRootRotation_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetGlobalJointPosition_args : TBase
    {
      private string _avatarId;
      private MMIStandard.MJointType _joint;
      private MMIStandard.MVector3 _position;

      public string AvatarId
      {
        get
        {
          return _avatarId;
        }
        set
        {
          __isset.avatarId = true;
          this._avatarId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MMIStandard.MJointType"/>
      /// </summary>
      public MMIStandard.MJointType Joint
      {
        get
        {
          return _joint;
        }
        set
        {
          __isset.joint = true;
          this._joint = value;
        }
      }

      public MMIStandard.MVector3 Position
      {
        get
        {
          return _position;
        }
        set
        {
          __isset.position = true;
          this._position = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarId;
        public bool joint;
        public bool position;
      }

      public SetGlobalJointPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Joint = (MMIStandard.MJointType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Position = new MMIStandard.MVector3();
                  Position.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetGlobalJointPosition_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarId != null && __isset.avatarId) {
            field.Name = "avatarId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarId);
            oprot.WriteFieldEnd();
          }
          if (__isset.joint) {
            field.Name = "joint";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Joint);
            oprot.WriteFieldEnd();
          }
          if (Position != null && __isset.position) {
            field.Name = "position";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Position.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetGlobalJointPosition_args(");
        bool __first = true;
        if (AvatarId != null && __isset.avatarId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarId: ");
          __sb.Append(AvatarId);
        }
        if (__isset.joint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Joint: ");
          __sb.Append(Joint);
        }
        if (Position != null && __isset.position) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Position: ");
          __sb.Append(Position== null ? "<null>" : Position.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetGlobalJointPosition_result : TBase
    {

      public SetGlobalJointPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetGlobalJointPosition_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetGlobalJointPosition_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetGlobalJointRotation_args : TBase
    {
      private string _avatarId;
      private MMIStandard.MJointType _joint;
      private MMIStandard.MQuaternion _rotation;

      public string AvatarId
      {
        get
        {
          return _avatarId;
        }
        set
        {
          __isset.avatarId = true;
          this._avatarId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MMIStandard.MJointType"/>
      /// </summary>
      public MMIStandard.MJointType Joint
      {
        get
        {
          return _joint;
        }
        set
        {
          __isset.joint = true;
          this._joint = value;
        }
      }

      public MMIStandard.MQuaternion Rotation
      {
        get
        {
          return _rotation;
        }
        set
        {
          __isset.rotation = true;
          this._rotation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarId;
        public bool joint;
        public bool rotation;
      }

      public SetGlobalJointRotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Joint = (MMIStandard.MJointType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Rotation = new MMIStandard.MQuaternion();
                  Rotation.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetGlobalJointRotation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarId != null && __isset.avatarId) {
            field.Name = "avatarId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarId);
            oprot.WriteFieldEnd();
          }
          if (__isset.joint) {
            field.Name = "joint";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Joint);
            oprot.WriteFieldEnd();
          }
          if (Rotation != null && __isset.rotation) {
            field.Name = "rotation";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Rotation.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetGlobalJointRotation_args(");
        bool __first = true;
        if (AvatarId != null && __isset.avatarId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarId: ");
          __sb.Append(AvatarId);
        }
        if (__isset.joint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Joint: ");
          __sb.Append(Joint);
        }
        if (Rotation != null && __isset.rotation) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Rotation: ");
          __sb.Append(Rotation== null ? "<null>" : Rotation.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetGlobalJointRotation_result : TBase
    {

      public SetGlobalJointRotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetGlobalJointRotation_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetGlobalJointRotation_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetLocalJointPosition_args : TBase
    {
      private string _avatarId;
      private MMIStandard.MJointType _joint;
      private MMIStandard.MVector3 _position;

      public string AvatarId
      {
        get
        {
          return _avatarId;
        }
        set
        {
          __isset.avatarId = true;
          this._avatarId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MMIStandard.MJointType"/>
      /// </summary>
      public MMIStandard.MJointType Joint
      {
        get
        {
          return _joint;
        }
        set
        {
          __isset.joint = true;
          this._joint = value;
        }
      }

      public MMIStandard.MVector3 Position
      {
        get
        {
          return _position;
        }
        set
        {
          __isset.position = true;
          this._position = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarId;
        public bool joint;
        public bool position;
      }

      public SetLocalJointPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Joint = (MMIStandard.MJointType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Position = new MMIStandard.MVector3();
                  Position.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetLocalJointPosition_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarId != null && __isset.avatarId) {
            field.Name = "avatarId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarId);
            oprot.WriteFieldEnd();
          }
          if (__isset.joint) {
            field.Name = "joint";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Joint);
            oprot.WriteFieldEnd();
          }
          if (Position != null && __isset.position) {
            field.Name = "position";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Position.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetLocalJointPosition_args(");
        bool __first = true;
        if (AvatarId != null && __isset.avatarId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarId: ");
          __sb.Append(AvatarId);
        }
        if (__isset.joint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Joint: ");
          __sb.Append(Joint);
        }
        if (Position != null && __isset.position) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Position: ");
          __sb.Append(Position== null ? "<null>" : Position.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetLocalJointPosition_result : TBase
    {

      public SetLocalJointPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetLocalJointPosition_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetLocalJointPosition_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetLocalJointRotation_args : TBase
    {
      private string _avatarId;
      private MMIStandard.MJointType _joint;
      private MMIStandard.MQuaternion _rotation;

      public string AvatarId
      {
        get
        {
          return _avatarId;
        }
        set
        {
          __isset.avatarId = true;
          this._avatarId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MMIStandard.MJointType"/>
      /// </summary>
      public MMIStandard.MJointType Joint
      {
        get
        {
          return _joint;
        }
        set
        {
          __isset.joint = true;
          this._joint = value;
        }
      }

      public MMIStandard.MQuaternion Rotation
      {
        get
        {
          return _rotation;
        }
        set
        {
          __isset.rotation = true;
          this._rotation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarId;
        public bool joint;
        public bool rotation;
      }

      public SetLocalJointRotation_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Joint = (MMIStandard.MJointType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Rotation = new MMIStandard.MQuaternion();
                  Rotation.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetLocalJointRotation_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarId != null && __isset.avatarId) {
            field.Name = "avatarId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarId);
            oprot.WriteFieldEnd();
          }
          if (__isset.joint) {
            field.Name = "joint";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Joint);
            oprot.WriteFieldEnd();
          }
          if (Rotation != null && __isset.rotation) {
            field.Name = "rotation";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Rotation.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetLocalJointRotation_args(");
        bool __first = true;
        if (AvatarId != null && __isset.avatarId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarId: ");
          __sb.Append(AvatarId);
        }
        if (__isset.joint) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Joint: ");
          __sb.Append(Joint);
        }
        if (Rotation != null && __isset.rotation) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Rotation: ");
          __sb.Append(Rotation== null ? "<null>" : Rotation.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetLocalJointRotation_result : TBase
    {

      public SetLocalJointRotation_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetLocalJointRotation_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetLocalJointRotation_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RecomputeCurrentPostureValues_args : TBase
    {
      private string _avatarId;

      public string AvatarId
      {
        get
        {
          return _avatarId;
        }
        set
        {
          __isset.avatarId = true;
          this._avatarId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarId;
      }

      public RecomputeCurrentPostureValues_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AvatarId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RecomputeCurrentPostureValues_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarId != null && __isset.avatarId) {
            field.Name = "avatarId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RecomputeCurrentPostureValues_args(");
        bool __first = true;
        if (AvatarId != null && __isset.avatarId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarId: ");
          __sb.Append(AvatarId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RecomputeCurrentPostureValues_result : TBase
    {
      private MMIStandard.MAvatarPostureValues _success;

      public MMIStandard.MAvatarPostureValues Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RecomputeCurrentPostureValues_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MAvatarPostureValues();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RecomputeCurrentPostureValues_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RecomputeCurrentPostureValues_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
