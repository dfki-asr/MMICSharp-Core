/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MCoSimulationAccess {
    public interface ISync : MMIStandard.MMIServiceBase.ISync {
      MMIStandard.MBoolResponse RegisterAtEvent(MMIStandard.MIPAddress clientAddress, string eventType);
      MMIStandard.MBoolResponse UnregisterAtEvent(MMIStandard.MIPAddress clientAddress, string eventType);
      MMIStandard.MBoolResponse AssignInstruction(MMIStandard.MInstruction instruction, Dictionary<string, string> properties);
      MMIStandard.MBoolResponse Abort();
      MMIStandard.MBoolResponse AbortInstruction(string instructionID);
      MMIStandard.MBoolResponse AbortInstructions(List<string> instructionIDs);
      List<MCoSimulationEvents> GetHistoryFromTime(double startTime, double endTime, string eventType);
      List<MCoSimulationEvents> GetHistoryFromFrames(int fromFrame, int toFrame, string eventType);
      List<MCoSimulationEvents> GetHistory(string eventType);
      MCoSimulationEvents GetCurrentEvents();
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_RegisterAtEvent(AsyncCallback callback, object state, MMIStandard.MIPAddress clientAddress, string eventType);
      MMIStandard.MBoolResponse End_RegisterAtEvent(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_UnregisterAtEvent(AsyncCallback callback, object state, MMIStandard.MIPAddress clientAddress, string eventType);
      MMIStandard.MBoolResponse End_UnregisterAtEvent(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_AssignInstruction(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, Dictionary<string, string> properties);
      MMIStandard.MBoolResponse End_AssignInstruction(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Abort(AsyncCallback callback, object state);
      MMIStandard.MBoolResponse End_Abort(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_AbortInstruction(AsyncCallback callback, object state, string instructionID);
      MMIStandard.MBoolResponse End_AbortInstruction(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_AbortInstructions(AsyncCallback callback, object state, List<string> instructionIDs);
      MMIStandard.MBoolResponse End_AbortInstructions(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetHistoryFromTime(AsyncCallback callback, object state, double startTime, double endTime, string eventType);
      List<MCoSimulationEvents> End_GetHistoryFromTime(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetHistoryFromFrames(AsyncCallback callback, object state, int fromFrame, int toFrame, string eventType);
      List<MCoSimulationEvents> End_GetHistoryFromFrames(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetHistory(AsyncCallback callback, object state, string eventType);
      List<MCoSimulationEvents> End_GetHistory(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetCurrentEvents(AsyncCallback callback, object state);
      MCoSimulationEvents End_GetCurrentEvents(IAsyncResult asyncResult);
      #endif
    }

    public class Client : MMIStandard.MMIServiceBase.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_RegisterAtEvent(AsyncCallback callback, object state, MMIStandard.MIPAddress clientAddress, string eventType)
      {
        return send_RegisterAtEvent(callback, state, clientAddress, eventType);
      }

      public MMIStandard.MBoolResponse End_RegisterAtEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RegisterAtEvent();
      }

      #endif

      public MMIStandard.MBoolResponse RegisterAtEvent(MMIStandard.MIPAddress clientAddress, string eventType)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_RegisterAtEvent(null, null, clientAddress, eventType);
        return End_RegisterAtEvent(asyncResult);

        #else
        send_RegisterAtEvent(clientAddress, eventType);
        return recv_RegisterAtEvent();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RegisterAtEvent(AsyncCallback callback, object state, MMIStandard.MIPAddress clientAddress, string eventType)
      {
        oprot_.WriteMessageBegin(new TMessage("RegisterAtEvent", TMessageType.Call, seqid_));
        RegisterAtEvent_args args = new RegisterAtEvent_args();
        args.ClientAddress = clientAddress;
        args.EventType = eventType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_RegisterAtEvent(MMIStandard.MIPAddress clientAddress, string eventType)
      {
        oprot_.WriteMessageBegin(new TMessage("RegisterAtEvent", TMessageType.Call, seqid_));
        RegisterAtEvent_args args = new RegisterAtEvent_args();
        args.ClientAddress = clientAddress;
        args.EventType = eventType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_RegisterAtEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RegisterAtEvent_result result = new RegisterAtEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterAtEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_UnregisterAtEvent(AsyncCallback callback, object state, MMIStandard.MIPAddress clientAddress, string eventType)
      {
        return send_UnregisterAtEvent(callback, state, clientAddress, eventType);
      }

      public MMIStandard.MBoolResponse End_UnregisterAtEvent(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UnregisterAtEvent();
      }

      #endif

      public MMIStandard.MBoolResponse UnregisterAtEvent(MMIStandard.MIPAddress clientAddress, string eventType)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_UnregisterAtEvent(null, null, clientAddress, eventType);
        return End_UnregisterAtEvent(asyncResult);

        #else
        send_UnregisterAtEvent(clientAddress, eventType);
        return recv_UnregisterAtEvent();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UnregisterAtEvent(AsyncCallback callback, object state, MMIStandard.MIPAddress clientAddress, string eventType)
      {
        oprot_.WriteMessageBegin(new TMessage("UnregisterAtEvent", TMessageType.Call, seqid_));
        UnregisterAtEvent_args args = new UnregisterAtEvent_args();
        args.ClientAddress = clientAddress;
        args.EventType = eventType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_UnregisterAtEvent(MMIStandard.MIPAddress clientAddress, string eventType)
      {
        oprot_.WriteMessageBegin(new TMessage("UnregisterAtEvent", TMessageType.Call, seqid_));
        UnregisterAtEvent_args args = new UnregisterAtEvent_args();
        args.ClientAddress = clientAddress;
        args.EventType = eventType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_UnregisterAtEvent()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UnregisterAtEvent_result result = new UnregisterAtEvent_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UnregisterAtEvent failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_AssignInstruction(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, Dictionary<string, string> properties)
      {
        return send_AssignInstruction(callback, state, instruction, properties);
      }

      public MMIStandard.MBoolResponse End_AssignInstruction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AssignInstruction();
      }

      #endif

      public MMIStandard.MBoolResponse AssignInstruction(MMIStandard.MInstruction instruction, Dictionary<string, string> properties)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_AssignInstruction(null, null, instruction, properties);
        return End_AssignInstruction(asyncResult);

        #else
        send_AssignInstruction(instruction, properties);
        return recv_AssignInstruction();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AssignInstruction(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, Dictionary<string, string> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Call, seqid_));
        AssignInstruction_args args = new AssignInstruction_args();
        args.Instruction = instruction;
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_AssignInstruction(MMIStandard.MInstruction instruction, Dictionary<string, string> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Call, seqid_));
        AssignInstruction_args args = new AssignInstruction_args();
        args.Instruction = instruction;
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_AssignInstruction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AssignInstruction_result result = new AssignInstruction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AssignInstruction failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_Abort(AsyncCallback callback, object state)
      {
        return send_Abort(callback, state);
      }

      public MMIStandard.MBoolResponse End_Abort(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Abort();
      }

      #endif

      public MMIStandard.MBoolResponse Abort()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_Abort(null, null);
        return End_Abort(asyncResult);

        #else
        send_Abort();
        return recv_Abort();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Abort(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("Abort", TMessageType.Call, seqid_));
        Abort_args args = new Abort_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_Abort()
      {
        oprot_.WriteMessageBegin(new TMessage("Abort", TMessageType.Call, seqid_));
        Abort_args args = new Abort_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_Abort()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Abort_result result = new Abort_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Abort failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_AbortInstruction(AsyncCallback callback, object state, string instructionID)
      {
        return send_AbortInstruction(callback, state, instructionID);
      }

      public MMIStandard.MBoolResponse End_AbortInstruction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AbortInstruction();
      }

      #endif

      public MMIStandard.MBoolResponse AbortInstruction(string instructionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_AbortInstruction(null, null, instructionID);
        return End_AbortInstruction(asyncResult);

        #else
        send_AbortInstruction(instructionID);
        return recv_AbortInstruction();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AbortInstruction(AsyncCallback callback, object state, string instructionID)
      {
        oprot_.WriteMessageBegin(new TMessage("AbortInstruction", TMessageType.Call, seqid_));
        AbortInstruction_args args = new AbortInstruction_args();
        args.InstructionID = instructionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_AbortInstruction(string instructionID)
      {
        oprot_.WriteMessageBegin(new TMessage("AbortInstruction", TMessageType.Call, seqid_));
        AbortInstruction_args args = new AbortInstruction_args();
        args.InstructionID = instructionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_AbortInstruction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AbortInstruction_result result = new AbortInstruction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AbortInstruction failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_AbortInstructions(AsyncCallback callback, object state, List<string> instructionIDs)
      {
        return send_AbortInstructions(callback, state, instructionIDs);
      }

      public MMIStandard.MBoolResponse End_AbortInstructions(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AbortInstructions();
      }

      #endif

      public MMIStandard.MBoolResponse AbortInstructions(List<string> instructionIDs)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_AbortInstructions(null, null, instructionIDs);
        return End_AbortInstructions(asyncResult);

        #else
        send_AbortInstructions(instructionIDs);
        return recv_AbortInstructions();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AbortInstructions(AsyncCallback callback, object state, List<string> instructionIDs)
      {
        oprot_.WriteMessageBegin(new TMessage("AbortInstructions", TMessageType.Call, seqid_));
        AbortInstructions_args args = new AbortInstructions_args();
        args.InstructionIDs = instructionIDs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_AbortInstructions(List<string> instructionIDs)
      {
        oprot_.WriteMessageBegin(new TMessage("AbortInstructions", TMessageType.Call, seqid_));
        AbortInstructions_args args = new AbortInstructions_args();
        args.InstructionIDs = instructionIDs;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_AbortInstructions()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AbortInstructions_result result = new AbortInstructions_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AbortInstructions failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetHistoryFromTime(AsyncCallback callback, object state, double startTime, double endTime, string eventType)
      {
        return send_GetHistoryFromTime(callback, state, startTime, endTime, eventType);
      }

      public List<MCoSimulationEvents> End_GetHistoryFromTime(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetHistoryFromTime();
      }

      #endif

      public List<MCoSimulationEvents> GetHistoryFromTime(double startTime, double endTime, string eventType)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetHistoryFromTime(null, null, startTime, endTime, eventType);
        return End_GetHistoryFromTime(asyncResult);

        #else
        send_GetHistoryFromTime(startTime, endTime, eventType);
        return recv_GetHistoryFromTime();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetHistoryFromTime(AsyncCallback callback, object state, double startTime, double endTime, string eventType)
      {
        oprot_.WriteMessageBegin(new TMessage("GetHistoryFromTime", TMessageType.Call, seqid_));
        GetHistoryFromTime_args args = new GetHistoryFromTime_args();
        args.StartTime = startTime;
        args.EndTime = endTime;
        args.EventType = eventType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetHistoryFromTime(double startTime, double endTime, string eventType)
      {
        oprot_.WriteMessageBegin(new TMessage("GetHistoryFromTime", TMessageType.Call, seqid_));
        GetHistoryFromTime_args args = new GetHistoryFromTime_args();
        args.StartTime = startTime;
        args.EndTime = endTime;
        args.EventType = eventType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MCoSimulationEvents> recv_GetHistoryFromTime()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetHistoryFromTime_result result = new GetHistoryFromTime_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetHistoryFromTime failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetHistoryFromFrames(AsyncCallback callback, object state, int fromFrame, int toFrame, string eventType)
      {
        return send_GetHistoryFromFrames(callback, state, fromFrame, toFrame, eventType);
      }

      public List<MCoSimulationEvents> End_GetHistoryFromFrames(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetHistoryFromFrames();
      }

      #endif

      public List<MCoSimulationEvents> GetHistoryFromFrames(int fromFrame, int toFrame, string eventType)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetHistoryFromFrames(null, null, fromFrame, toFrame, eventType);
        return End_GetHistoryFromFrames(asyncResult);

        #else
        send_GetHistoryFromFrames(fromFrame, toFrame, eventType);
        return recv_GetHistoryFromFrames();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetHistoryFromFrames(AsyncCallback callback, object state, int fromFrame, int toFrame, string eventType)
      {
        oprot_.WriteMessageBegin(new TMessage("GetHistoryFromFrames", TMessageType.Call, seqid_));
        GetHistoryFromFrames_args args = new GetHistoryFromFrames_args();
        args.FromFrame = fromFrame;
        args.ToFrame = toFrame;
        args.EventType = eventType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetHistoryFromFrames(int fromFrame, int toFrame, string eventType)
      {
        oprot_.WriteMessageBegin(new TMessage("GetHistoryFromFrames", TMessageType.Call, seqid_));
        GetHistoryFromFrames_args args = new GetHistoryFromFrames_args();
        args.FromFrame = fromFrame;
        args.ToFrame = toFrame;
        args.EventType = eventType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MCoSimulationEvents> recv_GetHistoryFromFrames()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetHistoryFromFrames_result result = new GetHistoryFromFrames_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetHistoryFromFrames failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetHistory(AsyncCallback callback, object state, string eventType)
      {
        return send_GetHistory(callback, state, eventType);
      }

      public List<MCoSimulationEvents> End_GetHistory(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetHistory();
      }

      #endif

      public List<MCoSimulationEvents> GetHistory(string eventType)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetHistory(null, null, eventType);
        return End_GetHistory(asyncResult);

        #else
        send_GetHistory(eventType);
        return recv_GetHistory();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetHistory(AsyncCallback callback, object state, string eventType)
      {
        oprot_.WriteMessageBegin(new TMessage("GetHistory", TMessageType.Call, seqid_));
        GetHistory_args args = new GetHistory_args();
        args.EventType = eventType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetHistory(string eventType)
      {
        oprot_.WriteMessageBegin(new TMessage("GetHistory", TMessageType.Call, seqid_));
        GetHistory_args args = new GetHistory_args();
        args.EventType = eventType;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MCoSimulationEvents> recv_GetHistory()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetHistory_result result = new GetHistory_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetHistory failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetCurrentEvents(AsyncCallback callback, object state)
      {
        return send_GetCurrentEvents(callback, state);
      }

      public MCoSimulationEvents End_GetCurrentEvents(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCurrentEvents();
      }

      #endif

      public MCoSimulationEvents GetCurrentEvents()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetCurrentEvents(null, null);
        return End_GetCurrentEvents(asyncResult);

        #else
        send_GetCurrentEvents();
        return recv_GetCurrentEvents();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCurrentEvents(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentEvents", TMessageType.Call, seqid_));
        GetCurrentEvents_args args = new GetCurrentEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetCurrentEvents()
      {
        oprot_.WriteMessageBegin(new TMessage("GetCurrentEvents", TMessageType.Call, seqid_));
        GetCurrentEvents_args args = new GetCurrentEvents_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MCoSimulationEvents recv_GetCurrentEvents()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCurrentEvents_result result = new GetCurrentEvents_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCurrentEvents failed: unknown result");
      }

    }
    public class Processor : MMIStandard.MMIServiceBase.Processor, TProcessor {
      public Processor(ISync iface) : base(iface)
      {
        iface_ = iface;
        processMap_["RegisterAtEvent"] = RegisterAtEvent_Process;
        processMap_["UnregisterAtEvent"] = UnregisterAtEvent_Process;
        processMap_["AssignInstruction"] = AssignInstruction_Process;
        processMap_["Abort"] = Abort_Process;
        processMap_["AbortInstruction"] = AbortInstruction_Process;
        processMap_["AbortInstructions"] = AbortInstructions_Process;
        processMap_["GetHistoryFromTime"] = GetHistoryFromTime_Process;
        processMap_["GetHistoryFromFrames"] = GetHistoryFromFrames_Process;
        processMap_["GetHistory"] = GetHistory_Process;
        processMap_["GetCurrentEvents"] = GetCurrentEvents_Process;
      }

      private ISync iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void RegisterAtEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RegisterAtEvent_args args = new RegisterAtEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RegisterAtEvent_result result = new RegisterAtEvent_result();
        try
        {
          result.Success = iface_.RegisterAtEvent(args.ClientAddress, args.EventType);
          oprot.WriteMessageBegin(new TMessage("RegisterAtEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RegisterAtEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UnregisterAtEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UnregisterAtEvent_args args = new UnregisterAtEvent_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UnregisterAtEvent_result result = new UnregisterAtEvent_result();
        try
        {
          result.Success = iface_.UnregisterAtEvent(args.ClientAddress, args.EventType);
          oprot.WriteMessageBegin(new TMessage("UnregisterAtEvent", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("UnregisterAtEvent", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AssignInstruction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AssignInstruction_args args = new AssignInstruction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AssignInstruction_result result = new AssignInstruction_result();
        try
        {
          result.Success = iface_.AssignInstruction(args.Instruction, args.Properties);
          oprot.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Abort_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Abort_args args = new Abort_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Abort_result result = new Abort_result();
        try
        {
          result.Success = iface_.Abort();
          oprot.WriteMessageBegin(new TMessage("Abort", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Abort", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AbortInstruction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AbortInstruction_args args = new AbortInstruction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AbortInstruction_result result = new AbortInstruction_result();
        try
        {
          result.Success = iface_.AbortInstruction(args.InstructionID);
          oprot.WriteMessageBegin(new TMessage("AbortInstruction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AbortInstruction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AbortInstructions_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AbortInstructions_args args = new AbortInstructions_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AbortInstructions_result result = new AbortInstructions_result();
        try
        {
          result.Success = iface_.AbortInstructions(args.InstructionIDs);
          oprot.WriteMessageBegin(new TMessage("AbortInstructions", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AbortInstructions", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetHistoryFromTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetHistoryFromTime_args args = new GetHistoryFromTime_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetHistoryFromTime_result result = new GetHistoryFromTime_result();
        try
        {
          result.Success = iface_.GetHistoryFromTime(args.StartTime, args.EndTime, args.EventType);
          oprot.WriteMessageBegin(new TMessage("GetHistoryFromTime", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetHistoryFromTime", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetHistoryFromFrames_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetHistoryFromFrames_args args = new GetHistoryFromFrames_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetHistoryFromFrames_result result = new GetHistoryFromFrames_result();
        try
        {
          result.Success = iface_.GetHistoryFromFrames(args.FromFrame, args.ToFrame, args.EventType);
          oprot.WriteMessageBegin(new TMessage("GetHistoryFromFrames", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetHistoryFromFrames", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetHistory_args args = new GetHistory_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetHistory_result result = new GetHistory_result();
        try
        {
          result.Success = iface_.GetHistory(args.EventType);
          oprot.WriteMessageBegin(new TMessage("GetHistory", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetHistory", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCurrentEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCurrentEvents_args args = new GetCurrentEvents_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCurrentEvents_result result = new GetCurrentEvents_result();
        try
        {
          result.Success = iface_.GetCurrentEvents();
          oprot.WriteMessageBegin(new TMessage("GetCurrentEvents", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetCurrentEvents", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterAtEvent_args : TBase
    {
      private MMIStandard.MIPAddress _clientAddress;
      private string _eventType;

      public MMIStandard.MIPAddress ClientAddress
      {
        get
        {
          return _clientAddress;
        }
        set
        {
          __isset.clientAddress = true;
          this._clientAddress = value;
        }
      }

      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientAddress;
        public bool eventType;
      }

      public RegisterAtEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  ClientAddress = new MMIStandard.MIPAddress();
                  ClientAddress.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EventType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RegisterAtEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ClientAddress != null && __isset.clientAddress) {
            field.Name = "clientAddress";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ClientAddress.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (EventType != null && __isset.eventType) {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventType);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RegisterAtEvent_args(");
        bool __first = true;
        if (ClientAddress != null && __isset.clientAddress) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientAddress: ");
          __sb.Append(ClientAddress== null ? "<null>" : ClientAddress.ToString());
        }
        if (EventType != null && __isset.eventType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventType: ");
          __sb.Append(EventType);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterAtEvent_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RegisterAtEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RegisterAtEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RegisterAtEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnregisterAtEvent_args : TBase
    {
      private MMIStandard.MIPAddress _clientAddress;
      private string _eventType;

      public MMIStandard.MIPAddress ClientAddress
      {
        get
        {
          return _clientAddress;
        }
        set
        {
          __isset.clientAddress = true;
          this._clientAddress = value;
        }
      }

      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool clientAddress;
        public bool eventType;
      }

      public UnregisterAtEvent_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  ClientAddress = new MMIStandard.MIPAddress();
                  ClientAddress.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  EventType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UnregisterAtEvent_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ClientAddress != null && __isset.clientAddress) {
            field.Name = "clientAddress";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ClientAddress.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (EventType != null && __isset.eventType) {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventType);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UnregisterAtEvent_args(");
        bool __first = true;
        if (ClientAddress != null && __isset.clientAddress) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientAddress: ");
          __sb.Append(ClientAddress== null ? "<null>" : ClientAddress.ToString());
        }
        if (EventType != null && __isset.eventType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventType: ");
          __sb.Append(EventType);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnregisterAtEvent_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UnregisterAtEvent_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UnregisterAtEvent_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UnregisterAtEvent_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AssignInstruction_args : TBase
    {
      private MMIStandard.MInstruction _instruction;
      private Dictionary<string, string> _properties;

      public MMIStandard.MInstruction Instruction
      {
        get
        {
          return _instruction;
        }
        set
        {
          __isset.instruction = true;
          this._instruction = value;
        }
      }

      public Dictionary<string, string> Properties
      {
        get
        {
          return _properties;
        }
        set
        {
          __isset.properties = true;
          this._properties = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instruction;
        public bool properties;
      }

      public AssignInstruction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Instruction = new MMIStandard.MInstruction();
                  Instruction.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Map) {
                  {
                    Properties = new Dictionary<string, string>();
                    TMap _map4 = iprot.ReadMapBegin();
                    for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                    {
                      string _key6;
                      string _val7;
                      _key6 = iprot.ReadString();
                      _val7 = iprot.ReadString();
                      Properties[_key6] = _val7;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AssignInstruction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Instruction != null && __isset.instruction) {
            field.Name = "instruction";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Instruction.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Properties != null && __isset.properties) {
            field.Name = "properties";
            field.Type = TType.Map;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
              foreach (string _iter8 in Properties.Keys)
              {
                oprot.WriteString(_iter8);
                oprot.WriteString(Properties[_iter8]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AssignInstruction_args(");
        bool __first = true;
        if (Instruction != null && __isset.instruction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Instruction: ");
          __sb.Append(Instruction== null ? "<null>" : Instruction.ToString());
        }
        if (Properties != null && __isset.properties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Properties: ");
          __sb.Append(Properties);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AssignInstruction_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AssignInstruction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AssignInstruction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AssignInstruction_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Abort_args : TBase
    {

      public Abort_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Abort_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Abort_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Abort_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Abort_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Abort_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Abort_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AbortInstruction_args : TBase
    {
      private string _instructionID;

      public string InstructionID
      {
        get
        {
          return _instructionID;
        }
        set
        {
          __isset.instructionID = true;
          this._instructionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instructionID;
      }

      public AbortInstruction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  InstructionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AbortInstruction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (InstructionID != null && __isset.instructionID) {
            field.Name = "instructionID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(InstructionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AbortInstruction_args(");
        bool __first = true;
        if (InstructionID != null && __isset.instructionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstructionID: ");
          __sb.Append(InstructionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AbortInstruction_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AbortInstruction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AbortInstruction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AbortInstruction_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AbortInstructions_args : TBase
    {
      private List<string> _instructionIDs;

      public List<string> InstructionIDs
      {
        get
        {
          return _instructionIDs;
        }
        set
        {
          __isset.instructionIDs = true;
          this._instructionIDs = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instructionIDs;
      }

      public AbortInstructions_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    InstructionIDs = new List<string>();
                    TList _list9 = iprot.ReadListBegin();
                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                    {
                      string _elem11;
                      _elem11 = iprot.ReadString();
                      InstructionIDs.Add(_elem11);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AbortInstructions_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (InstructionIDs != null && __isset.instructionIDs) {
            field.Name = "instructionIDs";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, InstructionIDs.Count));
              foreach (string _iter12 in InstructionIDs)
              {
                oprot.WriteString(_iter12);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AbortInstructions_args(");
        bool __first = true;
        if (InstructionIDs != null && __isset.instructionIDs) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstructionIDs: ");
          __sb.Append(InstructionIDs);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AbortInstructions_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AbortInstructions_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AbortInstructions_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AbortInstructions_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHistoryFromTime_args : TBase
    {
      private double _startTime;
      private double _endTime;
      private string _eventType;

      public double StartTime
      {
        get
        {
          return _startTime;
        }
        set
        {
          __isset.startTime = true;
          this._startTime = value;
        }
      }

      public double EndTime
      {
        get
        {
          return _endTime;
        }
        set
        {
          __isset.endTime = true;
          this._endTime = value;
        }
      }

      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool startTime;
        public bool endTime;
        public bool eventType;
      }

      public GetHistoryFromTime_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Double) {
                  StartTime = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Double) {
                  EndTime = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  EventType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetHistoryFromTime_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.startTime) {
            field.Name = "startTime";
            field.Type = TType.Double;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(StartTime);
            oprot.WriteFieldEnd();
          }
          if (__isset.endTime) {
            field.Name = "endTime";
            field.Type = TType.Double;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(EndTime);
            oprot.WriteFieldEnd();
          }
          if (EventType != null && __isset.eventType) {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventType);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetHistoryFromTime_args(");
        bool __first = true;
        if (__isset.startTime) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StartTime: ");
          __sb.Append(StartTime);
        }
        if (__isset.endTime) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EndTime: ");
          __sb.Append(EndTime);
        }
        if (EventType != null && __isset.eventType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventType: ");
          __sb.Append(EventType);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHistoryFromTime_result : TBase
    {
      private List<MCoSimulationEvents> _success;

      public List<MCoSimulationEvents> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetHistoryFromTime_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MCoSimulationEvents>();
                    TList _list13 = iprot.ReadListBegin();
                    for( int _i14 = 0; _i14 < _list13.Count; ++_i14)
                    {
                      MCoSimulationEvents _elem15;
                      _elem15 = new MCoSimulationEvents();
                      _elem15.Read(iprot);
                      Success.Add(_elem15);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetHistoryFromTime_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MCoSimulationEvents _iter16 in Success)
                {
                  _iter16.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetHistoryFromTime_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHistoryFromFrames_args : TBase
    {
      private int _fromFrame;
      private int _toFrame;
      private string _eventType;

      public int FromFrame
      {
        get
        {
          return _fromFrame;
        }
        set
        {
          __isset.fromFrame = true;
          this._fromFrame = value;
        }
      }

      public int ToFrame
      {
        get
        {
          return _toFrame;
        }
        set
        {
          __isset.toFrame = true;
          this._toFrame = value;
        }
      }

      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool fromFrame;
        public bool toFrame;
        public bool eventType;
      }

      public GetHistoryFromFrames_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  FromFrame = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ToFrame = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  EventType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetHistoryFromFrames_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.fromFrame) {
            field.Name = "fromFrame";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(FromFrame);
            oprot.WriteFieldEnd();
          }
          if (__isset.toFrame) {
            field.Name = "toFrame";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ToFrame);
            oprot.WriteFieldEnd();
          }
          if (EventType != null && __isset.eventType) {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventType);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetHistoryFromFrames_args(");
        bool __first = true;
        if (__isset.fromFrame) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FromFrame: ");
          __sb.Append(FromFrame);
        }
        if (__isset.toFrame) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ToFrame: ");
          __sb.Append(ToFrame);
        }
        if (EventType != null && __isset.eventType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventType: ");
          __sb.Append(EventType);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHistoryFromFrames_result : TBase
    {
      private List<MCoSimulationEvents> _success;

      public List<MCoSimulationEvents> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetHistoryFromFrames_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MCoSimulationEvents>();
                    TList _list17 = iprot.ReadListBegin();
                    for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                    {
                      MCoSimulationEvents _elem19;
                      _elem19 = new MCoSimulationEvents();
                      _elem19.Read(iprot);
                      Success.Add(_elem19);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetHistoryFromFrames_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MCoSimulationEvents _iter20 in Success)
                {
                  _iter20.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetHistoryFromFrames_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHistory_args : TBase
    {
      private string _eventType;

      public string EventType
      {
        get
        {
          return _eventType;
        }
        set
        {
          __isset.eventType = true;
          this._eventType = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool eventType;
      }

      public GetHistory_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  EventType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetHistory_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (EventType != null && __isset.eventType) {
            field.Name = "eventType";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EventType);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetHistory_args(");
        bool __first = true;
        if (EventType != null && __isset.eventType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EventType: ");
          __sb.Append(EventType);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetHistory_result : TBase
    {
      private List<MCoSimulationEvents> _success;

      public List<MCoSimulationEvents> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetHistory_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MCoSimulationEvents>();
                    TList _list21 = iprot.ReadListBegin();
                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                    {
                      MCoSimulationEvents _elem23;
                      _elem23 = new MCoSimulationEvents();
                      _elem23.Read(iprot);
                      Success.Add(_elem23);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetHistory_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MCoSimulationEvents _iter24 in Success)
                {
                  _iter24.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetHistory_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentEvents_args : TBase
    {

      public GetCurrentEvents_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentEvents_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentEvents_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCurrentEvents_result : TBase
    {
      private MCoSimulationEvents _success;

      public MCoSimulationEvents Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCurrentEvents_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MCoSimulationEvents();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCurrentEvents_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCurrentEvents_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
