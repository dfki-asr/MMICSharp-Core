/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MIKProperty : TBase
  {

    public List<double> Values { get; set; }

    public double Weight { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="MMIStandard.MEndeffectorType"/>
    /// </summary>
    public MMIStandard.MEndeffectorType Target { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="MIKOperationType"/>
    /// </summary>
    public MIKOperationType OperationType { get; set; }

    public MIKProperty() {
    }

    public MIKProperty(List<double> Values, double Weight, MMIStandard.MEndeffectorType Target, MIKOperationType OperationType) : this() {
      this.Values = Values;
      this.Weight = Weight;
      this.Target = Target;
      this.OperationType = OperationType;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Values = false;
        bool isset_Weight = false;
        bool isset_Target = false;
        bool isset_OperationType = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Values = new List<double>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    double _elem6;
                    _elem6 = iprot.ReadDouble();
                    Values.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
                isset_Values = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Weight = iprot.ReadDouble();
                isset_Weight = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Target = (MMIStandard.MEndeffectorType)iprot.ReadI32();
                isset_Target = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                OperationType = (MIKOperationType)iprot.ReadI32();
                isset_OperationType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Values)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Values not set");
        if (!isset_Weight)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Weight not set");
        if (!isset_Target)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Target not set");
        if (!isset_OperationType)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field OperationType not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MIKProperty");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Values == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Values not set");
        field.Name = "Values";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Double, Values.Count));
          foreach (double _iter7 in Values)
          {
            oprot.WriteDouble(_iter7);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        field.Name = "Weight";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Weight);
        oprot.WriteFieldEnd();
        field.Name = "Target";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Target);
        oprot.WriteFieldEnd();
        field.Name = "OperationType";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)OperationType);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MIKProperty(");
      __sb.Append(", Values: ");
      __sb.Append(Values);
      __sb.Append(", Weight: ");
      __sb.Append(Weight);
      __sb.Append(", Target: ");
      __sb.Append(Target);
      __sb.Append(", OperationType: ");
      __sb.Append(OperationType);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
