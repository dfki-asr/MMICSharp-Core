/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class MMotionInbetweening {
  public interface ISync : MMIServiceBase.ISync {
    List<MAvatarPostureValues> Blend(MAvatarPostureValues start, MAvatarPostureValues target, double duration);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_Blend(AsyncCallback callback, object state, MAvatarPostureValues start, MAvatarPostureValues target, double duration);
    List<MAvatarPostureValues> End_Blend(IAsyncResult asyncResult);
    #endif
  }

  public class Client : MMIServiceBase.Client, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
    {
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_Blend(AsyncCallback callback, object state, MAvatarPostureValues start, MAvatarPostureValues target, double duration)
    {
      return send_Blend(callback, state, start, target, duration);
    }

    public List<MAvatarPostureValues> End_Blend(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_Blend();
    }

    #endif

    public List<MAvatarPostureValues> Blend(MAvatarPostureValues start, MAvatarPostureValues target, double duration)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_Blend(null, null, start, target, duration);
      return End_Blend(asyncResult);

      #else
      send_Blend(start, target, duration);
      return recv_Blend();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_Blend(AsyncCallback callback, object state, MAvatarPostureValues start, MAvatarPostureValues target, double duration)
    {
      oprot_.WriteMessageBegin(new TMessage("Blend", TMessageType.Call, seqid_));
      Blend_args args = new Blend_args();
      args.Start = start;
      args.Target = target;
      args.Duration = duration;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_Blend(MAvatarPostureValues start, MAvatarPostureValues target, double duration)
    {
      oprot_.WriteMessageBegin(new TMessage("Blend", TMessageType.Call, seqid_));
      Blend_args args = new Blend_args();
      args.Start = start;
      args.Target = target;
      args.Duration = duration;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<MAvatarPostureValues> recv_Blend()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      Blend_result result = new Blend_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blend failed: unknown result");
    }

  }
  public class Processor : MMIServiceBase.Processor, TProcessor {
    public Processor(ISync iface) : base(iface)
    {
      iface_ = iface;
      processMap_["Blend"] = Blend_Process;
    }

    private ISync iface_;

    public new bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void Blend_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      Blend_args args = new Blend_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      Blend_result result = new Blend_result();
      try
      {
        result.Success = iface_.Blend(args.Start, args.Target, args.Duration);
        oprot.WriteMessageBegin(new TMessage("Blend", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("Blend", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Blend_args : TBase
  {
    private MAvatarPostureValues _start;
    private MAvatarPostureValues _target;
    private double _duration;

    public MAvatarPostureValues Start
    {
      get
      {
        return _start;
      }
      set
      {
        __isset.start = true;
        this._start = value;
      }
    }

    public MAvatarPostureValues Target
    {
      get
      {
        return _target;
      }
      set
      {
        __isset.target = true;
        this._target = value;
      }
    }

    public double Duration
    {
      get
      {
        return _duration;
      }
      set
      {
        __isset.duration = true;
        this._duration = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool start;
      public bool target;
      public bool duration;
    }

    public Blend_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Start = new MAvatarPostureValues();
                Start.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Target = new MAvatarPostureValues();
                Target.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                Duration = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Blend_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Start != null && __isset.start) {
          field.Name = "start";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Start.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Target.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.duration) {
          field.Name = "duration";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Duration);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Blend_args(");
      bool __first = true;
      if (Start != null && __isset.start) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Start: ");
        __sb.Append(Start== null ? "<null>" : Start.ToString());
      }
      if (Target != null && __isset.target) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Target: ");
        __sb.Append(Target== null ? "<null>" : Target.ToString());
      }
      if (__isset.duration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Duration: ");
        __sb.Append(Duration);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Blend_result : TBase
  {
    private List<MAvatarPostureValues> _success;

    public List<MAvatarPostureValues> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public Blend_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<MAvatarPostureValues>();
                  TList _list136 = iprot.ReadListBegin();
                  for( int _i137 = 0; _i137 < _list136.Count; ++_i137)
                  {
                    MAvatarPostureValues _elem138;
                    _elem138 = new MAvatarPostureValues();
                    _elem138.Read(iprot);
                    Success.Add(_elem138);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Blend_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (MAvatarPostureValues _iter139 in Success)
              {
                _iter139.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Blend_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
