/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MBlendingService {
    public interface ISync : MMIServiceBase.ISync {
      MMIStandard.MBoolResponse SetBlendingMask(Dictionary<MMIStandard.MJointType, double> mask, string avatarID);
      MMIStandard.MAvatarPostureValues Blend(MMIStandard.MAvatarPostureValues startPosture, MMIStandard.MAvatarPostureValues targetPosture, double weight);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_SetBlendingMask(AsyncCallback callback, object state, Dictionary<MMIStandard.MJointType, double> mask, string avatarID);
      MMIStandard.MBoolResponse End_SetBlendingMask(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Blend(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues startPosture, MMIStandard.MAvatarPostureValues targetPosture, double weight);
      MMIStandard.MAvatarPostureValues End_Blend(IAsyncResult asyncResult);
      #endif
    }

    public class Client : MMIServiceBase.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_SetBlendingMask(AsyncCallback callback, object state, Dictionary<MMIStandard.MJointType, double> mask, string avatarID)
      {
        return send_SetBlendingMask(callback, state, mask, avatarID);
      }

      public MMIStandard.MBoolResponse End_SetBlendingMask(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetBlendingMask();
      }

      #endif

      public MMIStandard.MBoolResponse SetBlendingMask(Dictionary<MMIStandard.MJointType, double> mask, string avatarID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_SetBlendingMask(null, null, mask, avatarID);
        return End_SetBlendingMask(asyncResult);

        #else
        send_SetBlendingMask(mask, avatarID);
        return recv_SetBlendingMask();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetBlendingMask(AsyncCallback callback, object state, Dictionary<MMIStandard.MJointType, double> mask, string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("SetBlendingMask", TMessageType.Call, seqid_));
        SetBlendingMask_args args = new SetBlendingMask_args();
        args.Mask = mask;
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_SetBlendingMask(Dictionary<MMIStandard.MJointType, double> mask, string avatarID)
      {
        oprot_.WriteMessageBegin(new TMessage("SetBlendingMask", TMessageType.Call, seqid_));
        SetBlendingMask_args args = new SetBlendingMask_args();
        args.Mask = mask;
        args.AvatarID = avatarID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_SetBlendingMask()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetBlendingMask_result result = new SetBlendingMask_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetBlendingMask failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_Blend(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues startPosture, MMIStandard.MAvatarPostureValues targetPosture, double weight)
      {
        return send_Blend(callback, state, startPosture, targetPosture, weight);
      }

      public MMIStandard.MAvatarPostureValues End_Blend(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Blend();
      }

      #endif

      public MMIStandard.MAvatarPostureValues Blend(MMIStandard.MAvatarPostureValues startPosture, MMIStandard.MAvatarPostureValues targetPosture, double weight)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_Blend(null, null, startPosture, targetPosture, weight);
        return End_Blend(asyncResult);

        #else
        send_Blend(startPosture, targetPosture, weight);
        return recv_Blend();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Blend(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues startPosture, MMIStandard.MAvatarPostureValues targetPosture, double weight)
      {
        oprot_.WriteMessageBegin(new TMessage("Blend", TMessageType.Call, seqid_));
        Blend_args args = new Blend_args();
        args.StartPosture = startPosture;
        args.TargetPosture = targetPosture;
        args.Weight = weight;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_Blend(MMIStandard.MAvatarPostureValues startPosture, MMIStandard.MAvatarPostureValues targetPosture, double weight)
      {
        oprot_.WriteMessageBegin(new TMessage("Blend", TMessageType.Call, seqid_));
        Blend_args args = new Blend_args();
        args.StartPosture = startPosture;
        args.TargetPosture = targetPosture;
        args.Weight = weight;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MAvatarPostureValues recv_Blend()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Blend_result result = new Blend_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blend failed: unknown result");
      }

    }
    public class Processor : MMIServiceBase.Processor, TProcessor {
      public Processor(ISync iface) : base(iface)
      {
        iface_ = iface;
        processMap_["SetBlendingMask"] = SetBlendingMask_Process;
        processMap_["Blend"] = Blend_Process;
      }

      private ISync iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void SetBlendingMask_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetBlendingMask_args args = new SetBlendingMask_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetBlendingMask_result result = new SetBlendingMask_result();
        try
        {
          result.Success = iface_.SetBlendingMask(args.Mask, args.AvatarID);
          oprot.WriteMessageBegin(new TMessage("SetBlendingMask", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetBlendingMask", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Blend_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Blend_args args = new Blend_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Blend_result result = new Blend_result();
        try
        {
          result.Success = iface_.Blend(args.StartPosture, args.TargetPosture, args.Weight);
          oprot.WriteMessageBegin(new TMessage("Blend", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Blend", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetBlendingMask_args : TBase
    {
      private Dictionary<MMIStandard.MJointType, double> _mask;
      private string _avatarID;

      public Dictionary<MMIStandard.MJointType, double> Mask
      {
        get
        {
          return _mask;
        }
        set
        {
          __isset.mask = true;
          this._mask = value;
        }
      }

      public string AvatarID
      {
        get
        {
          return _avatarID;
        }
        set
        {
          __isset.avatarID = true;
          this._avatarID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mask;
        public bool avatarID;
      }

      public SetBlendingMask_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    Mask = new Dictionary<MMIStandard.MJointType, double>();
                    TMap _map103 = iprot.ReadMapBegin();
                    for( int _i104 = 0; _i104 < _map103.Count; ++_i104)
                    {
                      MMIStandard.MJointType _key105;
                      double _val106;
                      _key105 = (MMIStandard.MJointType)iprot.ReadI32();
                      _val106 = iprot.ReadDouble();
                      Mask[_key105] = _val106;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  AvatarID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetBlendingMask_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Mask != null && __isset.mask) {
            field.Name = "mask";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.Double, Mask.Count));
              foreach (MMIStandard.MJointType _iter107 in Mask.Keys)
              {
                oprot.WriteI32((int)_iter107);
                oprot.WriteDouble(Mask[_iter107]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (AvatarID != null && __isset.avatarID) {
            field.Name = "avatarID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AvatarID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetBlendingMask_args(");
        bool __first = true;
        if (Mask != null && __isset.mask) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mask: ");
          __sb.Append(Mask);
        }
        if (AvatarID != null && __isset.avatarID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarID: ");
          __sb.Append(AvatarID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetBlendingMask_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SetBlendingMask_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetBlendingMask_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetBlendingMask_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Blend_args : TBase
    {
      private MMIStandard.MAvatarPostureValues _startPosture;
      private MMIStandard.MAvatarPostureValues _targetPosture;
      private double _weight;

      public MMIStandard.MAvatarPostureValues StartPosture
      {
        get
        {
          return _startPosture;
        }
        set
        {
          __isset.startPosture = true;
          this._startPosture = value;
        }
      }

      public MMIStandard.MAvatarPostureValues TargetPosture
      {
        get
        {
          return _targetPosture;
        }
        set
        {
          __isset.targetPosture = true;
          this._targetPosture = value;
        }
      }

      public double Weight
      {
        get
        {
          return _weight;
        }
        set
        {
          __isset.weight = true;
          this._weight = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool startPosture;
        public bool targetPosture;
        public bool weight;
      }

      public Blend_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  StartPosture = new MMIStandard.MAvatarPostureValues();
                  StartPosture.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  TargetPosture = new MMIStandard.MAvatarPostureValues();
                  TargetPosture.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Double) {
                  Weight = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Blend_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (StartPosture != null && __isset.startPosture) {
            field.Name = "startPosture";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            StartPosture.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (TargetPosture != null && __isset.targetPosture) {
            field.Name = "targetPosture";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            TargetPosture.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.weight) {
            field.Name = "weight";
            field.Type = TType.Double;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Weight);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Blend_args(");
        bool __first = true;
        if (StartPosture != null && __isset.startPosture) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("StartPosture: ");
          __sb.Append(StartPosture== null ? "<null>" : StartPosture.ToString());
        }
        if (TargetPosture != null && __isset.targetPosture) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TargetPosture: ");
          __sb.Append(TargetPosture== null ? "<null>" : TargetPosture.ToString());
        }
        if (__isset.weight) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Weight: ");
          __sb.Append(Weight);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Blend_result : TBase
    {
      private MMIStandard.MAvatarPostureValues _success;

      public MMIStandard.MAvatarPostureValues Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Blend_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MAvatarPostureValues();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Blend_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Blend_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
