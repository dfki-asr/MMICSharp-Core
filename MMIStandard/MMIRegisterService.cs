/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MMIRegisterService {
    public interface ISync {
      List<MAdapterDescription> GetRegisteredAdapters(string sessionID);
      List<MMIStandard.MServiceDescription> GetRegisteredServices(string sessionID);
      Dictionary<MMIStandard.MMUDescription, List<MMIStandard.MIPAddress>> GetAvailableMMUs(string sessionID);
      MMIStandard.MBoolResponse RegisterAdapter(MAdapterDescription adapterDescription);
      MMIStandard.MBoolResponse UnregisterAdapter(MAdapterDescription adapterDescription);
      MMIStandard.MBoolResponse RegisterService(MMIStandard.MServiceDescription serviceDescription);
      MMIStandard.MBoolResponse UnregisterService(MMIStandard.MServiceDescription serviceDescription);
      string CreateSessionID(Dictionary<string, string> properties);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_GetRegisteredAdapters(AsyncCallback callback, object state, string sessionID);
      List<MAdapterDescription> End_GetRegisteredAdapters(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetRegisteredServices(AsyncCallback callback, object state, string sessionID);
      List<MMIStandard.MServiceDescription> End_GetRegisteredServices(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAvailableMMUs(AsyncCallback callback, object state, string sessionID);
      Dictionary<MMIStandard.MMUDescription, List<MMIStandard.MIPAddress>> End_GetAvailableMMUs(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RegisterAdapter(AsyncCallback callback, object state, MAdapterDescription adapterDescription);
      MMIStandard.MBoolResponse End_RegisterAdapter(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_UnregisterAdapter(AsyncCallback callback, object state, MAdapterDescription adapterDescription);
      MMIStandard.MBoolResponse End_UnregisterAdapter(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RegisterService(AsyncCallback callback, object state, MMIStandard.MServiceDescription serviceDescription);
      MMIStandard.MBoolResponse End_RegisterService(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_UnregisterService(AsyncCallback callback, object state, MMIStandard.MServiceDescription serviceDescription);
      MMIStandard.MBoolResponse End_UnregisterService(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_CreateSessionID(AsyncCallback callback, object state, Dictionary<string, string> properties);
      string End_CreateSessionID(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetRegisteredAdapters(AsyncCallback callback, object state, string sessionID)
      {
        return send_GetRegisteredAdapters(callback, state, sessionID);
      }

      public List<MAdapterDescription> End_GetRegisteredAdapters(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRegisteredAdapters();
      }

      #endif

      public List<MAdapterDescription> GetRegisteredAdapters(string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetRegisteredAdapters(null, null, sessionID);
        return End_GetRegisteredAdapters(asyncResult);

        #else
        send_GetRegisteredAdapters(sessionID);
        return recv_GetRegisteredAdapters();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRegisteredAdapters(AsyncCallback callback, object state, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetRegisteredAdapters", TMessageType.Call, seqid_));
        GetRegisteredAdapters_args args = new GetRegisteredAdapters_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetRegisteredAdapters(string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetRegisteredAdapters", TMessageType.Call, seqid_));
        GetRegisteredAdapters_args args = new GetRegisteredAdapters_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MAdapterDescription> recv_GetRegisteredAdapters()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRegisteredAdapters_result result = new GetRegisteredAdapters_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRegisteredAdapters failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetRegisteredServices(AsyncCallback callback, object state, string sessionID)
      {
        return send_GetRegisteredServices(callback, state, sessionID);
      }

      public List<MMIStandard.MServiceDescription> End_GetRegisteredServices(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRegisteredServices();
      }

      #endif

      public List<MMIStandard.MServiceDescription> GetRegisteredServices(string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetRegisteredServices(null, null, sessionID);
        return End_GetRegisteredServices(asyncResult);

        #else
        send_GetRegisteredServices(sessionID);
        return recv_GetRegisteredServices();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRegisteredServices(AsyncCallback callback, object state, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetRegisteredServices", TMessageType.Call, seqid_));
        GetRegisteredServices_args args = new GetRegisteredServices_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetRegisteredServices(string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetRegisteredServices", TMessageType.Call, seqid_));
        GetRegisteredServices_args args = new GetRegisteredServices_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MServiceDescription> recv_GetRegisteredServices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRegisteredServices_result result = new GetRegisteredServices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRegisteredServices failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAvailableMMUs(AsyncCallback callback, object state, string sessionID)
      {
        return send_GetAvailableMMUs(callback, state, sessionID);
      }

      public Dictionary<MMIStandard.MMUDescription, List<MMIStandard.MIPAddress>> End_GetAvailableMMUs(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAvailableMMUs();
      }

      #endif

      public Dictionary<MMIStandard.MMUDescription, List<MMIStandard.MIPAddress>> GetAvailableMMUs(string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAvailableMMUs(null, null, sessionID);
        return End_GetAvailableMMUs(asyncResult);

        #else
        send_GetAvailableMMUs(sessionID);
        return recv_GetAvailableMMUs();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAvailableMMUs(AsyncCallback callback, object state, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvailableMMUs", TMessageType.Call, seqid_));
        GetAvailableMMUs_args args = new GetAvailableMMUs_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAvailableMMUs(string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvailableMMUs", TMessageType.Call, seqid_));
        GetAvailableMMUs_args args = new GetAvailableMMUs_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Dictionary<MMIStandard.MMUDescription, List<MMIStandard.MIPAddress>> recv_GetAvailableMMUs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAvailableMMUs_result result = new GetAvailableMMUs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAvailableMMUs failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_RegisterAdapter(AsyncCallback callback, object state, MAdapterDescription adapterDescription)
      {
        return send_RegisterAdapter(callback, state, adapterDescription);
      }

      public MMIStandard.MBoolResponse End_RegisterAdapter(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RegisterAdapter();
      }

      #endif

      public MMIStandard.MBoolResponse RegisterAdapter(MAdapterDescription adapterDescription)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_RegisterAdapter(null, null, adapterDescription);
        return End_RegisterAdapter(asyncResult);

        #else
        send_RegisterAdapter(adapterDescription);
        return recv_RegisterAdapter();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RegisterAdapter(AsyncCallback callback, object state, MAdapterDescription adapterDescription)
      {
        oprot_.WriteMessageBegin(new TMessage("RegisterAdapter", TMessageType.Call, seqid_));
        RegisterAdapter_args args = new RegisterAdapter_args();
        args.AdapterDescription = adapterDescription;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_RegisterAdapter(MAdapterDescription adapterDescription)
      {
        oprot_.WriteMessageBegin(new TMessage("RegisterAdapter", TMessageType.Call, seqid_));
        RegisterAdapter_args args = new RegisterAdapter_args();
        args.AdapterDescription = adapterDescription;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_RegisterAdapter()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RegisterAdapter_result result = new RegisterAdapter_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterAdapter failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_UnregisterAdapter(AsyncCallback callback, object state, MAdapterDescription adapterDescription)
      {
        return send_UnregisterAdapter(callback, state, adapterDescription);
      }

      public MMIStandard.MBoolResponse End_UnregisterAdapter(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UnregisterAdapter();
      }

      #endif

      public MMIStandard.MBoolResponse UnregisterAdapter(MAdapterDescription adapterDescription)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_UnregisterAdapter(null, null, adapterDescription);
        return End_UnregisterAdapter(asyncResult);

        #else
        send_UnregisterAdapter(adapterDescription);
        return recv_UnregisterAdapter();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UnregisterAdapter(AsyncCallback callback, object state, MAdapterDescription adapterDescription)
      {
        oprot_.WriteMessageBegin(new TMessage("UnregisterAdapter", TMessageType.Call, seqid_));
        UnregisterAdapter_args args = new UnregisterAdapter_args();
        args.AdapterDescription = adapterDescription;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_UnregisterAdapter(MAdapterDescription adapterDescription)
      {
        oprot_.WriteMessageBegin(new TMessage("UnregisterAdapter", TMessageType.Call, seqid_));
        UnregisterAdapter_args args = new UnregisterAdapter_args();
        args.AdapterDescription = adapterDescription;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_UnregisterAdapter()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UnregisterAdapter_result result = new UnregisterAdapter_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UnregisterAdapter failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_RegisterService(AsyncCallback callback, object state, MMIStandard.MServiceDescription serviceDescription)
      {
        return send_RegisterService(callback, state, serviceDescription);
      }

      public MMIStandard.MBoolResponse End_RegisterService(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RegisterService();
      }

      #endif

      public MMIStandard.MBoolResponse RegisterService(MMIStandard.MServiceDescription serviceDescription)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_RegisterService(null, null, serviceDescription);
        return End_RegisterService(asyncResult);

        #else
        send_RegisterService(serviceDescription);
        return recv_RegisterService();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RegisterService(AsyncCallback callback, object state, MMIStandard.MServiceDescription serviceDescription)
      {
        oprot_.WriteMessageBegin(new TMessage("RegisterService", TMessageType.Call, seqid_));
        RegisterService_args args = new RegisterService_args();
        args.ServiceDescription = serviceDescription;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_RegisterService(MMIStandard.MServiceDescription serviceDescription)
      {
        oprot_.WriteMessageBegin(new TMessage("RegisterService", TMessageType.Call, seqid_));
        RegisterService_args args = new RegisterService_args();
        args.ServiceDescription = serviceDescription;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_RegisterService()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RegisterService_result result = new RegisterService_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterService failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_UnregisterService(AsyncCallback callback, object state, MMIStandard.MServiceDescription serviceDescription)
      {
        return send_UnregisterService(callback, state, serviceDescription);
      }

      public MMIStandard.MBoolResponse End_UnregisterService(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UnregisterService();
      }

      #endif

      public MMIStandard.MBoolResponse UnregisterService(MMIStandard.MServiceDescription serviceDescription)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_UnregisterService(null, null, serviceDescription);
        return End_UnregisterService(asyncResult);

        #else
        send_UnregisterService(serviceDescription);
        return recv_UnregisterService();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UnregisterService(AsyncCallback callback, object state, MMIStandard.MServiceDescription serviceDescription)
      {
        oprot_.WriteMessageBegin(new TMessage("UnregisterService", TMessageType.Call, seqid_));
        UnregisterService_args args = new UnregisterService_args();
        args.ServiceDescription = serviceDescription;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_UnregisterService(MMIStandard.MServiceDescription serviceDescription)
      {
        oprot_.WriteMessageBegin(new TMessage("UnregisterService", TMessageType.Call, seqid_));
        UnregisterService_args args = new UnregisterService_args();
        args.ServiceDescription = serviceDescription;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_UnregisterService()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UnregisterService_result result = new UnregisterService_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UnregisterService failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_CreateSessionID(AsyncCallback callback, object state, Dictionary<string, string> properties)
      {
        return send_CreateSessionID(callback, state, properties);
      }

      public string End_CreateSessionID(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CreateSessionID();
      }

      #endif

      public string CreateSessionID(Dictionary<string, string> properties)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_CreateSessionID(null, null, properties);
        return End_CreateSessionID(asyncResult);

        #else
        send_CreateSessionID(properties);
        return recv_CreateSessionID();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateSessionID(AsyncCallback callback, object state, Dictionary<string, string> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateSessionID", TMessageType.Call, seqid_));
        CreateSessionID_args args = new CreateSessionID_args();
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_CreateSessionID(Dictionary<string, string> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateSessionID", TMessageType.Call, seqid_));
        CreateSessionID_args args = new CreateSessionID_args();
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public string recv_CreateSessionID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateSessionID_result result = new CreateSessionID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateSessionID failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["GetRegisteredAdapters"] = GetRegisteredAdapters_Process;
        processMap_["GetRegisteredServices"] = GetRegisteredServices_Process;
        processMap_["GetAvailableMMUs"] = GetAvailableMMUs_Process;
        processMap_["RegisterAdapter"] = RegisterAdapter_Process;
        processMap_["UnregisterAdapter"] = UnregisterAdapter_Process;
        processMap_["RegisterService"] = RegisterService_Process;
        processMap_["UnregisterService"] = UnregisterService_Process;
        processMap_["CreateSessionID"] = CreateSessionID_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetRegisteredAdapters_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRegisteredAdapters_args args = new GetRegisteredAdapters_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRegisteredAdapters_result result = new GetRegisteredAdapters_result();
        try
        {
          result.Success = iface_.GetRegisteredAdapters(args.SessionID);
          oprot.WriteMessageBegin(new TMessage("GetRegisteredAdapters", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetRegisteredAdapters", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRegisteredServices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRegisteredServices_args args = new GetRegisteredServices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRegisteredServices_result result = new GetRegisteredServices_result();
        try
        {
          result.Success = iface_.GetRegisteredServices(args.SessionID);
          oprot.WriteMessageBegin(new TMessage("GetRegisteredServices", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetRegisteredServices", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAvailableMMUs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAvailableMMUs_args args = new GetAvailableMMUs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAvailableMMUs_result result = new GetAvailableMMUs_result();
        try
        {
          result.Success = iface_.GetAvailableMMUs(args.SessionID);
          oprot.WriteMessageBegin(new TMessage("GetAvailableMMUs", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAvailableMMUs", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RegisterAdapter_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RegisterAdapter_args args = new RegisterAdapter_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RegisterAdapter_result result = new RegisterAdapter_result();
        try
        {
          result.Success = iface_.RegisterAdapter(args.AdapterDescription);
          oprot.WriteMessageBegin(new TMessage("RegisterAdapter", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RegisterAdapter", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UnregisterAdapter_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UnregisterAdapter_args args = new UnregisterAdapter_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UnregisterAdapter_result result = new UnregisterAdapter_result();
        try
        {
          result.Success = iface_.UnregisterAdapter(args.AdapterDescription);
          oprot.WriteMessageBegin(new TMessage("UnregisterAdapter", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("UnregisterAdapter", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RegisterService_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RegisterService_args args = new RegisterService_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RegisterService_result result = new RegisterService_result();
        try
        {
          result.Success = iface_.RegisterService(args.ServiceDescription);
          oprot.WriteMessageBegin(new TMessage("RegisterService", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RegisterService", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UnregisterService_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UnregisterService_args args = new UnregisterService_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UnregisterService_result result = new UnregisterService_result();
        try
        {
          result.Success = iface_.UnregisterService(args.ServiceDescription);
          oprot.WriteMessageBegin(new TMessage("UnregisterService", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("UnregisterService", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateSessionID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateSessionID_args args = new CreateSessionID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateSessionID_result result = new CreateSessionID_result();
        try
        {
          result.Success = iface_.CreateSessionID(args.Properties);
          oprot.WriteMessageBegin(new TMessage("CreateSessionID", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CreateSessionID", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRegisteredAdapters_args : TBase
    {
      private string _sessionID;

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionID;
      }

      public GetRegisteredAdapters_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetRegisteredAdapters_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetRegisteredAdapters_args(");
        bool __first = true;
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRegisteredAdapters_result : TBase
    {
      private List<MAdapterDescription> _success;

      public List<MAdapterDescription> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRegisteredAdapters_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MAdapterDescription>();
                    TList _list58 = iprot.ReadListBegin();
                    for( int _i59 = 0; _i59 < _list58.Count; ++_i59)
                    {
                      MAdapterDescription _elem60;
                      _elem60 = new MAdapterDescription();
                      _elem60.Read(iprot);
                      Success.Add(_elem60);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetRegisteredAdapters_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MAdapterDescription _iter61 in Success)
                {
                  _iter61.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetRegisteredAdapters_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRegisteredServices_args : TBase
    {
      private string _sessionID;

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionID;
      }

      public GetRegisteredServices_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetRegisteredServices_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetRegisteredServices_args(");
        bool __first = true;
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRegisteredServices_result : TBase
    {
      private List<MMIStandard.MServiceDescription> _success;

      public List<MMIStandard.MServiceDescription> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetRegisteredServices_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MServiceDescription>();
                    TList _list62 = iprot.ReadListBegin();
                    for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                    {
                      MMIStandard.MServiceDescription _elem64;
                      _elem64 = new MMIStandard.MServiceDescription();
                      _elem64.Read(iprot);
                      Success.Add(_elem64);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetRegisteredServices_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MServiceDescription _iter65 in Success)
                {
                  _iter65.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetRegisteredServices_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvailableMMUs_args : TBase
    {
      private string _sessionID;

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionID;
      }

      public GetAvailableMMUs_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvailableMMUs_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvailableMMUs_args(");
        bool __first = true;
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvailableMMUs_result : TBase
    {
      private Dictionary<MMIStandard.MMUDescription, List<MMIStandard.MIPAddress>> _success;

      public Dictionary<MMIStandard.MMUDescription, List<MMIStandard.MIPAddress>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAvailableMMUs_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map) {
                  {
                    Success = new Dictionary<MMIStandard.MMUDescription, List<MMIStandard.MIPAddress>>();
                    TMap _map66 = iprot.ReadMapBegin();
                    for( int _i67 = 0; _i67 < _map66.Count; ++_i67)
                    {
                      MMIStandard.MMUDescription _key68;
                      List<MMIStandard.MIPAddress> _val69;
                      _key68 = new MMIStandard.MMUDescription();
                      _key68.Read(iprot);
                      {
                        _val69 = new List<MMIStandard.MIPAddress>();
                        TList _list70 = iprot.ReadListBegin();
                        for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
                        {
                          MMIStandard.MIPAddress _elem72;
                          _elem72 = new MMIStandard.MIPAddress();
                          _elem72.Read(iprot);
                          _val69.Add(_elem72);
                        }
                        iprot.ReadListEnd();
                      }
                      Success[_key68] = _val69;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvailableMMUs_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteMapBegin(new TMap(TType.Struct, TType.List, Success.Count));
                foreach (MMIStandard.MMUDescription _iter73 in Success.Keys)
                {
                  _iter73.Write(oprot);
                  {
                    oprot.WriteListBegin(new TList(TType.Struct, Success[_iter73].Count));
                    foreach (MMIStandard.MIPAddress _iter74 in Success[_iter73])
                    {
                      _iter74.Write(oprot);
                    }
                    oprot.WriteListEnd();
                  }
                }
                oprot.WriteMapEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvailableMMUs_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterAdapter_args : TBase
    {
      private MAdapterDescription _adapterDescription;

      public MAdapterDescription AdapterDescription
      {
        get
        {
          return _adapterDescription;
        }
        set
        {
          __isset.adapterDescription = true;
          this._adapterDescription = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool adapterDescription;
      }

      public RegisterAdapter_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  AdapterDescription = new MAdapterDescription();
                  AdapterDescription.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RegisterAdapter_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AdapterDescription != null && __isset.adapterDescription) {
            field.Name = "adapterDescription";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            AdapterDescription.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RegisterAdapter_args(");
        bool __first = true;
        if (AdapterDescription != null && __isset.adapterDescription) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AdapterDescription: ");
          __sb.Append(AdapterDescription== null ? "<null>" : AdapterDescription.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterAdapter_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RegisterAdapter_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RegisterAdapter_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RegisterAdapter_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnregisterAdapter_args : TBase
    {
      private MAdapterDescription _adapterDescription;

      public MAdapterDescription AdapterDescription
      {
        get
        {
          return _adapterDescription;
        }
        set
        {
          __isset.adapterDescription = true;
          this._adapterDescription = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool adapterDescription;
      }

      public UnregisterAdapter_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  AdapterDescription = new MAdapterDescription();
                  AdapterDescription.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UnregisterAdapter_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AdapterDescription != null && __isset.adapterDescription) {
            field.Name = "adapterDescription";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            AdapterDescription.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UnregisterAdapter_args(");
        bool __first = true;
        if (AdapterDescription != null && __isset.adapterDescription) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AdapterDescription: ");
          __sb.Append(AdapterDescription== null ? "<null>" : AdapterDescription.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnregisterAdapter_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UnregisterAdapter_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UnregisterAdapter_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UnregisterAdapter_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterService_args : TBase
    {
      private MMIStandard.MServiceDescription _serviceDescription;

      public MMIStandard.MServiceDescription ServiceDescription
      {
        get
        {
          return _serviceDescription;
        }
        set
        {
          __isset.serviceDescription = true;
          this._serviceDescription = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool serviceDescription;
      }

      public RegisterService_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  ServiceDescription = new MMIStandard.MServiceDescription();
                  ServiceDescription.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RegisterService_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ServiceDescription != null && __isset.serviceDescription) {
            field.Name = "serviceDescription";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ServiceDescription.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RegisterService_args(");
        bool __first = true;
        if (ServiceDescription != null && __isset.serviceDescription) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ServiceDescription: ");
          __sb.Append(ServiceDescription== null ? "<null>" : ServiceDescription.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RegisterService_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RegisterService_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RegisterService_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RegisterService_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnregisterService_args : TBase
    {
      private MMIStandard.MServiceDescription _serviceDescription;

      public MMIStandard.MServiceDescription ServiceDescription
      {
        get
        {
          return _serviceDescription;
        }
        set
        {
          __isset.serviceDescription = true;
          this._serviceDescription = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool serviceDescription;
      }

      public UnregisterService_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  ServiceDescription = new MMIStandard.MServiceDescription();
                  ServiceDescription.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UnregisterService_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ServiceDescription != null && __isset.serviceDescription) {
            field.Name = "serviceDescription";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            ServiceDescription.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UnregisterService_args(");
        bool __first = true;
        if (ServiceDescription != null && __isset.serviceDescription) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ServiceDescription: ");
          __sb.Append(ServiceDescription== null ? "<null>" : ServiceDescription.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UnregisterService_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public UnregisterService_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UnregisterService_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UnregisterService_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateSessionID_args : TBase
    {
      private Dictionary<string, string> _properties;

      public Dictionary<string, string> Properties
      {
        get
        {
          return _properties;
        }
        set
        {
          __isset.properties = true;
          this._properties = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool properties;
      }

      public CreateSessionID_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    Properties = new Dictionary<string, string>();
                    TMap _map75 = iprot.ReadMapBegin();
                    for( int _i76 = 0; _i76 < _map75.Count; ++_i76)
                    {
                      string _key77;
                      string _val78;
                      _key77 = iprot.ReadString();
                      _val78 = iprot.ReadString();
                      Properties[_key77] = _val78;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateSessionID_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Properties != null && __isset.properties) {
            field.Name = "properties";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
              foreach (string _iter79 in Properties.Keys)
              {
                oprot.WriteString(_iter79);
                oprot.WriteString(Properties[_iter79]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateSessionID_args(");
        bool __first = true;
        if (Properties != null && __isset.properties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Properties: ");
          __sb.Append(Properties);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateSessionID_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CreateSessionID_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateSessionID_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateSessionID_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
