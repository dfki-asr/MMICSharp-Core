/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MInstruction : TBase
  {
    private Dictionary<string, string> _Properties;
    private List<MMIStandard.MConstraint> _Constraints;
    private string _StartCondition;
    private string _EndCondition;
    private string _Action;
    private List<MInstruction> _Instructions;

    public string ID { get; set; }

    public string Name { get; set; }

    public string MotionType { get; set; }

    public Dictionary<string, string> Properties
    {
      get
      {
        return _Properties;
      }
      set
      {
        __isset.Properties = true;
        this._Properties = value;
      }
    }

    public List<MMIStandard.MConstraint> Constraints
    {
      get
      {
        return _Constraints;
      }
      set
      {
        __isset.Constraints = true;
        this._Constraints = value;
      }
    }

    public string StartCondition
    {
      get
      {
        return _StartCondition;
      }
      set
      {
        __isset.StartCondition = true;
        this._StartCondition = value;
      }
    }

    public string EndCondition
    {
      get
      {
        return _EndCondition;
      }
      set
      {
        __isset.EndCondition = true;
        this._EndCondition = value;
      }
    }

    public string Action
    {
      get
      {
        return _Action;
      }
      set
      {
        __isset.Action = true;
        this._Action = value;
      }
    }

    public List<MInstruction> Instructions
    {
      get
      {
        return _Instructions;
      }
      set
      {
        __isset.Instructions = true;
        this._Instructions = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Properties;
      public bool Constraints;
      public bool StartCondition;
      public bool EndCondition;
      public bool Action;
      public bool Instructions;
    }

    public MInstruction() {
    }

    public MInstruction(string ID, string Name, string MotionType) : this() {
      this.ID = ID;
      this.Name = Name;
      this.MotionType = MotionType;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_ID = false;
        bool isset_Name = false;
        bool isset_MotionType = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
                isset_ID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
                isset_Name = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MotionType = iprot.ReadString();
                isset_MotionType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Map) {
                {
                  Properties = new Dictionary<string, string>();
                  TMap _map66 = iprot.ReadMapBegin();
                  for( int _i67 = 0; _i67 < _map66.Count; ++_i67)
                  {
                    string _key68;
                    string _val69;
                    _key68 = iprot.ReadString();
                    _val69 = iprot.ReadString();
                    Properties[_key68] = _val69;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Constraints = new List<MMIStandard.MConstraint>();
                  TList _list70 = iprot.ReadListBegin();
                  for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
                  {
                    MMIStandard.MConstraint _elem72;
                    _elem72 = new MMIStandard.MConstraint();
                    _elem72.Read(iprot);
                    Constraints.Add(_elem72);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                StartCondition = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                EndCondition = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Action = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Instructions = new List<MInstruction>();
                  TList _list73 = iprot.ReadListBegin();
                  for( int _i74 = 0; _i74 < _list73.Count; ++_i74)
                  {
                    MInstruction _elem75;
                    _elem75 = new MInstruction();
                    _elem75.Read(iprot);
                    Instructions.Add(_elem75);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_ID)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ID not set");
        if (!isset_Name)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        if (!isset_MotionType)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MotionType not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MInstruction");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ID not set");
        field.Name = "ID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ID);
        oprot.WriteFieldEnd();
        if (Name == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        field.Name = "Name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
        if (MotionType == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MotionType not set");
        field.Name = "MotionType";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MotionType);
        oprot.WriteFieldEnd();
        if (Properties != null && __isset.Properties) {
          field.Name = "Properties";
          field.Type = TType.Map;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
            foreach (string _iter76 in Properties.Keys)
            {
              oprot.WriteString(_iter76);
              oprot.WriteString(Properties[_iter76]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Constraints != null && __isset.Constraints) {
          field.Name = "Constraints";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Constraints.Count));
            foreach (MMIStandard.MConstraint _iter77 in Constraints)
            {
              _iter77.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (StartCondition != null && __isset.StartCondition) {
          field.Name = "StartCondition";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(StartCondition);
          oprot.WriteFieldEnd();
        }
        if (EndCondition != null && __isset.EndCondition) {
          field.Name = "EndCondition";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EndCondition);
          oprot.WriteFieldEnd();
        }
        if (Action != null && __isset.Action) {
          field.Name = "Action";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Action);
          oprot.WriteFieldEnd();
        }
        if (Instructions != null && __isset.Instructions) {
          field.Name = "Instructions";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Instructions.Count));
            foreach (MInstruction _iter78 in Instructions)
            {
              _iter78.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MInstruction(");
      __sb.Append(", ID: ");
      __sb.Append(ID);
      __sb.Append(", Name: ");
      __sb.Append(Name);
      __sb.Append(", MotionType: ");
      __sb.Append(MotionType);
      if (Properties != null && __isset.Properties) {
        __sb.Append(", Properties: ");
        __sb.Append(Properties);
      }
      if (Constraints != null && __isset.Constraints) {
        __sb.Append(", Constraints: ");
        __sb.Append(Constraints);
      }
      if (StartCondition != null && __isset.StartCondition) {
        __sb.Append(", StartCondition: ");
        __sb.Append(StartCondition);
      }
      if (EndCondition != null && __isset.EndCondition) {
        __sb.Append(", EndCondition: ");
        __sb.Append(EndCondition);
      }
      if (Action != null && __isset.Action) {
        __sb.Append(", Action: ");
        __sb.Append(Action);
      }
      if (Instructions != null && __isset.Instructions) {
        __sb.Append(", Instructions: ");
        __sb.Append(Instructions);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
