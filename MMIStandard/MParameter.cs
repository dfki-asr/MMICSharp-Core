/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MParameter : TBase
  {

    public string Name { get; set; }

    public string Type { get; set; }

    public string Description { get; set; }

    public bool Required { get; set; }

    public MParameter() {
    }

    public MParameter(string Name, string Type, string Description, bool Required) : this() {
      this.Name = Name;
      this.Type = Type;
      this.Description = Description;
      this.Required = Required;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Name = false;
        bool isset_Type = false;
        bool isset_Description = false;
        bool isset_Required = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
                isset_Name = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Type = iprot.ReadString();
                isset_Type = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
                isset_Description = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Required = iprot.ReadBool();
                isset_Required = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Name)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        if (!isset_Type)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Type not set");
        if (!isset_Description)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Description not set");
        if (!isset_Required)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Required not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MParameter");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        field.Name = "Name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
        if (Type == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Type not set");
        field.Name = "Type";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Type);
        oprot.WriteFieldEnd();
        if (Description == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Description not set");
        field.Name = "Description";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
        field.Name = "Required";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Required);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MParameter(");
      __sb.Append(", Name: ");
      __sb.Append(Name);
      __sb.Append(", Type: ");
      __sb.Append(Type);
      __sb.Append(", Description: ");
      __sb.Append(Description);
      __sb.Append(", Required: ");
      __sb.Append(Required);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
