/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MInverseKinematicsService {
    public interface ISync : MMIServiceBase.ISync {
      MMIStandard.MAvatarPostureValues ComputeIK(MMIStandard.MAvatarPostureValues postureValues, List<MIKProperty> properties);
      MIKServiceResult CalculateIKPosture(MMIStandard.MAvatarPostureValues postureValues, List<MMIStandard.MConstraint> constraints, Dictionary<string, string> properties);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_ComputeIK(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues postureValues, List<MIKProperty> properties);
      MMIStandard.MAvatarPostureValues End_ComputeIK(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_CalculateIKPosture(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues postureValues, List<MMIStandard.MConstraint> constraints, Dictionary<string, string> properties);
      MIKServiceResult End_CalculateIKPosture(IAsyncResult asyncResult);
      #endif
    }

    public class Client : MMIServiceBase.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_ComputeIK(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues postureValues, List<MIKProperty> properties)
      {
        return send_ComputeIK(callback, state, postureValues, properties);
      }

      public MMIStandard.MAvatarPostureValues End_ComputeIK(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ComputeIK();
      }

      #endif

      public MMIStandard.MAvatarPostureValues ComputeIK(MMIStandard.MAvatarPostureValues postureValues, List<MIKProperty> properties)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_ComputeIK(null, null, postureValues, properties);
        return End_ComputeIK(asyncResult);

        #else
        send_ComputeIK(postureValues, properties);
        return recv_ComputeIK();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ComputeIK(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues postureValues, List<MIKProperty> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("ComputeIK", TMessageType.Call, seqid_));
        ComputeIK_args args = new ComputeIK_args();
        args.PostureValues = postureValues;
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_ComputeIK(MMIStandard.MAvatarPostureValues postureValues, List<MIKProperty> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("ComputeIK", TMessageType.Call, seqid_));
        ComputeIK_args args = new ComputeIK_args();
        args.PostureValues = postureValues;
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MAvatarPostureValues recv_ComputeIK()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ComputeIK_result result = new ComputeIK_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ComputeIK failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_CalculateIKPosture(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues postureValues, List<MMIStandard.MConstraint> constraints, Dictionary<string, string> properties)
      {
        return send_CalculateIKPosture(callback, state, postureValues, constraints, properties);
      }

      public MIKServiceResult End_CalculateIKPosture(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CalculateIKPosture();
      }

      #endif

      public MIKServiceResult CalculateIKPosture(MMIStandard.MAvatarPostureValues postureValues, List<MMIStandard.MConstraint> constraints, Dictionary<string, string> properties)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_CalculateIKPosture(null, null, postureValues, constraints, properties);
        return End_CalculateIKPosture(asyncResult);

        #else
        send_CalculateIKPosture(postureValues, constraints, properties);
        return recv_CalculateIKPosture();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CalculateIKPosture(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues postureValues, List<MMIStandard.MConstraint> constraints, Dictionary<string, string> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("CalculateIKPosture", TMessageType.Call, seqid_));
        CalculateIKPosture_args args = new CalculateIKPosture_args();
        args.PostureValues = postureValues;
        args.Constraints = constraints;
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_CalculateIKPosture(MMIStandard.MAvatarPostureValues postureValues, List<MMIStandard.MConstraint> constraints, Dictionary<string, string> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("CalculateIKPosture", TMessageType.Call, seqid_));
        CalculateIKPosture_args args = new CalculateIKPosture_args();
        args.PostureValues = postureValues;
        args.Constraints = constraints;
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MIKServiceResult recv_CalculateIKPosture()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CalculateIKPosture_result result = new CalculateIKPosture_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CalculateIKPosture failed: unknown result");
      }

    }
    public class Processor : MMIServiceBase.Processor, TProcessor {
      public Processor(ISync iface) : base(iface)
      {
        iface_ = iface;
        processMap_["ComputeIK"] = ComputeIK_Process;
        processMap_["CalculateIKPosture"] = CalculateIKPosture_Process;
      }

      private ISync iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void ComputeIK_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ComputeIK_args args = new ComputeIK_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ComputeIK_result result = new ComputeIK_result();
        try
        {
          result.Success = iface_.ComputeIK(args.PostureValues, args.Properties);
          oprot.WriteMessageBegin(new TMessage("ComputeIK", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ComputeIK", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CalculateIKPosture_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CalculateIKPosture_args args = new CalculateIKPosture_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CalculateIKPosture_result result = new CalculateIKPosture_result();
        try
        {
          result.Success = iface_.CalculateIKPosture(args.PostureValues, args.Constraints, args.Properties);
          oprot.WriteMessageBegin(new TMessage("CalculateIKPosture", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CalculateIKPosture", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ComputeIK_args : TBase
    {
      private MMIStandard.MAvatarPostureValues _postureValues;
      private List<MIKProperty> _properties;

      public MMIStandard.MAvatarPostureValues PostureValues
      {
        get
        {
          return _postureValues;
        }
        set
        {
          __isset.postureValues = true;
          this._postureValues = value;
        }
      }

      public List<MIKProperty> Properties
      {
        get
        {
          return _properties;
        }
        set
        {
          __isset.properties = true;
          this._properties = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool postureValues;
        public bool properties;
      }

      public ComputeIK_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  PostureValues = new MMIStandard.MAvatarPostureValues();
                  PostureValues.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Properties = new List<MIKProperty>();
                    TList _list90 = iprot.ReadListBegin();
                    for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                    {
                      MIKProperty _elem92;
                      _elem92 = new MIKProperty();
                      _elem92.Read(iprot);
                      Properties.Add(_elem92);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ComputeIK_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PostureValues != null && __isset.postureValues) {
            field.Name = "postureValues";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            PostureValues.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Properties != null && __isset.properties) {
            field.Name = "properties";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Properties.Count));
              foreach (MIKProperty _iter93 in Properties)
              {
                _iter93.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ComputeIK_args(");
        bool __first = true;
        if (PostureValues != null && __isset.postureValues) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PostureValues: ");
          __sb.Append(PostureValues== null ? "<null>" : PostureValues.ToString());
        }
        if (Properties != null && __isset.properties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Properties: ");
          __sb.Append(Properties);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ComputeIK_result : TBase
    {
      private MMIStandard.MAvatarPostureValues _success;

      public MMIStandard.MAvatarPostureValues Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ComputeIK_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MAvatarPostureValues();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ComputeIK_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ComputeIK_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CalculateIKPosture_args : TBase
    {
      private MMIStandard.MAvatarPostureValues _postureValues;
      private List<MMIStandard.MConstraint> _constraints;
      private Dictionary<string, string> _properties;

      public MMIStandard.MAvatarPostureValues PostureValues
      {
        get
        {
          return _postureValues;
        }
        set
        {
          __isset.postureValues = true;
          this._postureValues = value;
        }
      }

      public List<MMIStandard.MConstraint> Constraints
      {
        get
        {
          return _constraints;
        }
        set
        {
          __isset.constraints = true;
          this._constraints = value;
        }
      }

      public Dictionary<string, string> Properties
      {
        get
        {
          return _properties;
        }
        set
        {
          __isset.properties = true;
          this._properties = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool postureValues;
        public bool constraints;
        public bool properties;
      }

      public CalculateIKPosture_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  PostureValues = new MMIStandard.MAvatarPostureValues();
                  PostureValues.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Constraints = new List<MMIStandard.MConstraint>();
                    TList _list94 = iprot.ReadListBegin();
                    for( int _i95 = 0; _i95 < _list94.Count; ++_i95)
                    {
                      MMIStandard.MConstraint _elem96;
                      _elem96 = new MMIStandard.MConstraint();
                      _elem96.Read(iprot);
                      Constraints.Add(_elem96);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Map) {
                  {
                    Properties = new Dictionary<string, string>();
                    TMap _map97 = iprot.ReadMapBegin();
                    for( int _i98 = 0; _i98 < _map97.Count; ++_i98)
                    {
                      string _key99;
                      string _val100;
                      _key99 = iprot.ReadString();
                      _val100 = iprot.ReadString();
                      Properties[_key99] = _val100;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CalculateIKPosture_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (PostureValues != null && __isset.postureValues) {
            field.Name = "postureValues";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            PostureValues.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Constraints != null && __isset.constraints) {
            field.Name = "constraints";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Constraints.Count));
              foreach (MMIStandard.MConstraint _iter101 in Constraints)
              {
                _iter101.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Properties != null && __isset.properties) {
            field.Name = "properties";
            field.Type = TType.Map;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
              foreach (string _iter102 in Properties.Keys)
              {
                oprot.WriteString(_iter102);
                oprot.WriteString(Properties[_iter102]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CalculateIKPosture_args(");
        bool __first = true;
        if (PostureValues != null && __isset.postureValues) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PostureValues: ");
          __sb.Append(PostureValues== null ? "<null>" : PostureValues.ToString());
        }
        if (Constraints != null && __isset.constraints) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Constraints: ");
          __sb.Append(Constraints);
        }
        if (Properties != null && __isset.properties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Properties: ");
          __sb.Append(Properties);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CalculateIKPosture_result : TBase
    {
      private MIKServiceResult _success;

      public MIKServiceResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CalculateIKPosture_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MIKServiceResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CalculateIKPosture_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CalculateIKPosture_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
