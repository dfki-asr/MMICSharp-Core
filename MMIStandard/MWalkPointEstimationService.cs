/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MWalkPointEstimationService {
    public interface ISync : MMIServiceBase.ISync {
      List<MWalkPoint> EstimateWalkPoints(List<MMIStandard.MSceneObject> sceneObjects, MMIStandard.MSceneObject target, int amount, Dictionary<string, string> properties);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_EstimateWalkPoints(AsyncCallback callback, object state, List<MMIStandard.MSceneObject> sceneObjects, MMIStandard.MSceneObject target, int amount, Dictionary<string, string> properties);
      List<MWalkPoint> End_EstimateWalkPoints(IAsyncResult asyncResult);
      #endif
    }

    public class Client : MMIServiceBase.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_EstimateWalkPoints(AsyncCallback callback, object state, List<MMIStandard.MSceneObject> sceneObjects, MMIStandard.MSceneObject target, int amount, Dictionary<string, string> properties)
      {
        return send_EstimateWalkPoints(callback, state, sceneObjects, target, amount, properties);
      }

      public List<MWalkPoint> End_EstimateWalkPoints(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_EstimateWalkPoints();
      }

      #endif

      public List<MWalkPoint> EstimateWalkPoints(List<MMIStandard.MSceneObject> sceneObjects, MMIStandard.MSceneObject target, int amount, Dictionary<string, string> properties)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_EstimateWalkPoints(null, null, sceneObjects, target, amount, properties);
        return End_EstimateWalkPoints(asyncResult);

        #else
        send_EstimateWalkPoints(sceneObjects, target, amount, properties);
        return recv_EstimateWalkPoints();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_EstimateWalkPoints(AsyncCallback callback, object state, List<MMIStandard.MSceneObject> sceneObjects, MMIStandard.MSceneObject target, int amount, Dictionary<string, string> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("EstimateWalkPoints", TMessageType.Call, seqid_));
        EstimateWalkPoints_args args = new EstimateWalkPoints_args();
        args.SceneObjects = sceneObjects;
        args.Target = target;
        args.Amount = amount;
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_EstimateWalkPoints(List<MMIStandard.MSceneObject> sceneObjects, MMIStandard.MSceneObject target, int amount, Dictionary<string, string> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("EstimateWalkPoints", TMessageType.Call, seqid_));
        EstimateWalkPoints_args args = new EstimateWalkPoints_args();
        args.SceneObjects = sceneObjects;
        args.Target = target;
        args.Amount = amount;
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MWalkPoint> recv_EstimateWalkPoints()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        EstimateWalkPoints_result result = new EstimateWalkPoints_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "EstimateWalkPoints failed: unknown result");
      }

    }
    public class Processor : MMIServiceBase.Processor, TProcessor {
      public Processor(ISync iface) : base(iface)
      {
        iface_ = iface;
        processMap_["EstimateWalkPoints"] = EstimateWalkPoints_Process;
      }

      private ISync iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void EstimateWalkPoints_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        EstimateWalkPoints_args args = new EstimateWalkPoints_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        EstimateWalkPoints_result result = new EstimateWalkPoints_result();
        try
        {
          result.Success = iface_.EstimateWalkPoints(args.SceneObjects, args.Target, args.Amount, args.Properties);
          oprot.WriteMessageBegin(new TMessage("EstimateWalkPoints", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("EstimateWalkPoints", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EstimateWalkPoints_args : TBase
    {
      private List<MMIStandard.MSceneObject> _sceneObjects;
      private MMIStandard.MSceneObject _target;
      private int _amount;
      private Dictionary<string, string> _properties;

      public List<MMIStandard.MSceneObject> SceneObjects
      {
        get
        {
          return _sceneObjects;
        }
        set
        {
          __isset.sceneObjects = true;
          this._sceneObjects = value;
        }
      }

      public MMIStandard.MSceneObject Target
      {
        get
        {
          return _target;
        }
        set
        {
          __isset.target = true;
          this._target = value;
        }
      }

      public int Amount
      {
        get
        {
          return _amount;
        }
        set
        {
          __isset.amount = true;
          this._amount = value;
        }
      }

      public Dictionary<string, string> Properties
      {
        get
        {
          return _properties;
        }
        set
        {
          __isset.properties = true;
          this._properties = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sceneObjects;
        public bool target;
        public bool amount;
        public bool properties;
      }

      public EstimateWalkPoints_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    SceneObjects = new List<MMIStandard.MSceneObject>();
                    TList _list149 = iprot.ReadListBegin();
                    for( int _i150 = 0; _i150 < _list149.Count; ++_i150)
                    {
                      MMIStandard.MSceneObject _elem151;
                      _elem151 = new MMIStandard.MSceneObject();
                      _elem151.Read(iprot);
                      SceneObjects.Add(_elem151);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Target = new MMIStandard.MSceneObject();
                  Target.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Amount = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Map) {
                  {
                    Properties = new Dictionary<string, string>();
                    TMap _map152 = iprot.ReadMapBegin();
                    for( int _i153 = 0; _i153 < _map152.Count; ++_i153)
                    {
                      string _key154;
                      string _val155;
                      _key154 = iprot.ReadString();
                      _val155 = iprot.ReadString();
                      Properties[_key154] = _val155;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("EstimateWalkPoints_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SceneObjects != null && __isset.sceneObjects) {
            field.Name = "sceneObjects";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, SceneObjects.Count));
              foreach (MMIStandard.MSceneObject _iter156 in SceneObjects)
              {
                _iter156.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (Target != null && __isset.target) {
            field.Name = "target";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Target.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.amount) {
            field.Name = "amount";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Amount);
            oprot.WriteFieldEnd();
          }
          if (Properties != null && __isset.properties) {
            field.Name = "properties";
            field.Type = TType.Map;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
              foreach (string _iter157 in Properties.Keys)
              {
                oprot.WriteString(_iter157);
                oprot.WriteString(Properties[_iter157]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("EstimateWalkPoints_args(");
        bool __first = true;
        if (SceneObjects != null && __isset.sceneObjects) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SceneObjects: ");
          __sb.Append(SceneObjects);
        }
        if (Target != null && __isset.target) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Target: ");
          __sb.Append(Target== null ? "<null>" : Target.ToString());
        }
        if (__isset.amount) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Amount: ");
          __sb.Append(Amount);
        }
        if (Properties != null && __isset.properties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Properties: ");
          __sb.Append(Properties);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class EstimateWalkPoints_result : TBase
    {
      private List<MWalkPoint> _success;

      public List<MWalkPoint> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public EstimateWalkPoints_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MWalkPoint>();
                    TList _list158 = iprot.ReadListBegin();
                    for( int _i159 = 0; _i159 < _list158.Count; ++_i159)
                    {
                      MWalkPoint _elem160;
                      _elem160 = new MWalkPoint();
                      _elem160.Read(iprot);
                      Success.Add(_elem160);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("EstimateWalkPoints_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MWalkPoint _iter161 in Success)
                {
                  _iter161.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("EstimateWalkPoints_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
