/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class MSceneManipulation : TBase
{
  private List<MTransformManipulation> _Transforms;
  private List<MPhysicsInteraction> _PhysicsInteractions;
  private List<MPropertyManipulation> _Properties;
  private List<MAttachmentManipulation> _Attachments;

  public List<MTransformManipulation> Transforms
  {
    get
    {
      return _Transforms;
    }
    set
    {
      __isset.Transforms = true;
      this._Transforms = value;
    }
  }

  public List<MPhysicsInteraction> PhysicsInteractions
  {
    get
    {
      return _PhysicsInteractions;
    }
    set
    {
      __isset.PhysicsInteractions = true;
      this._PhysicsInteractions = value;
    }
  }

  public List<MPropertyManipulation> Properties
  {
    get
    {
      return _Properties;
    }
    set
    {
      __isset.Properties = true;
      this._Properties = value;
    }
  }

  public List<MAttachmentManipulation> Attachments
  {
    get
    {
      return _Attachments;
    }
    set
    {
      __isset.Attachments = true;
      this._Attachments = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool Transforms;
    public bool PhysicsInteractions;
    public bool Properties;
    public bool Attachments;
  }

  public MSceneManipulation() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Transforms = new List<MTransformManipulation>();
                TList _list92 = iprot.ReadListBegin();
                for( int _i93 = 0; _i93 < _list92.Count; ++_i93)
                {
                  MTransformManipulation _elem94;
                  _elem94 = new MTransformManipulation();
                  _elem94.Read(iprot);
                  Transforms.Add(_elem94);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                PhysicsInteractions = new List<MPhysicsInteraction>();
                TList _list95 = iprot.ReadListBegin();
                for( int _i96 = 0; _i96 < _list95.Count; ++_i96)
                {
                  MPhysicsInteraction _elem97;
                  _elem97 = new MPhysicsInteraction();
                  _elem97.Read(iprot);
                  PhysicsInteractions.Add(_elem97);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Properties = new List<MPropertyManipulation>();
                TList _list98 = iprot.ReadListBegin();
                for( int _i99 = 0; _i99 < _list98.Count; ++_i99)
                {
                  MPropertyManipulation _elem100;
                  _elem100 = new MPropertyManipulation();
                  _elem100.Read(iprot);
                  Properties.Add(_elem100);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Attachments = new List<MAttachmentManipulation>();
                TList _list101 = iprot.ReadListBegin();
                for( int _i102 = 0; _i102 < _list101.Count; ++_i102)
                {
                  MAttachmentManipulation _elem103;
                  _elem103 = new MAttachmentManipulation();
                  _elem103.Read(iprot);
                  Attachments.Add(_elem103);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("MSceneManipulation");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Transforms != null && __isset.Transforms) {
        field.Name = "Transforms";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Transforms.Count));
          foreach (MTransformManipulation _iter104 in Transforms)
          {
            _iter104.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PhysicsInteractions != null && __isset.PhysicsInteractions) {
        field.Name = "PhysicsInteractions";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PhysicsInteractions.Count));
          foreach (MPhysicsInteraction _iter105 in PhysicsInteractions)
          {
            _iter105.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Properties != null && __isset.Properties) {
        field.Name = "Properties";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Properties.Count));
          foreach (MPropertyManipulation _iter106 in Properties)
          {
            _iter106.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Attachments != null && __isset.Attachments) {
        field.Name = "Attachments";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Attachments.Count));
          foreach (MAttachmentManipulation _iter107 in Attachments)
          {
            _iter107.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("MSceneManipulation(");
    bool __first = true;
    if (Transforms != null && __isset.Transforms) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Transforms: ");
      __sb.Append(Transforms);
    }
    if (PhysicsInteractions != null && __isset.PhysicsInteractions) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PhysicsInteractions: ");
      __sb.Append(PhysicsInteractions);
    }
    if (Properties != null && __isset.Properties) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Properties: ");
      __sb.Append(Properties);
    }
    if (Attachments != null && __isset.Attachments) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Attachments: ");
      __sb.Append(Attachments);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

