/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MSceneManipulation : TBase
  {
    private List<MTransformManipulation> _Transforms;
    private List<MPhysicsInteraction> _PhysicsInteractions;
    private List<MPropertyManipulation> _Properties;
    private List<MAttachmentManipulation> _Attachments;

    public List<MTransformManipulation> Transforms
    {
      get
      {
        return _Transforms;
      }
      set
      {
        __isset.Transforms = true;
        this._Transforms = value;
      }
    }

    public List<MPhysicsInteraction> PhysicsInteractions
    {
      get
      {
        return _PhysicsInteractions;
      }
      set
      {
        __isset.PhysicsInteractions = true;
        this._PhysicsInteractions = value;
      }
    }

    public List<MPropertyManipulation> Properties
    {
      get
      {
        return _Properties;
      }
      set
      {
        __isset.Properties = true;
        this._Properties = value;
      }
    }

    public List<MAttachmentManipulation> Attachments
    {
      get
      {
        return _Attachments;
      }
      set
      {
        __isset.Attachments = true;
        this._Attachments = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Transforms;
      public bool PhysicsInteractions;
      public bool Properties;
      public bool Attachments;
    }

    public MSceneManipulation() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Transforms = new List<MTransformManipulation>();
                  TList _list88 = iprot.ReadListBegin();
                  for( int _i89 = 0; _i89 < _list88.Count; ++_i89)
                  {
                    MTransformManipulation _elem90;
                    _elem90 = new MTransformManipulation();
                    _elem90.Read(iprot);
                    Transforms.Add(_elem90);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  PhysicsInteractions = new List<MPhysicsInteraction>();
                  TList _list91 = iprot.ReadListBegin();
                  for( int _i92 = 0; _i92 < _list91.Count; ++_i92)
                  {
                    MPhysicsInteraction _elem93;
                    _elem93 = new MPhysicsInteraction();
                    _elem93.Read(iprot);
                    PhysicsInteractions.Add(_elem93);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Properties = new List<MPropertyManipulation>();
                  TList _list94 = iprot.ReadListBegin();
                  for( int _i95 = 0; _i95 < _list94.Count; ++_i95)
                  {
                    MPropertyManipulation _elem96;
                    _elem96 = new MPropertyManipulation();
                    _elem96.Read(iprot);
                    Properties.Add(_elem96);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Attachments = new List<MAttachmentManipulation>();
                  TList _list97 = iprot.ReadListBegin();
                  for( int _i98 = 0; _i98 < _list97.Count; ++_i98)
                  {
                    MAttachmentManipulation _elem99;
                    _elem99 = new MAttachmentManipulation();
                    _elem99.Read(iprot);
                    Attachments.Add(_elem99);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MSceneManipulation");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Transforms != null && __isset.Transforms) {
          field.Name = "Transforms";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Transforms.Count));
            foreach (MTransformManipulation _iter100 in Transforms)
            {
              _iter100.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (PhysicsInteractions != null && __isset.PhysicsInteractions) {
          field.Name = "PhysicsInteractions";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, PhysicsInteractions.Count));
            foreach (MPhysicsInteraction _iter101 in PhysicsInteractions)
            {
              _iter101.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Properties != null && __isset.Properties) {
          field.Name = "Properties";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Properties.Count));
            foreach (MPropertyManipulation _iter102 in Properties)
            {
              _iter102.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Attachments != null && __isset.Attachments) {
          field.Name = "Attachments";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Attachments.Count));
            foreach (MAttachmentManipulation _iter103 in Attachments)
            {
              _iter103.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MSceneManipulation(");
      bool __first = true;
      if (Transforms != null && __isset.Transforms) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Transforms: ");
        __sb.Append(Transforms);
      }
      if (PhysicsInteractions != null && __isset.PhysicsInteractions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PhysicsInteractions: ");
        __sb.Append(PhysicsInteractions);
      }
      if (Properties != null && __isset.Properties) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Properties: ");
        __sb.Append(Properties);
      }
      if (Attachments != null && __isset.Attachments) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Attachments: ");
        __sb.Append(Attachments);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
