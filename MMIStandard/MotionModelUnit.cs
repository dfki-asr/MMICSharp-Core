/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MotionModelUnit {
    public interface ISync {
      MMIStandard.MBoolResponse Initialize(MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties);
      MMIStandard.MBoolResponse AssignInstruction(MInstruction motionInstruction, MSimulationState simulationState);
      MSimulationResult DoStep(double time, MSimulationState simulationState);
      List<MMIStandard.MConstraint> GetBoundaryConstraints(MInstruction instruction);
      MMIStandard.MBoolResponse CheckPrerequisites(MInstruction instruction);
      MMIStandard.MBoolResponse Abort(string instructionId);
      MMIStandard.MBoolResponse Dispose(Dictionary<string, string> parameters);
      byte[] CreateCheckpoint();
      MMIStandard.MBoolResponse RestoreCheckpoint(byte[] data);
      Dictionary<string, string> ExecuteFunction(string name, Dictionary<string, string> parameters);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_Initialize(AsyncCallback callback, object state, MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties);
      MMIStandard.MBoolResponse End_Initialize(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_AssignInstruction(AsyncCallback callback, object state, MInstruction motionInstruction, MSimulationState simulationState);
      MMIStandard.MBoolResponse End_AssignInstruction(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_DoStep(AsyncCallback callback, object state, double time, MSimulationState simulationState);
      MSimulationResult End_DoStep(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetBoundaryConstraints(AsyncCallback callback, object state, MInstruction instruction);
      List<MMIStandard.MConstraint> End_GetBoundaryConstraints(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_CheckPrerequisites(AsyncCallback callback, object state, MInstruction instruction);
      MMIStandard.MBoolResponse End_CheckPrerequisites(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Abort(AsyncCallback callback, object state, string instructionId);
      MMIStandard.MBoolResponse End_Abort(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Dispose(AsyncCallback callback, object state, Dictionary<string, string> parameters);
      MMIStandard.MBoolResponse End_Dispose(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_CreateCheckpoint(AsyncCallback callback, object state);
      byte[] End_CreateCheckpoint(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RestoreCheckpoint(AsyncCallback callback, object state, byte[] data);
      MMIStandard.MBoolResponse End_RestoreCheckpoint(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ExecuteFunction(AsyncCallback callback, object state, string name, Dictionary<string, string> parameters);
      Dictionary<string, string> End_ExecuteFunction(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_Initialize(AsyncCallback callback, object state, MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties)
      {
        return send_Initialize(callback, state, avatarDescription, properties);
      }

      public MMIStandard.MBoolResponse End_Initialize(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Initialize();
      }

      #endif

      public MMIStandard.MBoolResponse Initialize(MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_Initialize(null, null, avatarDescription, properties);
        return End_Initialize(asyncResult);

        #else
        send_Initialize(avatarDescription, properties);
        return recv_Initialize();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Initialize(AsyncCallback callback, object state, MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("Initialize", TMessageType.Call, seqid_));
        Initialize_args args = new Initialize_args();
        args.AvatarDescription = avatarDescription;
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_Initialize(MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties)
      {
        oprot_.WriteMessageBegin(new TMessage("Initialize", TMessageType.Call, seqid_));
        Initialize_args args = new Initialize_args();
        args.AvatarDescription = avatarDescription;
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_Initialize()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Initialize_result result = new Initialize_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Initialize failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_AssignInstruction(AsyncCallback callback, object state, MInstruction motionInstruction, MSimulationState simulationState)
      {
        return send_AssignInstruction(callback, state, motionInstruction, simulationState);
      }

      public MMIStandard.MBoolResponse End_AssignInstruction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AssignInstruction();
      }

      #endif

      public MMIStandard.MBoolResponse AssignInstruction(MInstruction motionInstruction, MSimulationState simulationState)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_AssignInstruction(null, null, motionInstruction, simulationState);
        return End_AssignInstruction(asyncResult);

        #else
        send_AssignInstruction(motionInstruction, simulationState);
        return recv_AssignInstruction();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AssignInstruction(AsyncCallback callback, object state, MInstruction motionInstruction, MSimulationState simulationState)
      {
        oprot_.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Call, seqid_));
        AssignInstruction_args args = new AssignInstruction_args();
        args.MotionInstruction = motionInstruction;
        args.SimulationState = simulationState;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_AssignInstruction(MInstruction motionInstruction, MSimulationState simulationState)
      {
        oprot_.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Call, seqid_));
        AssignInstruction_args args = new AssignInstruction_args();
        args.MotionInstruction = motionInstruction;
        args.SimulationState = simulationState;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_AssignInstruction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AssignInstruction_result result = new AssignInstruction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AssignInstruction failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_DoStep(AsyncCallback callback, object state, double time, MSimulationState simulationState)
      {
        return send_DoStep(callback, state, time, simulationState);
      }

      public MSimulationResult End_DoStep(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DoStep();
      }

      #endif

      public MSimulationResult DoStep(double time, MSimulationState simulationState)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_DoStep(null, null, time, simulationState);
        return End_DoStep(asyncResult);

        #else
        send_DoStep(time, simulationState);
        return recv_DoStep();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DoStep(AsyncCallback callback, object state, double time, MSimulationState simulationState)
      {
        oprot_.WriteMessageBegin(new TMessage("DoStep", TMessageType.Call, seqid_));
        DoStep_args args = new DoStep_args();
        args.Time = time;
        args.SimulationState = simulationState;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_DoStep(double time, MSimulationState simulationState)
      {
        oprot_.WriteMessageBegin(new TMessage("DoStep", TMessageType.Call, seqid_));
        DoStep_args args = new DoStep_args();
        args.Time = time;
        args.SimulationState = simulationState;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MSimulationResult recv_DoStep()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DoStep_result result = new DoStep_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DoStep failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetBoundaryConstraints(AsyncCallback callback, object state, MInstruction instruction)
      {
        return send_GetBoundaryConstraints(callback, state, instruction);
      }

      public List<MMIStandard.MConstraint> End_GetBoundaryConstraints(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetBoundaryConstraints();
      }

      #endif

      public List<MMIStandard.MConstraint> GetBoundaryConstraints(MInstruction instruction)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetBoundaryConstraints(null, null, instruction);
        return End_GetBoundaryConstraints(asyncResult);

        #else
        send_GetBoundaryConstraints(instruction);
        return recv_GetBoundaryConstraints();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetBoundaryConstraints(AsyncCallback callback, object state, MInstruction instruction)
      {
        oprot_.WriteMessageBegin(new TMessage("GetBoundaryConstraints", TMessageType.Call, seqid_));
        GetBoundaryConstraints_args args = new GetBoundaryConstraints_args();
        args.Instruction = instruction;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetBoundaryConstraints(MInstruction instruction)
      {
        oprot_.WriteMessageBegin(new TMessage("GetBoundaryConstraints", TMessageType.Call, seqid_));
        GetBoundaryConstraints_args args = new GetBoundaryConstraints_args();
        args.Instruction = instruction;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MConstraint> recv_GetBoundaryConstraints()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetBoundaryConstraints failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_CheckPrerequisites(AsyncCallback callback, object state, MInstruction instruction)
      {
        return send_CheckPrerequisites(callback, state, instruction);
      }

      public MMIStandard.MBoolResponse End_CheckPrerequisites(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CheckPrerequisites();
      }

      #endif

      public MMIStandard.MBoolResponse CheckPrerequisites(MInstruction instruction)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_CheckPrerequisites(null, null, instruction);
        return End_CheckPrerequisites(asyncResult);

        #else
        send_CheckPrerequisites(instruction);
        return recv_CheckPrerequisites();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CheckPrerequisites(AsyncCallback callback, object state, MInstruction instruction)
      {
        oprot_.WriteMessageBegin(new TMessage("CheckPrerequisites", TMessageType.Call, seqid_));
        CheckPrerequisites_args args = new CheckPrerequisites_args();
        args.Instruction = instruction;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_CheckPrerequisites(MInstruction instruction)
      {
        oprot_.WriteMessageBegin(new TMessage("CheckPrerequisites", TMessageType.Call, seqid_));
        CheckPrerequisites_args args = new CheckPrerequisites_args();
        args.Instruction = instruction;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_CheckPrerequisites()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CheckPrerequisites_result result = new CheckPrerequisites_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CheckPrerequisites failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_Abort(AsyncCallback callback, object state, string instructionId)
      {
        return send_Abort(callback, state, instructionId);
      }

      public MMIStandard.MBoolResponse End_Abort(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Abort();
      }

      #endif

      public MMIStandard.MBoolResponse Abort(string instructionId)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_Abort(null, null, instructionId);
        return End_Abort(asyncResult);

        #else
        send_Abort(instructionId);
        return recv_Abort();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Abort(AsyncCallback callback, object state, string instructionId)
      {
        oprot_.WriteMessageBegin(new TMessage("Abort", TMessageType.Call, seqid_));
        Abort_args args = new Abort_args();
        args.InstructionId = instructionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_Abort(string instructionId)
      {
        oprot_.WriteMessageBegin(new TMessage("Abort", TMessageType.Call, seqid_));
        Abort_args args = new Abort_args();
        args.InstructionId = instructionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_Abort()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Abort_result result = new Abort_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Abort failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_Dispose(AsyncCallback callback, object state, Dictionary<string, string> parameters)
      {
        return send_Dispose(callback, state, parameters);
      }

      public MMIStandard.MBoolResponse End_Dispose(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Dispose();
      }

      #endif

      public MMIStandard.MBoolResponse Dispose(Dictionary<string, string> parameters)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_Dispose(null, null, parameters);
        return End_Dispose(asyncResult);

        #else
        send_Dispose(parameters);
        return recv_Dispose();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Dispose(AsyncCallback callback, object state, Dictionary<string, string> parameters)
      {
        oprot_.WriteMessageBegin(new TMessage("Dispose", TMessageType.Call, seqid_));
        Dispose_args args = new Dispose_args();
        args.Parameters = parameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_Dispose(Dictionary<string, string> parameters)
      {
        oprot_.WriteMessageBegin(new TMessage("Dispose", TMessageType.Call, seqid_));
        Dispose_args args = new Dispose_args();
        args.Parameters = parameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_Dispose()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Dispose_result result = new Dispose_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Dispose failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_CreateCheckpoint(AsyncCallback callback, object state)
      {
        return send_CreateCheckpoint(callback, state);
      }

      public byte[] End_CreateCheckpoint(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CreateCheckpoint();
      }

      #endif

      public byte[] CreateCheckpoint()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_CreateCheckpoint(null, null);
        return End_CreateCheckpoint(asyncResult);

        #else
        send_CreateCheckpoint();
        return recv_CreateCheckpoint();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateCheckpoint(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateCheckpoint", TMessageType.Call, seqid_));
        CreateCheckpoint_args args = new CreateCheckpoint_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_CreateCheckpoint()
      {
        oprot_.WriteMessageBegin(new TMessage("CreateCheckpoint", TMessageType.Call, seqid_));
        CreateCheckpoint_args args = new CreateCheckpoint_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public byte[] recv_CreateCheckpoint()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateCheckpoint_result result = new CreateCheckpoint_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateCheckpoint failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_RestoreCheckpoint(AsyncCallback callback, object state, byte[] data)
      {
        return send_RestoreCheckpoint(callback, state, data);
      }

      public MMIStandard.MBoolResponse End_RestoreCheckpoint(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RestoreCheckpoint();
      }

      #endif

      public MMIStandard.MBoolResponse RestoreCheckpoint(byte[] data)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_RestoreCheckpoint(null, null, data);
        return End_RestoreCheckpoint(asyncResult);

        #else
        send_RestoreCheckpoint(data);
        return recv_RestoreCheckpoint();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RestoreCheckpoint(AsyncCallback callback, object state, byte[] data)
      {
        oprot_.WriteMessageBegin(new TMessage("RestoreCheckpoint", TMessageType.Call, seqid_));
        RestoreCheckpoint_args args = new RestoreCheckpoint_args();
        args.Data = data;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_RestoreCheckpoint(byte[] data)
      {
        oprot_.WriteMessageBegin(new TMessage("RestoreCheckpoint", TMessageType.Call, seqid_));
        RestoreCheckpoint_args args = new RestoreCheckpoint_args();
        args.Data = data;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_RestoreCheckpoint()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RestoreCheckpoint_result result = new RestoreCheckpoint_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RestoreCheckpoint failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_ExecuteFunction(AsyncCallback callback, object state, string name, Dictionary<string, string> parameters)
      {
        return send_ExecuteFunction(callback, state, name, parameters);
      }

      public Dictionary<string, string> End_ExecuteFunction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ExecuteFunction();
      }

      #endif

      public Dictionary<string, string> ExecuteFunction(string name, Dictionary<string, string> parameters)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_ExecuteFunction(null, null, name, parameters);
        return End_ExecuteFunction(asyncResult);

        #else
        send_ExecuteFunction(name, parameters);
        return recv_ExecuteFunction();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ExecuteFunction(AsyncCallback callback, object state, string name, Dictionary<string, string> parameters)
      {
        oprot_.WriteMessageBegin(new TMessage("ExecuteFunction", TMessageType.Call, seqid_));
        ExecuteFunction_args args = new ExecuteFunction_args();
        args.Name = name;
        args.Parameters = parameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_ExecuteFunction(string name, Dictionary<string, string> parameters)
      {
        oprot_.WriteMessageBegin(new TMessage("ExecuteFunction", TMessageType.Call, seqid_));
        ExecuteFunction_args args = new ExecuteFunction_args();
        args.Name = name;
        args.Parameters = parameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Dictionary<string, string> recv_ExecuteFunction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ExecuteFunction_result result = new ExecuteFunction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExecuteFunction failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["Initialize"] = Initialize_Process;
        processMap_["AssignInstruction"] = AssignInstruction_Process;
        processMap_["DoStep"] = DoStep_Process;
        processMap_["GetBoundaryConstraints"] = GetBoundaryConstraints_Process;
        processMap_["CheckPrerequisites"] = CheckPrerequisites_Process;
        processMap_["Abort"] = Abort_Process;
        processMap_["Dispose"] = Dispose_Process;
        processMap_["CreateCheckpoint"] = CreateCheckpoint_Process;
        processMap_["RestoreCheckpoint"] = RestoreCheckpoint_Process;
        processMap_["ExecuteFunction"] = ExecuteFunction_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Initialize_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Initialize_args args = new Initialize_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Initialize_result result = new Initialize_result();
        try
        {
          result.Success = iface_.Initialize(args.AvatarDescription, args.Properties);
          oprot.WriteMessageBegin(new TMessage("Initialize", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Initialize", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AssignInstruction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AssignInstruction_args args = new AssignInstruction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AssignInstruction_result result = new AssignInstruction_result();
        try
        {
          result.Success = iface_.AssignInstruction(args.MotionInstruction, args.SimulationState);
          oprot.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DoStep_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DoStep_args args = new DoStep_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DoStep_result result = new DoStep_result();
        try
        {
          result.Success = iface_.DoStep(args.Time, args.SimulationState);
          oprot.WriteMessageBegin(new TMessage("DoStep", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DoStep", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetBoundaryConstraints_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetBoundaryConstraints_args args = new GetBoundaryConstraints_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
        try
        {
          result.Success = iface_.GetBoundaryConstraints(args.Instruction);
          oprot.WriteMessageBegin(new TMessage("GetBoundaryConstraints", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetBoundaryConstraints", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CheckPrerequisites_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CheckPrerequisites_args args = new CheckPrerequisites_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CheckPrerequisites_result result = new CheckPrerequisites_result();
        try
        {
          result.Success = iface_.CheckPrerequisites(args.Instruction);
          oprot.WriteMessageBegin(new TMessage("CheckPrerequisites", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CheckPrerequisites", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Abort_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Abort_args args = new Abort_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Abort_result result = new Abort_result();
        try
        {
          result.Success = iface_.Abort(args.InstructionId);
          oprot.WriteMessageBegin(new TMessage("Abort", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Abort", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Dispose_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Dispose_args args = new Dispose_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Dispose_result result = new Dispose_result();
        try
        {
          result.Success = iface_.Dispose(args.Parameters);
          oprot.WriteMessageBegin(new TMessage("Dispose", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Dispose", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateCheckpoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateCheckpoint_args args = new CreateCheckpoint_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateCheckpoint_result result = new CreateCheckpoint_result();
        try
        {
          result.Success = iface_.CreateCheckpoint();
          oprot.WriteMessageBegin(new TMessage("CreateCheckpoint", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CreateCheckpoint", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RestoreCheckpoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RestoreCheckpoint_args args = new RestoreCheckpoint_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RestoreCheckpoint_result result = new RestoreCheckpoint_result();
        try
        {
          result.Success = iface_.RestoreCheckpoint(args.Data);
          oprot.WriteMessageBegin(new TMessage("RestoreCheckpoint", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RestoreCheckpoint", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ExecuteFunction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ExecuteFunction_args args = new ExecuteFunction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ExecuteFunction_result result = new ExecuteFunction_result();
        try
        {
          result.Success = iface_.ExecuteFunction(args.Name, args.Parameters);
          oprot.WriteMessageBegin(new TMessage("ExecuteFunction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ExecuteFunction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Initialize_args : TBase
    {
      private MMIStandard.MAvatarDescription _avatarDescription;
      private Dictionary<string, string> _properties;

      public MMIStandard.MAvatarDescription AvatarDescription
      {
        get
        {
          return _avatarDescription;
        }
        set
        {
          __isset.avatarDescription = true;
          this._avatarDescription = value;
        }
      }

      public Dictionary<string, string> Properties
      {
        get
        {
          return _properties;
        }
        set
        {
          __isset.properties = true;
          this._properties = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarDescription;
        public bool properties;
      }

      public Initialize_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  AvatarDescription = new MMIStandard.MAvatarDescription();
                  AvatarDescription.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Map) {
                  {
                    Properties = new Dictionary<string, string>();
                    TMap _map79 = iprot.ReadMapBegin();
                    for( int _i80 = 0; _i80 < _map79.Count; ++_i80)
                    {
                      string _key81;
                      string _val82;
                      _key81 = iprot.ReadString();
                      _val82 = iprot.ReadString();
                      Properties[_key81] = _val82;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Initialize_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarDescription != null && __isset.avatarDescription) {
            field.Name = "avatarDescription";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            AvatarDescription.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Properties != null && __isset.properties) {
            field.Name = "properties";
            field.Type = TType.Map;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
              foreach (string _iter83 in Properties.Keys)
              {
                oprot.WriteString(_iter83);
                oprot.WriteString(Properties[_iter83]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Initialize_args(");
        bool __first = true;
        if (AvatarDescription != null && __isset.avatarDescription) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarDescription: ");
          __sb.Append(AvatarDescription== null ? "<null>" : AvatarDescription.ToString());
        }
        if (Properties != null && __isset.properties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Properties: ");
          __sb.Append(Properties);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Initialize_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Initialize_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Initialize_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Initialize_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AssignInstruction_args : TBase
    {
      private MInstruction _motionInstruction;
      private MSimulationState _simulationState;

      public MInstruction MotionInstruction
      {
        get
        {
          return _motionInstruction;
        }
        set
        {
          __isset.motionInstruction = true;
          this._motionInstruction = value;
        }
      }

      public MSimulationState SimulationState
      {
        get
        {
          return _simulationState;
        }
        set
        {
          __isset.simulationState = true;
          this._simulationState = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool motionInstruction;
        public bool simulationState;
      }

      public AssignInstruction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  MotionInstruction = new MInstruction();
                  MotionInstruction.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  SimulationState = new MSimulationState();
                  SimulationState.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AssignInstruction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MotionInstruction != null && __isset.motionInstruction) {
            field.Name = "motionInstruction";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            MotionInstruction.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (SimulationState != null && __isset.simulationState) {
            field.Name = "simulationState";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            SimulationState.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AssignInstruction_args(");
        bool __first = true;
        if (MotionInstruction != null && __isset.motionInstruction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MotionInstruction: ");
          __sb.Append(MotionInstruction);
        }
        if (SimulationState != null && __isset.simulationState) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SimulationState: ");
          __sb.Append(SimulationState);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AssignInstruction_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AssignInstruction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AssignInstruction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AssignInstruction_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoStep_args : TBase
    {
      private double _time;
      private MSimulationState _simulationState;

      public double Time
      {
        get
        {
          return _time;
        }
        set
        {
          __isset.time = true;
          this._time = value;
        }
      }

      public MSimulationState SimulationState
      {
        get
        {
          return _simulationState;
        }
        set
        {
          __isset.simulationState = true;
          this._simulationState = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool time;
        public bool simulationState;
      }

      public DoStep_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Double) {
                  Time = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  SimulationState = new MSimulationState();
                  SimulationState.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DoStep_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.time) {
            field.Name = "time";
            field.Type = TType.Double;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Time);
            oprot.WriteFieldEnd();
          }
          if (SimulationState != null && __isset.simulationState) {
            field.Name = "simulationState";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            SimulationState.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DoStep_args(");
        bool __first = true;
        if (__isset.time) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Time: ");
          __sb.Append(Time);
        }
        if (SimulationState != null && __isset.simulationState) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SimulationState: ");
          __sb.Append(SimulationState);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoStep_result : TBase
    {
      private MSimulationResult _success;

      public MSimulationResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DoStep_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MSimulationResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DoStep_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DoStep_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBoundaryConstraints_args : TBase
    {
      private MInstruction _instruction;

      public MInstruction Instruction
      {
        get
        {
          return _instruction;
        }
        set
        {
          __isset.instruction = true;
          this._instruction = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instruction;
      }

      public GetBoundaryConstraints_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Instruction = new MInstruction();
                  Instruction.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetBoundaryConstraints_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Instruction != null && __isset.instruction) {
            field.Name = "instruction";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Instruction.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetBoundaryConstraints_args(");
        bool __first = true;
        if (Instruction != null && __isset.instruction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Instruction: ");
          __sb.Append(Instruction);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBoundaryConstraints_result : TBase
    {
      private List<MMIStandard.MConstraint> _success;

      public List<MMIStandard.MConstraint> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetBoundaryConstraints_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MConstraint>();
                    TList _list84 = iprot.ReadListBegin();
                    for( int _i85 = 0; _i85 < _list84.Count; ++_i85)
                    {
                      MMIStandard.MConstraint _elem86;
                      _elem86 = new MMIStandard.MConstraint();
                      _elem86.Read(iprot);
                      Success.Add(_elem86);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetBoundaryConstraints_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MConstraint _iter87 in Success)
                {
                  _iter87.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetBoundaryConstraints_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckPrerequisites_args : TBase
    {
      private MInstruction _instruction;

      public MInstruction Instruction
      {
        get
        {
          return _instruction;
        }
        set
        {
          __isset.instruction = true;
          this._instruction = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instruction;
      }

      public CheckPrerequisites_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Instruction = new MInstruction();
                  Instruction.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CheckPrerequisites_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Instruction != null && __isset.instruction) {
            field.Name = "instruction";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Instruction.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckPrerequisites_args(");
        bool __first = true;
        if (Instruction != null && __isset.instruction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Instruction: ");
          __sb.Append(Instruction);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckPrerequisites_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CheckPrerequisites_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CheckPrerequisites_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckPrerequisites_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Abort_args : TBase
    {
      private string _instructionId;

      public string InstructionId
      {
        get
        {
          return _instructionId;
        }
        set
        {
          __isset.instructionId = true;
          this._instructionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instructionId;
      }

      public Abort_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  InstructionId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Abort_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (InstructionId != null && __isset.instructionId) {
            field.Name = "instructionId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(InstructionId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Abort_args(");
        bool __first = true;
        if (InstructionId != null && __isset.instructionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstructionId: ");
          __sb.Append(InstructionId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Abort_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Abort_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Abort_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Abort_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Dispose_args : TBase
    {
      private Dictionary<string, string> _parameters;

      public Dictionary<string, string> Parameters
      {
        get
        {
          return _parameters;
        }
        set
        {
          __isset.parameters = true;
          this._parameters = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool parameters;
      }

      public Dispose_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    Parameters = new Dictionary<string, string>();
                    TMap _map88 = iprot.ReadMapBegin();
                    for( int _i89 = 0; _i89 < _map88.Count; ++_i89)
                    {
                      string _key90;
                      string _val91;
                      _key90 = iprot.ReadString();
                      _val91 = iprot.ReadString();
                      Parameters[_key90] = _val91;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Dispose_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Parameters != null && __isset.parameters) {
            field.Name = "parameters";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
              foreach (string _iter92 in Parameters.Keys)
              {
                oprot.WriteString(_iter92);
                oprot.WriteString(Parameters[_iter92]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Dispose_args(");
        bool __first = true;
        if (Parameters != null && __isset.parameters) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Parameters: ");
          __sb.Append(Parameters);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Dispose_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Dispose_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Dispose_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Dispose_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateCheckpoint_args : TBase
    {

      public CreateCheckpoint_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateCheckpoint_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateCheckpoint_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateCheckpoint_result : TBase
    {
      private byte[] _success;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CreateCheckpoint_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateCheckpoint_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateCheckpoint_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RestoreCheckpoint_args : TBase
    {
      private byte[] _data;

      public byte[] Data
      {
        get
        {
          return _data;
        }
        set
        {
          __isset.data = true;
          this._data = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool data;
      }

      public RestoreCheckpoint_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Data = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RestoreCheckpoint_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Data != null && __isset.data) {
            field.Name = "data";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Data);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RestoreCheckpoint_args(");
        bool __first = true;
        if (Data != null && __isset.data) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Data: ");
          __sb.Append(Data);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RestoreCheckpoint_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RestoreCheckpoint_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RestoreCheckpoint_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RestoreCheckpoint_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExecuteFunction_args : TBase
    {
      private string _name;
      private Dictionary<string, string> _parameters;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public Dictionary<string, string> Parameters
      {
        get
        {
          return _parameters;
        }
        set
        {
          __isset.parameters = true;
          this._parameters = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool parameters;
      }

      public ExecuteFunction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Map) {
                  {
                    Parameters = new Dictionary<string, string>();
                    TMap _map93 = iprot.ReadMapBegin();
                    for( int _i94 = 0; _i94 < _map93.Count; ++_i94)
                    {
                      string _key95;
                      string _val96;
                      _key95 = iprot.ReadString();
                      _val96 = iprot.ReadString();
                      Parameters[_key95] = _val96;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ExecuteFunction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (Parameters != null && __isset.parameters) {
            field.Name = "parameters";
            field.Type = TType.Map;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
              foreach (string _iter97 in Parameters.Keys)
              {
                oprot.WriteString(_iter97);
                oprot.WriteString(Parameters[_iter97]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ExecuteFunction_args(");
        bool __first = true;
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (Parameters != null && __isset.parameters) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Parameters: ");
          __sb.Append(Parameters);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExecuteFunction_result : TBase
    {
      private Dictionary<string, string> _success;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ExecuteFunction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map) {
                  {
                    Success = new Dictionary<string, string>();
                    TMap _map98 = iprot.ReadMapBegin();
                    for( int _i99 = 0; _i99 < _map98.Count; ++_i99)
                    {
                      string _key100;
                      string _val101;
                      _key100 = iprot.ReadString();
                      _val101 = iprot.ReadString();
                      Success[_key100] = _val101;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ExecuteFunction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
                foreach (string _iter102 in Success.Keys)
                {
                  oprot.WriteString(_iter102);
                  oprot.WriteString(Success[_iter102]);
                }
                oprot.WriteMapEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ExecuteFunction_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
