/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MGraspPoseService {
    public interface ISync : MMIServiceBase.ISync {
      List<MMIStandard.MGeometryConstraint> GetGraspPoses(MMIStandard.MAvatarPostureValues posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, bool repositionHand);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_GetGraspPoses(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, bool repositionHand);
      List<MMIStandard.MGeometryConstraint> End_GetGraspPoses(IAsyncResult asyncResult);
      #endif
    }

    public class Client : MMIServiceBase.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetGraspPoses(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, bool repositionHand)
      {
        return send_GetGraspPoses(callback, state, posture, handType, sceneObject, repositionHand);
      }

      public List<MMIStandard.MGeometryConstraint> End_GetGraspPoses(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGraspPoses();
      }

      #endif

      public List<MMIStandard.MGeometryConstraint> GetGraspPoses(MMIStandard.MAvatarPostureValues posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, bool repositionHand)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetGraspPoses(null, null, posture, handType, sceneObject, repositionHand);
        return End_GetGraspPoses(asyncResult);

        #else
        send_GetGraspPoses(posture, handType, sceneObject, repositionHand);
        return recv_GetGraspPoses();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGraspPoses(AsyncCallback callback, object state, MMIStandard.MAvatarPostureValues posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, bool repositionHand)
      {
        oprot_.WriteMessageBegin(new TMessage("GetGraspPoses", TMessageType.Call, seqid_));
        GetGraspPoses_args args = new GetGraspPoses_args();
        args.Posture = posture;
        args.HandType = handType;
        args.SceneObject = sceneObject;
        args.RepositionHand = repositionHand;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetGraspPoses(MMIStandard.MAvatarPostureValues posture, MMIStandard.MJointType handType, MMIStandard.MSceneObject sceneObject, bool repositionHand)
      {
        oprot_.WriteMessageBegin(new TMessage("GetGraspPoses", TMessageType.Call, seqid_));
        GetGraspPoses_args args = new GetGraspPoses_args();
        args.Posture = posture;
        args.HandType = handType;
        args.SceneObject = sceneObject;
        args.RepositionHand = repositionHand;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MGeometryConstraint> recv_GetGraspPoses()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGraspPoses_result result = new GetGraspPoses_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGraspPoses failed: unknown result");
      }

    }
    public class Processor : MMIServiceBase.Processor, TProcessor {
      public Processor(ISync iface) : base(iface)
      {
        iface_ = iface;
        processMap_["GetGraspPoses"] = GetGraspPoses_Process;
      }

      private ISync iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetGraspPoses_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGraspPoses_args args = new GetGraspPoses_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGraspPoses_result result = new GetGraspPoses_result();
        try
        {
          result.Success = iface_.GetGraspPoses(args.Posture, args.HandType, args.SceneObject, args.RepositionHand);
          oprot.WriteMessageBegin(new TMessage("GetGraspPoses", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetGraspPoses", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGraspPoses_args : TBase
    {
      private MMIStandard.MAvatarPostureValues _posture;
      private MMIStandard.MJointType _handType;
      private MMIStandard.MSceneObject _sceneObject;
      private bool _repositionHand;

      public MMIStandard.MAvatarPostureValues Posture
      {
        get
        {
          return _posture;
        }
        set
        {
          __isset.posture = true;
          this._posture = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MMIStandard.MJointType"/>
      /// </summary>
      public MMIStandard.MJointType HandType
      {
        get
        {
          return _handType;
        }
        set
        {
          __isset.handType = true;
          this._handType = value;
        }
      }

      public MMIStandard.MSceneObject SceneObject
      {
        get
        {
          return _sceneObject;
        }
        set
        {
          __isset.sceneObject = true;
          this._sceneObject = value;
        }
      }

      public bool RepositionHand
      {
        get
        {
          return _repositionHand;
        }
        set
        {
          __isset.repositionHand = true;
          this._repositionHand = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool posture;
        public bool handType;
        public bool sceneObject;
        public bool repositionHand;
      }

      public GetGraspPoses_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Posture = new MMIStandard.MAvatarPostureValues();
                  Posture.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  HandType = (MMIStandard.MJointType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  SceneObject = new MMIStandard.MSceneObject();
                  SceneObject.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Bool) {
                  RepositionHand = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGraspPoses_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Posture != null && __isset.posture) {
            field.Name = "posture";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Posture.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.handType) {
            field.Name = "handType";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)HandType);
            oprot.WriteFieldEnd();
          }
          if (SceneObject != null && __isset.sceneObject) {
            field.Name = "sceneObject";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            SceneObject.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.repositionHand) {
            field.Name = "repositionHand";
            field.Type = TType.Bool;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(RepositionHand);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGraspPoses_args(");
        bool __first = true;
        if (Posture != null && __isset.posture) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Posture: ");
          __sb.Append(Posture== null ? "<null>" : Posture.ToString());
        }
        if (__isset.handType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("HandType: ");
          __sb.Append(HandType);
        }
        if (SceneObject != null && __isset.sceneObject) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SceneObject: ");
          __sb.Append(SceneObject== null ? "<null>" : SceneObject.ToString());
        }
        if (__isset.repositionHand) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RepositionHand: ");
          __sb.Append(RepositionHand);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGraspPoses_result : TBase
    {
      private List<MMIStandard.MGeometryConstraint> _success;

      public List<MMIStandard.MGeometryConstraint> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGraspPoses_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MGeometryConstraint>();
                    TList _list145 = iprot.ReadListBegin();
                    for( int _i146 = 0; _i146 < _list145.Count; ++_i146)
                    {
                      MMIStandard.MGeometryConstraint _elem147;
                      _elem147 = new MMIStandard.MGeometryConstraint();
                      _elem147.Read(iprot);
                      Success.Add(_elem147);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGraspPoses_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MGeometryConstraint _iter148 in Success)
                {
                  _iter148.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGraspPoses_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
