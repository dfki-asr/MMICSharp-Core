/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MCoSimulationEvents : TBase
  {

    public List<MMIStandard.MSimulationEvent> Events { get; set; }

    public double SimulationTime { get; set; }

    public int FrameNumber { get; set; }

    public MCoSimulationEvents() {
    }

    public MCoSimulationEvents(List<MMIStandard.MSimulationEvent> Events, double SimulationTime, int FrameNumber) : this() {
      this.Events = Events;
      this.SimulationTime = SimulationTime;
      this.FrameNumber = FrameNumber;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Events = false;
        bool isset_SimulationTime = false;
        bool isset_FrameNumber = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Events = new List<MMIStandard.MSimulationEvent>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    MMIStandard.MSimulationEvent _elem2;
                    _elem2 = new MMIStandard.MSimulationEvent();
                    _elem2.Read(iprot);
                    Events.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
                isset_Events = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                SimulationTime = iprot.ReadDouble();
                isset_SimulationTime = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                FrameNumber = iprot.ReadI32();
                isset_FrameNumber = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Events)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Events not set");
        if (!isset_SimulationTime)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SimulationTime not set");
        if (!isset_FrameNumber)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field FrameNumber not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MCoSimulationEvents");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Events == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Events not set");
        field.Name = "Events";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Events.Count));
          foreach (MMIStandard.MSimulationEvent _iter3 in Events)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        field.Name = "SimulationTime";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(SimulationTime);
        oprot.WriteFieldEnd();
        field.Name = "FrameNumber";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FrameNumber);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MCoSimulationEvents(");
      __sb.Append(", Events: ");
      __sb.Append(Events);
      __sb.Append(", SimulationTime: ");
      __sb.Append(SimulationTime);
      __sb.Append(", FrameNumber: ");
      __sb.Append(FrameNumber);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
