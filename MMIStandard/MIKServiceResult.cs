/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MIKServiceResult : TBase
  {

    public MMIStandard.MAvatarPostureValues Posture { get; set; }

    public bool Success { get; set; }

    public List<double> Error { get; set; }

    public MIKServiceResult() {
    }

    public MIKServiceResult(MMIStandard.MAvatarPostureValues Posture, bool Success, List<double> Error) : this() {
      this.Posture = Posture;
      this.Success = Success;
      this.Error = Error;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Posture = false;
        bool isset_Success = false;
        bool isset_Error = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Posture = new MMIStandard.MAvatarPostureValues();
                Posture.Read(iprot);
                isset_Posture = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
                isset_Success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Error = new List<double>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    double _elem2;
                    _elem2 = iprot.ReadDouble();
                    Error.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
                isset_Error = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Posture)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Posture not set");
        if (!isset_Success)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Success not set");
        if (!isset_Error)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Error not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MIKServiceResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Posture == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Posture not set");
        field.Name = "Posture";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Posture.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
        if (Error == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Error not set");
        field.Name = "Error";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Double, Error.Count));
          foreach (double _iter3 in Error)
          {
            oprot.WriteDouble(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MIKServiceResult(");
      __sb.Append(", Posture: ");
      __sb.Append(Posture== null ? "<null>" : Posture.ToString());
      __sb.Append(", Success: ");
      __sb.Append(Success);
      __sb.Append(", Error: ");
      __sb.Append(Error);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
