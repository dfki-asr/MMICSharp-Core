/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class MPhysicsInteraction : TBase
{
  private Dictionary<string, string> _Properties;

  public string Target { get; set; }

  /// <summary>
  /// 
  /// <seealso cref="MPhysicsInteractionType"/>
  /// </summary>
  public MPhysicsInteractionType Type { get; set; }

  public List<double> Values { get; set; }

  public Dictionary<string, string> Properties
  {
    get
    {
      return _Properties;
    }
    set
    {
      __isset.Properties = true;
      this._Properties = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool Properties;
  }

  public MPhysicsInteraction() {
  }

  public MPhysicsInteraction(string Target, MPhysicsInteractionType Type, List<double> Values) : this() {
    this.Target = Target;
    this.Type = Type;
    this.Values = Values;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_Target = false;
      bool isset_Type = false;
      bool isset_Values = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Target = iprot.ReadString();
              isset_Target = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Type = (MPhysicsInteractionType)iprot.ReadI32();
              isset_Type = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Values = new List<double>();
                TList _list83 = iprot.ReadListBegin();
                for( int _i84 = 0; _i84 < _list83.Count; ++_i84)
                {
                  double _elem85;
                  _elem85 = iprot.ReadDouble();
                  Values.Add(_elem85);
                }
                iprot.ReadListEnd();
              }
              isset_Values = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Properties = new Dictionary<string, string>();
                TMap _map86 = iprot.ReadMapBegin();
                for( int _i87 = 0; _i87 < _map86.Count; ++_i87)
                {
                  string _key88;
                  string _val89;
                  _key88 = iprot.ReadString();
                  _val89 = iprot.ReadString();
                  Properties[_key88] = _val89;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Target)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Target not set");
      if (!isset_Type)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Type not set");
      if (!isset_Values)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Values not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("MPhysicsInteraction");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Target == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Target not set");
      field.Name = "Target";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Target);
      oprot.WriteFieldEnd();
      field.Name = "Type";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Type);
      oprot.WriteFieldEnd();
      if (Values == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Values not set");
      field.Name = "Values";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, Values.Count));
        foreach (double _iter90 in Values)
        {
          oprot.WriteDouble(_iter90);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (Properties != null && __isset.Properties) {
        field.Name = "Properties";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
          foreach (string _iter91 in Properties.Keys)
          {
            oprot.WriteString(_iter91);
            oprot.WriteString(Properties[_iter91]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("MPhysicsInteraction(");
    __sb.Append(", Target: ");
    __sb.Append(Target);
    __sb.Append(", Type: ");
    __sb.Append(Type);
    __sb.Append(", Values: ");
    __sb.Append(Values);
    if (Properties != null && __isset.Properties) {
      __sb.Append(", Properties: ");
      __sb.Append(Properties);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

