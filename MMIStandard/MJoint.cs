/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MJoint : TBase
  {
    private List<MChannel> _Channels;
    private string _Parent;

    public string ID { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="MJointType"/>
    /// </summary>
    public MJointType Type { get; set; }

    public MMIStandard.MVector3 Position { get; set; }

    public MMIStandard.MQuaternion Rotation { get; set; }

    public List<MChannel> Channels
    {
      get
      {
        return _Channels;
      }
      set
      {
        __isset.Channels = true;
        this._Channels = value;
      }
    }

    public string Parent
    {
      get
      {
        return _Parent;
      }
      set
      {
        __isset.Parent = true;
        this._Parent = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Channels;
      public bool Parent;
    }

    public MJoint() {
    }

    public MJoint(string ID, MJointType Type, MMIStandard.MVector3 Position, MMIStandard.MQuaternion Rotation) : this() {
      this.ID = ID;
      this.Type = Type;
      this.Position = Position;
      this.Rotation = Rotation;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_ID = false;
        bool isset_Type = false;
        bool isset_Position = false;
        bool isset_Rotation = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
                isset_ID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Type = (MJointType)iprot.ReadI32();
                isset_Type = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Position = new MMIStandard.MVector3();
                Position.Read(iprot);
                isset_Position = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Rotation = new MMIStandard.MQuaternion();
                Rotation.Read(iprot);
                isset_Rotation = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Channels = new List<MChannel>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    MChannel _elem10;
                    _elem10 = (MChannel)iprot.ReadI32();
                    Channels.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Parent = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_ID)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ID not set");
        if (!isset_Type)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Type not set");
        if (!isset_Position)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Position not set");
        if (!isset_Rotation)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Rotation not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MJoint");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ID not set");
        field.Name = "ID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ID);
        oprot.WriteFieldEnd();
        field.Name = "Type";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
        if (Position == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Position not set");
        field.Name = "Position";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Position.Write(oprot);
        oprot.WriteFieldEnd();
        if (Rotation == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Rotation not set");
        field.Name = "Rotation";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Rotation.Write(oprot);
        oprot.WriteFieldEnd();
        if (Channels != null && __isset.Channels) {
          field.Name = "Channels";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Channels.Count));
            foreach (MChannel _iter11 in Channels)
            {
              oprot.WriteI32((int)_iter11);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Parent != null && __isset.Parent) {
          field.Name = "Parent";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Parent);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MJoint(");
      __sb.Append(", ID: ");
      __sb.Append(ID);
      __sb.Append(", Type: ");
      __sb.Append(Type);
      __sb.Append(", Position: ");
      __sb.Append(Position== null ? "<null>" : Position.ToString());
      __sb.Append(", Rotation: ");
      __sb.Append(Rotation== null ? "<null>" : Rotation.ToString());
      if (Channels != null && __isset.Channels) {
        __sb.Append(", Channels: ");
        __sb.Append(Channels);
      }
      if (Parent != null && __isset.Parent) {
        __sb.Append(", Parent: ");
        __sb.Append(Parent);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
