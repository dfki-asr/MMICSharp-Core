/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MPropertyManipulation : TBase
  {
    private string _Value;

    public string Target { get; set; }

    public string Key { get; set; }

    public bool AddRemove { get; set; }

    public string Value
    {
      get
      {
        return _Value;
      }
      set
      {
        __isset.@Value = true;
        this._Value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool @Value;
    }

    public MPropertyManipulation() {
    }

    public MPropertyManipulation(string Target, string Key, bool AddRemove) : this() {
      this.Target = Target;
      this.Key = Key;
      this.AddRemove = AddRemove;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Target = false;
        bool isset_Key = false;
        bool isset_AddRemove = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Target = iprot.ReadString();
                isset_Target = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
                isset_Key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                AddRemove = iprot.ReadBool();
                isset_AddRemove = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Target)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Target not set");
        if (!isset_Key)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Key not set");
        if (!isset_AddRemove)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AddRemove not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MPropertyManipulation");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Target == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Target not set");
        field.Name = "Target";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Target);
        oprot.WriteFieldEnd();
        if (Key == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Key not set");
        field.Name = "Key";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Key);
        oprot.WriteFieldEnd();
        field.Name = "AddRemove";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AddRemove);
        oprot.WriteFieldEnd();
        if (Value != null && __isset.@Value) {
          field.Name = "Value";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MPropertyManipulation(");
      __sb.Append(", Target: ");
      __sb.Append(Target);
      __sb.Append(", Key: ");
      __sb.Append(Key);
      __sb.Append(", AddRemove: ");
      __sb.Append(AddRemove);
      if (Value != null && __isset.@Value) {
        __sb.Append(", Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
