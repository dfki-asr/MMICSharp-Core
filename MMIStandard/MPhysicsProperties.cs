/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MPhysicsProperties : TBase
  {
    private List<double> _Inertia;
    private List<double> _Velocity;
    private List<double> _AngularVelocity;
    private List<double> _NetForce;
    private List<double> _NetTorque;
    private double _Mu1;
    private double _Mu2;
    private double _Bounciness;
    private double _MuTorsion;
    private double _TorsionSurfaceRadius;

    public double Mass { get; set; }

    public List<double> CenterOfMass { get; set; }

    public List<double> Inertia
    {
      get
      {
        return _Inertia;
      }
      set
      {
        __isset.Inertia = true;
        this._Inertia = value;
      }
    }

    public List<double> Velocity
    {
      get
      {
        return _Velocity;
      }
      set
      {
        __isset.Velocity = true;
        this._Velocity = value;
      }
    }

    public List<double> AngularVelocity
    {
      get
      {
        return _AngularVelocity;
      }
      set
      {
        __isset.AngularVelocity = true;
        this._AngularVelocity = value;
      }
    }

    public List<double> NetForce
    {
      get
      {
        return _NetForce;
      }
      set
      {
        __isset.NetForce = true;
        this._NetForce = value;
      }
    }

    public List<double> NetTorque
    {
      get
      {
        return _NetTorque;
      }
      set
      {
        __isset.NetTorque = true;
        this._NetTorque = value;
      }
    }

    public double Mu1
    {
      get
      {
        return _Mu1;
      }
      set
      {
        __isset.Mu1 = true;
        this._Mu1 = value;
      }
    }

    public double Mu2
    {
      get
      {
        return _Mu2;
      }
      set
      {
        __isset.Mu2 = true;
        this._Mu2 = value;
      }
    }

    public double Bounciness
    {
      get
      {
        return _Bounciness;
      }
      set
      {
        __isset.Bounciness = true;
        this._Bounciness = value;
      }
    }

    public double MuTorsion
    {
      get
      {
        return _MuTorsion;
      }
      set
      {
        __isset.MuTorsion = true;
        this._MuTorsion = value;
      }
    }

    public double TorsionSurfaceRadius
    {
      get
      {
        return _TorsionSurfaceRadius;
      }
      set
      {
        __isset.TorsionSurfaceRadius = true;
        this._TorsionSurfaceRadius = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Inertia;
      public bool Velocity;
      public bool AngularVelocity;
      public bool NetForce;
      public bool NetTorque;
      public bool Mu1;
      public bool Mu2;
      public bool Bounciness;
      public bool MuTorsion;
      public bool TorsionSurfaceRadius;
    }

    public MPhysicsProperties() {
    }

    public MPhysicsProperties(double Mass, List<double> CenterOfMass) : this() {
      this.Mass = Mass;
      this.CenterOfMass = CenterOfMass;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Mass = false;
        bool isset_CenterOfMass = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double) {
                Mass = iprot.ReadDouble();
                isset_Mass = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  CenterOfMass = new List<double>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    double _elem10;
                    _elem10 = iprot.ReadDouble();
                    CenterOfMass.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
                isset_CenterOfMass = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Inertia = new List<double>();
                  TList _list11 = iprot.ReadListBegin();
                  for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                  {
                    double _elem13;
                    _elem13 = iprot.ReadDouble();
                    Inertia.Add(_elem13);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Velocity = new List<double>();
                  TList _list14 = iprot.ReadListBegin();
                  for( int _i15 = 0; _i15 < _list14.Count; ++_i15)
                  {
                    double _elem16;
                    _elem16 = iprot.ReadDouble();
                    Velocity.Add(_elem16);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  AngularVelocity = new List<double>();
                  TList _list17 = iprot.ReadListBegin();
                  for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                  {
                    double _elem19;
                    _elem19 = iprot.ReadDouble();
                    AngularVelocity.Add(_elem19);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  NetForce = new List<double>();
                  TList _list20 = iprot.ReadListBegin();
                  for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                  {
                    double _elem22;
                    _elem22 = iprot.ReadDouble();
                    NetForce.Add(_elem22);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  NetTorque = new List<double>();
                  TList _list23 = iprot.ReadListBegin();
                  for( int _i24 = 0; _i24 < _list23.Count; ++_i24)
                  {
                    double _elem25;
                    _elem25 = iprot.ReadDouble();
                    NetTorque.Add(_elem25);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Double) {
                Mu1 = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Double) {
                Mu2 = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Double) {
                Bounciness = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Double) {
                MuTorsion = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Double) {
                TorsionSurfaceRadius = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Mass)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Mass not set");
        if (!isset_CenterOfMass)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CenterOfMass not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MPhysicsProperties");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "Mass";
        field.Type = TType.Double;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Mass);
        oprot.WriteFieldEnd();
        if (CenterOfMass == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CenterOfMass not set");
        field.Name = "CenterOfMass";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Double, CenterOfMass.Count));
          foreach (double _iter26 in CenterOfMass)
          {
            oprot.WriteDouble(_iter26);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        if (Inertia != null && __isset.Inertia) {
          field.Name = "Inertia";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Inertia.Count));
            foreach (double _iter27 in Inertia)
            {
              oprot.WriteDouble(_iter27);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Velocity != null && __isset.Velocity) {
          field.Name = "Velocity";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, Velocity.Count));
            foreach (double _iter28 in Velocity)
            {
              oprot.WriteDouble(_iter28);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AngularVelocity != null && __isset.AngularVelocity) {
          field.Name = "AngularVelocity";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, AngularVelocity.Count));
            foreach (double _iter29 in AngularVelocity)
            {
              oprot.WriteDouble(_iter29);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (NetForce != null && __isset.NetForce) {
          field.Name = "NetForce";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, NetForce.Count));
            foreach (double _iter30 in NetForce)
            {
              oprot.WriteDouble(_iter30);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (NetTorque != null && __isset.NetTorque) {
          field.Name = "NetTorque";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Double, NetTorque.Count));
            foreach (double _iter31 in NetTorque)
            {
              oprot.WriteDouble(_iter31);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.Mu1) {
          field.Name = "Mu1";
          field.Type = TType.Double;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Mu1);
          oprot.WriteFieldEnd();
        }
        if (__isset.Mu2) {
          field.Name = "Mu2";
          field.Type = TType.Double;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Mu2);
          oprot.WriteFieldEnd();
        }
        if (__isset.Bounciness) {
          field.Name = "Bounciness";
          field.Type = TType.Double;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Bounciness);
          oprot.WriteFieldEnd();
        }
        if (__isset.MuTorsion) {
          field.Name = "MuTorsion";
          field.Type = TType.Double;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(MuTorsion);
          oprot.WriteFieldEnd();
        }
        if (__isset.TorsionSurfaceRadius) {
          field.Name = "TorsionSurfaceRadius";
          field.Type = TType.Double;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(TorsionSurfaceRadius);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MPhysicsProperties(");
      __sb.Append(", Mass: ");
      __sb.Append(Mass);
      __sb.Append(", CenterOfMass: ");
      __sb.Append(CenterOfMass);
      if (Inertia != null && __isset.Inertia) {
        __sb.Append(", Inertia: ");
        __sb.Append(Inertia);
      }
      if (Velocity != null && __isset.Velocity) {
        __sb.Append(", Velocity: ");
        __sb.Append(Velocity);
      }
      if (AngularVelocity != null && __isset.AngularVelocity) {
        __sb.Append(", AngularVelocity: ");
        __sb.Append(AngularVelocity);
      }
      if (NetForce != null && __isset.NetForce) {
        __sb.Append(", NetForce: ");
        __sb.Append(NetForce);
      }
      if (NetTorque != null && __isset.NetTorque) {
        __sb.Append(", NetTorque: ");
        __sb.Append(NetTorque);
      }
      if (__isset.Mu1) {
        __sb.Append(", Mu1: ");
        __sb.Append(Mu1);
      }
      if (__isset.Mu2) {
        __sb.Append(", Mu2: ");
        __sb.Append(Mu2);
      }
      if (__isset.Bounciness) {
        __sb.Append(", Bounciness: ");
        __sb.Append(Bounciness);
      }
      if (__isset.MuTorsion) {
        __sb.Append(", MuTorsion: ");
        __sb.Append(MuTorsion);
      }
      if (__isset.TorsionSurfaceRadius) {
        __sb.Append(", TorsionSurfaceRadius: ");
        __sb.Append(TorsionSurfaceRadius);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
