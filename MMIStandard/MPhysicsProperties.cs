/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class MPhysicsProperties : TBase
{
  private List<double> _Inertia;
  private List<double> _Velocity;
  private List<double> _AngularVelocity;
  private List<double> _NetForce;
  private List<double> _NetTorque;
  private double _Mu1;
  private double _Mu2;
  private double _Bounciness;
  private double _MuTorsion;
  private double _TorsionSurfaceRadius;

  public double Mass { get; set; }

  public List<double> CenterOfMass { get; set; }

  public List<double> Inertia
  {
    get
    {
      return _Inertia;
    }
    set
    {
      __isset.Inertia = true;
      this._Inertia = value;
    }
  }

  public List<double> Velocity
  {
    get
    {
      return _Velocity;
    }
    set
    {
      __isset.Velocity = true;
      this._Velocity = value;
    }
  }

  public List<double> AngularVelocity
  {
    get
    {
      return _AngularVelocity;
    }
    set
    {
      __isset.AngularVelocity = true;
      this._AngularVelocity = value;
    }
  }

  public List<double> NetForce
  {
    get
    {
      return _NetForce;
    }
    set
    {
      __isset.NetForce = true;
      this._NetForce = value;
    }
  }

  public List<double> NetTorque
  {
    get
    {
      return _NetTorque;
    }
    set
    {
      __isset.NetTorque = true;
      this._NetTorque = value;
    }
  }

  public double Mu1
  {
    get
    {
      return _Mu1;
    }
    set
    {
      __isset.Mu1 = true;
      this._Mu1 = value;
    }
  }

  public double Mu2
  {
    get
    {
      return _Mu2;
    }
    set
    {
      __isset.Mu2 = true;
      this._Mu2 = value;
    }
  }

  public double Bounciness
  {
    get
    {
      return _Bounciness;
    }
    set
    {
      __isset.Bounciness = true;
      this._Bounciness = value;
    }
  }

  public double MuTorsion
  {
    get
    {
      return _MuTorsion;
    }
    set
    {
      __isset.MuTorsion = true;
      this._MuTorsion = value;
    }
  }

  public double TorsionSurfaceRadius
  {
    get
    {
      return _TorsionSurfaceRadius;
    }
    set
    {
      __isset.TorsionSurfaceRadius = true;
      this._TorsionSurfaceRadius = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool Inertia;
    public bool Velocity;
    public bool AngularVelocity;
    public bool NetForce;
    public bool NetTorque;
    public bool Mu1;
    public bool Mu2;
    public bool Bounciness;
    public bool MuTorsion;
    public bool TorsionSurfaceRadius;
  }

  public MPhysicsProperties() {
  }

  public MPhysicsProperties(double Mass, List<double> CenterOfMass) : this() {
    this.Mass = Mass;
    this.CenterOfMass = CenterOfMass;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_Mass = false;
      bool isset_CenterOfMass = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Double) {
              Mass = iprot.ReadDouble();
              isset_Mass = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                CenterOfMass = new List<double>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  double _elem14;
                  _elem14 = iprot.ReadDouble();
                  CenterOfMass.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
              isset_CenterOfMass = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Inertia = new List<double>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  double _elem17;
                  _elem17 = iprot.ReadDouble();
                  Inertia.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Velocity = new List<double>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  double _elem20;
                  _elem20 = iprot.ReadDouble();
                  Velocity.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                AngularVelocity = new List<double>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  double _elem23;
                  _elem23 = iprot.ReadDouble();
                  AngularVelocity.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                NetForce = new List<double>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  double _elem26;
                  _elem26 = iprot.ReadDouble();
                  NetForce.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                NetTorque = new List<double>();
                TList _list27 = iprot.ReadListBegin();
                for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                {
                  double _elem29;
                  _elem29 = iprot.ReadDouble();
                  NetTorque.Add(_elem29);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              Mu1 = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Double) {
              Mu2 = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Double) {
              Bounciness = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Double) {
              MuTorsion = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Double) {
              TorsionSurfaceRadius = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Mass)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Mass not set");
      if (!isset_CenterOfMass)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CenterOfMass not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("MPhysicsProperties");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "Mass";
      field.Type = TType.Double;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(Mass);
      oprot.WriteFieldEnd();
      if (CenterOfMass == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CenterOfMass not set");
      field.Name = "CenterOfMass";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Double, CenterOfMass.Count));
        foreach (double _iter30 in CenterOfMass)
        {
          oprot.WriteDouble(_iter30);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (Inertia != null && __isset.Inertia) {
        field.Name = "Inertia";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Double, Inertia.Count));
          foreach (double _iter31 in Inertia)
          {
            oprot.WriteDouble(_iter31);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Velocity != null && __isset.Velocity) {
        field.Name = "Velocity";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Double, Velocity.Count));
          foreach (double _iter32 in Velocity)
          {
            oprot.WriteDouble(_iter32);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (AngularVelocity != null && __isset.AngularVelocity) {
        field.Name = "AngularVelocity";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Double, AngularVelocity.Count));
          foreach (double _iter33 in AngularVelocity)
          {
            oprot.WriteDouble(_iter33);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (NetForce != null && __isset.NetForce) {
        field.Name = "NetForce";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Double, NetForce.Count));
          foreach (double _iter34 in NetForce)
          {
            oprot.WriteDouble(_iter34);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (NetTorque != null && __isset.NetTorque) {
        field.Name = "NetTorque";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Double, NetTorque.Count));
          foreach (double _iter35 in NetTorque)
          {
            oprot.WriteDouble(_iter35);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.Mu1) {
        field.Name = "Mu1";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Mu1);
        oprot.WriteFieldEnd();
      }
      if (__isset.Mu2) {
        field.Name = "Mu2";
        field.Type = TType.Double;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Mu2);
        oprot.WriteFieldEnd();
      }
      if (__isset.Bounciness) {
        field.Name = "Bounciness";
        field.Type = TType.Double;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Bounciness);
        oprot.WriteFieldEnd();
      }
      if (__isset.MuTorsion) {
        field.Name = "MuTorsion";
        field.Type = TType.Double;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(MuTorsion);
        oprot.WriteFieldEnd();
      }
      if (__isset.TorsionSurfaceRadius) {
        field.Name = "TorsionSurfaceRadius";
        field.Type = TType.Double;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(TorsionSurfaceRadius);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("MPhysicsProperties(");
    __sb.Append(", Mass: ");
    __sb.Append(Mass);
    __sb.Append(", CenterOfMass: ");
    __sb.Append(CenterOfMass);
    if (Inertia != null && __isset.Inertia) {
      __sb.Append(", Inertia: ");
      __sb.Append(Inertia);
    }
    if (Velocity != null && __isset.Velocity) {
      __sb.Append(", Velocity: ");
      __sb.Append(Velocity);
    }
    if (AngularVelocity != null && __isset.AngularVelocity) {
      __sb.Append(", AngularVelocity: ");
      __sb.Append(AngularVelocity);
    }
    if (NetForce != null && __isset.NetForce) {
      __sb.Append(", NetForce: ");
      __sb.Append(NetForce);
    }
    if (NetTorque != null && __isset.NetTorque) {
      __sb.Append(", NetTorque: ");
      __sb.Append(NetTorque);
    }
    if (__isset.Mu1) {
      __sb.Append(", Mu1: ");
      __sb.Append(Mu1);
    }
    if (__isset.Mu2) {
      __sb.Append(", Mu2: ");
      __sb.Append(Mu2);
    }
    if (__isset.Bounciness) {
      __sb.Append(", Bounciness: ");
      __sb.Append(Bounciness);
    }
    if (__isset.MuTorsion) {
      __sb.Append(", MuTorsion: ");
      __sb.Append(MuTorsion);
    }
    if (__isset.TorsionSurfaceRadius) {
      __sb.Append(", TorsionSurfaceRadius: ");
      __sb.Append(TorsionSurfaceRadius);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

