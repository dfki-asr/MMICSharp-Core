/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MSynchronizableScene {
    public interface ISync : MMIServiceBase.ISync {
      MMIStandard.MBoolResponse ApplyUpdates(MMIStandard.MSceneUpdate sceneUpdates);
      MMIStandard.MBoolResponse ApplyManipulations(List<MMIStandard.MSceneManipulation> sceneManipulations);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_ApplyUpdates(AsyncCallback callback, object state, MMIStandard.MSceneUpdate sceneUpdates);
      MMIStandard.MBoolResponse End_ApplyUpdates(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ApplyManipulations(AsyncCallback callback, object state, List<MMIStandard.MSceneManipulation> sceneManipulations);
      MMIStandard.MBoolResponse End_ApplyManipulations(IAsyncResult asyncResult);
      #endif
    }

    public class Client : MMIServiceBase.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_ApplyUpdates(AsyncCallback callback, object state, MMIStandard.MSceneUpdate sceneUpdates)
      {
        return send_ApplyUpdates(callback, state, sceneUpdates);
      }

      public MMIStandard.MBoolResponse End_ApplyUpdates(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ApplyUpdates();
      }

      #endif

      public MMIStandard.MBoolResponse ApplyUpdates(MMIStandard.MSceneUpdate sceneUpdates)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_ApplyUpdates(null, null, sceneUpdates);
        return End_ApplyUpdates(asyncResult);

        #else
        send_ApplyUpdates(sceneUpdates);
        return recv_ApplyUpdates();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ApplyUpdates(AsyncCallback callback, object state, MMIStandard.MSceneUpdate sceneUpdates)
      {
        oprot_.WriteMessageBegin(new TMessage("ApplyUpdates", TMessageType.Call, seqid_));
        ApplyUpdates_args args = new ApplyUpdates_args();
        args.SceneUpdates = sceneUpdates;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_ApplyUpdates(MMIStandard.MSceneUpdate sceneUpdates)
      {
        oprot_.WriteMessageBegin(new TMessage("ApplyUpdates", TMessageType.Call, seqid_));
        ApplyUpdates_args args = new ApplyUpdates_args();
        args.SceneUpdates = sceneUpdates;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_ApplyUpdates()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ApplyUpdates_result result = new ApplyUpdates_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ApplyUpdates failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_ApplyManipulations(AsyncCallback callback, object state, List<MMIStandard.MSceneManipulation> sceneManipulations)
      {
        return send_ApplyManipulations(callback, state, sceneManipulations);
      }

      public MMIStandard.MBoolResponse End_ApplyManipulations(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ApplyManipulations();
      }

      #endif

      public MMIStandard.MBoolResponse ApplyManipulations(List<MMIStandard.MSceneManipulation> sceneManipulations)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_ApplyManipulations(null, null, sceneManipulations);
        return End_ApplyManipulations(asyncResult);

        #else
        send_ApplyManipulations(sceneManipulations);
        return recv_ApplyManipulations();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ApplyManipulations(AsyncCallback callback, object state, List<MMIStandard.MSceneManipulation> sceneManipulations)
      {
        oprot_.WriteMessageBegin(new TMessage("ApplyManipulations", TMessageType.Call, seqid_));
        ApplyManipulations_args args = new ApplyManipulations_args();
        args.SceneManipulations = sceneManipulations;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_ApplyManipulations(List<MMIStandard.MSceneManipulation> sceneManipulations)
      {
        oprot_.WriteMessageBegin(new TMessage("ApplyManipulations", TMessageType.Call, seqid_));
        ApplyManipulations_args args = new ApplyManipulations_args();
        args.SceneManipulations = sceneManipulations;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_ApplyManipulations()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ApplyManipulations_result result = new ApplyManipulations_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ApplyManipulations failed: unknown result");
      }

    }
    public class Processor : MMIServiceBase.Processor, TProcessor {
      public Processor(ISync iface) : base(iface)
      {
        iface_ = iface;
        processMap_["ApplyUpdates"] = ApplyUpdates_Process;
        processMap_["ApplyManipulations"] = ApplyManipulations_Process;
      }

      private ISync iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void ApplyUpdates_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ApplyUpdates_args args = new ApplyUpdates_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ApplyUpdates_result result = new ApplyUpdates_result();
        try
        {
          result.Success = iface_.ApplyUpdates(args.SceneUpdates);
          oprot.WriteMessageBegin(new TMessage("ApplyUpdates", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ApplyUpdates", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ApplyManipulations_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ApplyManipulations_args args = new ApplyManipulations_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ApplyManipulations_result result = new ApplyManipulations_result();
        try
        {
          result.Success = iface_.ApplyManipulations(args.SceneManipulations);
          oprot.WriteMessageBegin(new TMessage("ApplyManipulations", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ApplyManipulations", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ApplyUpdates_args : TBase
    {
      private MMIStandard.MSceneUpdate _sceneUpdates;

      public MMIStandard.MSceneUpdate SceneUpdates
      {
        get
        {
          return _sceneUpdates;
        }
        set
        {
          __isset.sceneUpdates = true;
          this._sceneUpdates = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sceneUpdates;
      }

      public ApplyUpdates_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  SceneUpdates = new MMIStandard.MSceneUpdate();
                  SceneUpdates.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ApplyUpdates_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SceneUpdates != null && __isset.sceneUpdates) {
            field.Name = "sceneUpdates";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SceneUpdates.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ApplyUpdates_args(");
        bool __first = true;
        if (SceneUpdates != null && __isset.sceneUpdates) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SceneUpdates: ");
          __sb.Append(SceneUpdates== null ? "<null>" : SceneUpdates.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ApplyUpdates_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ApplyUpdates_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ApplyUpdates_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ApplyUpdates_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ApplyManipulations_args : TBase
    {
      private List<MMIStandard.MSceneManipulation> _sceneManipulations;

      public List<MMIStandard.MSceneManipulation> SceneManipulations
      {
        get
        {
          return _sceneManipulations;
        }
        set
        {
          __isset.sceneManipulations = true;
          this._sceneManipulations = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sceneManipulations;
      }

      public ApplyManipulations_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    SceneManipulations = new List<MMIStandard.MSceneManipulation>();
                    TList _list198 = iprot.ReadListBegin();
                    for( int _i199 = 0; _i199 < _list198.Count; ++_i199)
                    {
                      MMIStandard.MSceneManipulation _elem200;
                      _elem200 = new MMIStandard.MSceneManipulation();
                      _elem200.Read(iprot);
                      SceneManipulations.Add(_elem200);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ApplyManipulations_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SceneManipulations != null && __isset.sceneManipulations) {
            field.Name = "sceneManipulations";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, SceneManipulations.Count));
              foreach (MMIStandard.MSceneManipulation _iter201 in SceneManipulations)
              {
                _iter201.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ApplyManipulations_args(");
        bool __first = true;
        if (SceneManipulations != null && __isset.sceneManipulations) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SceneManipulations: ");
          __sb.Append(SceneManipulations);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ApplyManipulations_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ApplyManipulations_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ApplyManipulations_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ApplyManipulations_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
