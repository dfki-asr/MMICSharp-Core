/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MSimulationResult : TBase
  {
    private List<MMIStandard.MConstraint> _Constraints;
    private List<MSimulationEvent> _Events;
    private List<MMIStandard.MSceneManipulation> _SceneManipulations;
    private List<MMIStandard.MDrawingCall> _DrawingCalls;
    private List<string> _LogData;

    public MMIStandard.MAvatarPostureValues Posture { get; set; }

    public List<MMIStandard.MConstraint> Constraints
    {
      get
      {
        return _Constraints;
      }
      set
      {
        __isset.Constraints = true;
        this._Constraints = value;
      }
    }

    public List<MSimulationEvent> Events
    {
      get
      {
        return _Events;
      }
      set
      {
        __isset.Events = true;
        this._Events = value;
      }
    }

    public List<MMIStandard.MSceneManipulation> SceneManipulations
    {
      get
      {
        return _SceneManipulations;
      }
      set
      {
        __isset.SceneManipulations = true;
        this._SceneManipulations = value;
      }
    }

    public List<MMIStandard.MDrawingCall> DrawingCalls
    {
      get
      {
        return _DrawingCalls;
      }
      set
      {
        __isset.DrawingCalls = true;
        this._DrawingCalls = value;
      }
    }

    public List<string> LogData
    {
      get
      {
        return _LogData;
      }
      set
      {
        __isset.LogData = true;
        this._LogData = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Constraints;
      public bool Events;
      public bool SceneManipulations;
      public bool DrawingCalls;
      public bool LogData;
    }

    public MSimulationResult() {
    }

    public MSimulationResult(MMIStandard.MAvatarPostureValues Posture) : this() {
      this.Posture = Posture;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Posture = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Posture = new MMIStandard.MAvatarPostureValues();
                Posture.Read(iprot);
                isset_Posture = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Constraints = new List<MMIStandard.MConstraint>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    MMIStandard.MConstraint _elem14;
                    _elem14 = new MMIStandard.MConstraint();
                    _elem14.Read(iprot);
                    Constraints.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Events = new List<MSimulationEvent>();
                  TList _list15 = iprot.ReadListBegin();
                  for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                  {
                    MSimulationEvent _elem17;
                    _elem17 = new MSimulationEvent();
                    _elem17.Read(iprot);
                    Events.Add(_elem17);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  SceneManipulations = new List<MMIStandard.MSceneManipulation>();
                  TList _list18 = iprot.ReadListBegin();
                  for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                  {
                    MMIStandard.MSceneManipulation _elem20;
                    _elem20 = new MMIStandard.MSceneManipulation();
                    _elem20.Read(iprot);
                    SceneManipulations.Add(_elem20);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  DrawingCalls = new List<MMIStandard.MDrawingCall>();
                  TList _list21 = iprot.ReadListBegin();
                  for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                  {
                    MMIStandard.MDrawingCall _elem23;
                    _elem23 = new MMIStandard.MDrawingCall();
                    _elem23.Read(iprot);
                    DrawingCalls.Add(_elem23);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  LogData = new List<string>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    string _elem26;
                    _elem26 = iprot.ReadString();
                    LogData.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Posture)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Posture not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MSimulationResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Posture == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Posture not set");
        field.Name = "Posture";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Posture.Write(oprot);
        oprot.WriteFieldEnd();
        if (Constraints != null && __isset.Constraints) {
          field.Name = "Constraints";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Constraints.Count));
            foreach (MMIStandard.MConstraint _iter27 in Constraints)
            {
              _iter27.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Events != null && __isset.Events) {
          field.Name = "Events";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Events.Count));
            foreach (MSimulationEvent _iter28 in Events)
            {
              _iter28.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SceneManipulations != null && __isset.SceneManipulations) {
          field.Name = "SceneManipulations";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SceneManipulations.Count));
            foreach (MMIStandard.MSceneManipulation _iter29 in SceneManipulations)
            {
              _iter29.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (DrawingCalls != null && __isset.DrawingCalls) {
          field.Name = "DrawingCalls";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, DrawingCalls.Count));
            foreach (MMIStandard.MDrawingCall _iter30 in DrawingCalls)
            {
              _iter30.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (LogData != null && __isset.LogData) {
          field.Name = "LogData";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, LogData.Count));
            foreach (string _iter31 in LogData)
            {
              oprot.WriteString(_iter31);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MSimulationResult(");
      __sb.Append(", Posture: ");
      __sb.Append(Posture== null ? "<null>" : Posture.ToString());
      if (Constraints != null && __isset.Constraints) {
        __sb.Append(", Constraints: ");
        __sb.Append(Constraints);
      }
      if (Events != null && __isset.Events) {
        __sb.Append(", Events: ");
        __sb.Append(Events);
      }
      if (SceneManipulations != null && __isset.SceneManipulations) {
        __sb.Append(", SceneManipulations: ");
        __sb.Append(SceneManipulations);
      }
      if (DrawingCalls != null && __isset.DrawingCalls) {
        __sb.Append(", DrawingCalls: ");
        __sb.Append(DrawingCalls);
      }
      if (LogData != null && __isset.LogData) {
        __sb.Append(", LogData: ");
        __sb.Append(LogData);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
