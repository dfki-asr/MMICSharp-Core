/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MSceneAccess {
    public interface ISync : MMIServiceBase.ISync {
      List<MMIStandard.MSceneObject> GetSceneObjects();
      MMIStandard.MSceneObject GetSceneObjectByID(string id);
      MMIStandard.MSceneObject GetSceneObjectByName(string name);
      List<MMIStandard.MSceneObject> GetSceneObjectsInRange(MMIStandard.MVector3 position, double range);
      List<MMIStandard.MCollider> GetColliders();
      MMIStandard.MCollider GetColliderById(string id);
      List<MMIStandard.MCollider> GetCollidersInRange(MMIStandard.MVector3 position, double range);
      List<MMIStandard.MMesh> GetMeshes();
      MMIStandard.MMesh GetMeshByID(string id);
      List<MMIStandard.MTransform> GetTransforms();
      MMIStandard.MTransform GetTransformByID(string id);
      List<MMIStandard.MAvatar> GetAvatars();
      MMIStandard.MAvatar GetAvatarByID(string id);
      MMIStandard.MAvatar GetAvatarByName(string name);
      List<MMIStandard.MAvatar> GetAvatarsInRange(MMIStandard.MVector3 position, double distance);
      double GetSimulationTime();
      MMIStandard.MSceneUpdate GetSceneChanges();
      MMIStandard.MSceneUpdate GetFullScene();
      MMIStandard.MNavigationMesh GetNavigationMesh();
      byte[] GetData(string fileFormat, string selection);
      List<MMIStandard.MAttachment> GetAttachments();
      List<MMIStandard.MAttachment> GetAttachmentsByID(string id);
      List<MMIStandard.MAttachment> GetAttachmentsByName(string name);
      List<MMIStandard.MAttachment> GetAttachmentsChildrenRecursive(string id);
      List<MMIStandard.MAttachment> GetAttachmentsParentsRecursive(string id);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_GetSceneObjects(AsyncCallback callback, object state);
      List<MMIStandard.MSceneObject> End_GetSceneObjects(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetSceneObjectByID(AsyncCallback callback, object state, string id);
      MMIStandard.MSceneObject End_GetSceneObjectByID(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetSceneObjectByName(AsyncCallback callback, object state, string name);
      MMIStandard.MSceneObject End_GetSceneObjectByName(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetSceneObjectsInRange(AsyncCallback callback, object state, MMIStandard.MVector3 position, double range);
      List<MMIStandard.MSceneObject> End_GetSceneObjectsInRange(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetColliders(AsyncCallback callback, object state);
      List<MMIStandard.MCollider> End_GetColliders(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetColliderById(AsyncCallback callback, object state, string id);
      MMIStandard.MCollider End_GetColliderById(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetCollidersInRange(AsyncCallback callback, object state, MMIStandard.MVector3 position, double range);
      List<MMIStandard.MCollider> End_GetCollidersInRange(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetMeshes(AsyncCallback callback, object state);
      List<MMIStandard.MMesh> End_GetMeshes(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetMeshByID(AsyncCallback callback, object state, string id);
      MMIStandard.MMesh End_GetMeshByID(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetTransforms(AsyncCallback callback, object state);
      List<MMIStandard.MTransform> End_GetTransforms(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetTransformByID(AsyncCallback callback, object state, string id);
      MMIStandard.MTransform End_GetTransformByID(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAvatars(AsyncCallback callback, object state);
      List<MMIStandard.MAvatar> End_GetAvatars(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAvatarByID(AsyncCallback callback, object state, string id);
      MMIStandard.MAvatar End_GetAvatarByID(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAvatarByName(AsyncCallback callback, object state, string name);
      MMIStandard.MAvatar End_GetAvatarByName(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAvatarsInRange(AsyncCallback callback, object state, MMIStandard.MVector3 position, double distance);
      List<MMIStandard.MAvatar> End_GetAvatarsInRange(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetSimulationTime(AsyncCallback callback, object state);
      double End_GetSimulationTime(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetSceneChanges(AsyncCallback callback, object state);
      MMIStandard.MSceneUpdate End_GetSceneChanges(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetFullScene(AsyncCallback callback, object state);
      MMIStandard.MSceneUpdate End_GetFullScene(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetNavigationMesh(AsyncCallback callback, object state);
      MMIStandard.MNavigationMesh End_GetNavigationMesh(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetData(AsyncCallback callback, object state, string fileFormat, string selection);
      byte[] End_GetData(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAttachments(AsyncCallback callback, object state);
      List<MMIStandard.MAttachment> End_GetAttachments(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAttachmentsByID(AsyncCallback callback, object state, string id);
      List<MMIStandard.MAttachment> End_GetAttachmentsByID(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAttachmentsByName(AsyncCallback callback, object state, string name);
      List<MMIStandard.MAttachment> End_GetAttachmentsByName(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAttachmentsChildrenRecursive(AsyncCallback callback, object state, string id);
      List<MMIStandard.MAttachment> End_GetAttachmentsChildrenRecursive(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAttachmentsParentsRecursive(AsyncCallback callback, object state, string id);
      List<MMIStandard.MAttachment> End_GetAttachmentsParentsRecursive(IAsyncResult asyncResult);
      #endif
    }

    public class Client : MMIServiceBase.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetSceneObjects(AsyncCallback callback, object state)
      {
        return send_GetSceneObjects(callback, state);
      }

      public List<MMIStandard.MSceneObject> End_GetSceneObjects(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSceneObjects();
      }

      #endif

      public List<MMIStandard.MSceneObject> GetSceneObjects()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetSceneObjects(null, null);
        return End_GetSceneObjects(asyncResult);

        #else
        send_GetSceneObjects();
        return recv_GetSceneObjects();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSceneObjects(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneObjects", TMessageType.Call, seqid_));
        GetSceneObjects_args args = new GetSceneObjects_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetSceneObjects()
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneObjects", TMessageType.Call, seqid_));
        GetSceneObjects_args args = new GetSceneObjects_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MSceneObject> recv_GetSceneObjects()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSceneObjects_result result = new GetSceneObjects_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSceneObjects failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetSceneObjectByID(AsyncCallback callback, object state, string id)
      {
        return send_GetSceneObjectByID(callback, state, id);
      }

      public MMIStandard.MSceneObject End_GetSceneObjectByID(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSceneObjectByID();
      }

      #endif

      public MMIStandard.MSceneObject GetSceneObjectByID(string id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetSceneObjectByID(null, null, id);
        return End_GetSceneObjectByID(asyncResult);

        #else
        send_GetSceneObjectByID(id);
        return recv_GetSceneObjectByID();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSceneObjectByID(AsyncCallback callback, object state, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneObjectByID", TMessageType.Call, seqid_));
        GetSceneObjectByID_args args = new GetSceneObjectByID_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetSceneObjectByID(string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneObjectByID", TMessageType.Call, seqid_));
        GetSceneObjectByID_args args = new GetSceneObjectByID_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MSceneObject recv_GetSceneObjectByID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSceneObjectByID_result result = new GetSceneObjectByID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSceneObjectByID failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetSceneObjectByName(AsyncCallback callback, object state, string name)
      {
        return send_GetSceneObjectByName(callback, state, name);
      }

      public MMIStandard.MSceneObject End_GetSceneObjectByName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSceneObjectByName();
      }

      #endif

      public MMIStandard.MSceneObject GetSceneObjectByName(string name)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetSceneObjectByName(null, null, name);
        return End_GetSceneObjectByName(asyncResult);

        #else
        send_GetSceneObjectByName(name);
        return recv_GetSceneObjectByName();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSceneObjectByName(AsyncCallback callback, object state, string name)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneObjectByName", TMessageType.Call, seqid_));
        GetSceneObjectByName_args args = new GetSceneObjectByName_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetSceneObjectByName(string name)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneObjectByName", TMessageType.Call, seqid_));
        GetSceneObjectByName_args args = new GetSceneObjectByName_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MSceneObject recv_GetSceneObjectByName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSceneObjectByName_result result = new GetSceneObjectByName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSceneObjectByName failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetSceneObjectsInRange(AsyncCallback callback, object state, MMIStandard.MVector3 position, double range)
      {
        return send_GetSceneObjectsInRange(callback, state, position, range);
      }

      public List<MMIStandard.MSceneObject> End_GetSceneObjectsInRange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSceneObjectsInRange();
      }

      #endif

      public List<MMIStandard.MSceneObject> GetSceneObjectsInRange(MMIStandard.MVector3 position, double range)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetSceneObjectsInRange(null, null, position, range);
        return End_GetSceneObjectsInRange(asyncResult);

        #else
        send_GetSceneObjectsInRange(position, range);
        return recv_GetSceneObjectsInRange();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSceneObjectsInRange(AsyncCallback callback, object state, MMIStandard.MVector3 position, double range)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneObjectsInRange", TMessageType.Call, seqid_));
        GetSceneObjectsInRange_args args = new GetSceneObjectsInRange_args();
        args.Position = position;
        args.Range = range;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetSceneObjectsInRange(MMIStandard.MVector3 position, double range)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneObjectsInRange", TMessageType.Call, seqid_));
        GetSceneObjectsInRange_args args = new GetSceneObjectsInRange_args();
        args.Position = position;
        args.Range = range;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MSceneObject> recv_GetSceneObjectsInRange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSceneObjectsInRange_result result = new GetSceneObjectsInRange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSceneObjectsInRange failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetColliders(AsyncCallback callback, object state)
      {
        return send_GetColliders(callback, state);
      }

      public List<MMIStandard.MCollider> End_GetColliders(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetColliders();
      }

      #endif

      public List<MMIStandard.MCollider> GetColliders()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetColliders(null, null);
        return End_GetColliders(asyncResult);

        #else
        send_GetColliders();
        return recv_GetColliders();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetColliders(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetColliders", TMessageType.Call, seqid_));
        GetColliders_args args = new GetColliders_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetColliders()
      {
        oprot_.WriteMessageBegin(new TMessage("GetColliders", TMessageType.Call, seqid_));
        GetColliders_args args = new GetColliders_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MCollider> recv_GetColliders()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetColliders_result result = new GetColliders_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetColliders failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetColliderById(AsyncCallback callback, object state, string id)
      {
        return send_GetColliderById(callback, state, id);
      }

      public MMIStandard.MCollider End_GetColliderById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetColliderById();
      }

      #endif

      public MMIStandard.MCollider GetColliderById(string id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetColliderById(null, null, id);
        return End_GetColliderById(asyncResult);

        #else
        send_GetColliderById(id);
        return recv_GetColliderById();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetColliderById(AsyncCallback callback, object state, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetColliderById", TMessageType.Call, seqid_));
        GetColliderById_args args = new GetColliderById_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetColliderById(string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetColliderById", TMessageType.Call, seqid_));
        GetColliderById_args args = new GetColliderById_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MCollider recv_GetColliderById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetColliderById_result result = new GetColliderById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetColliderById failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetCollidersInRange(AsyncCallback callback, object state, MMIStandard.MVector3 position, double range)
      {
        return send_GetCollidersInRange(callback, state, position, range);
      }

      public List<MMIStandard.MCollider> End_GetCollidersInRange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCollidersInRange();
      }

      #endif

      public List<MMIStandard.MCollider> GetCollidersInRange(MMIStandard.MVector3 position, double range)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetCollidersInRange(null, null, position, range);
        return End_GetCollidersInRange(asyncResult);

        #else
        send_GetCollidersInRange(position, range);
        return recv_GetCollidersInRange();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCollidersInRange(AsyncCallback callback, object state, MMIStandard.MVector3 position, double range)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCollidersInRange", TMessageType.Call, seqid_));
        GetCollidersInRange_args args = new GetCollidersInRange_args();
        args.Position = position;
        args.Range = range;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetCollidersInRange(MMIStandard.MVector3 position, double range)
      {
        oprot_.WriteMessageBegin(new TMessage("GetCollidersInRange", TMessageType.Call, seqid_));
        GetCollidersInRange_args args = new GetCollidersInRange_args();
        args.Position = position;
        args.Range = range;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MCollider> recv_GetCollidersInRange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCollidersInRange_result result = new GetCollidersInRange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCollidersInRange failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetMeshes(AsyncCallback callback, object state)
      {
        return send_GetMeshes(callback, state);
      }

      public List<MMIStandard.MMesh> End_GetMeshes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMeshes();
      }

      #endif

      public List<MMIStandard.MMesh> GetMeshes()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetMeshes(null, null);
        return End_GetMeshes(asyncResult);

        #else
        send_GetMeshes();
        return recv_GetMeshes();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMeshes(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetMeshes", TMessageType.Call, seqid_));
        GetMeshes_args args = new GetMeshes_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetMeshes()
      {
        oprot_.WriteMessageBegin(new TMessage("GetMeshes", TMessageType.Call, seqid_));
        GetMeshes_args args = new GetMeshes_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MMesh> recv_GetMeshes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMeshes_result result = new GetMeshes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMeshes failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetMeshByID(AsyncCallback callback, object state, string id)
      {
        return send_GetMeshByID(callback, state, id);
      }

      public MMIStandard.MMesh End_GetMeshByID(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMeshByID();
      }

      #endif

      public MMIStandard.MMesh GetMeshByID(string id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetMeshByID(null, null, id);
        return End_GetMeshByID(asyncResult);

        #else
        send_GetMeshByID(id);
        return recv_GetMeshByID();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMeshByID(AsyncCallback callback, object state, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetMeshByID", TMessageType.Call, seqid_));
        GetMeshByID_args args = new GetMeshByID_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetMeshByID(string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetMeshByID", TMessageType.Call, seqid_));
        GetMeshByID_args args = new GetMeshByID_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MMesh recv_GetMeshByID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMeshByID_result result = new GetMeshByID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMeshByID failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetTransforms(AsyncCallback callback, object state)
      {
        return send_GetTransforms(callback, state);
      }

      public List<MMIStandard.MTransform> End_GetTransforms(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTransforms();
      }

      #endif

      public List<MMIStandard.MTransform> GetTransforms()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetTransforms(null, null);
        return End_GetTransforms(asyncResult);

        #else
        send_GetTransforms();
        return recv_GetTransforms();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTransforms(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetTransforms", TMessageType.Call, seqid_));
        GetTransforms_args args = new GetTransforms_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetTransforms()
      {
        oprot_.WriteMessageBegin(new TMessage("GetTransforms", TMessageType.Call, seqid_));
        GetTransforms_args args = new GetTransforms_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MTransform> recv_GetTransforms()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTransforms_result result = new GetTransforms_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTransforms failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetTransformByID(AsyncCallback callback, object state, string id)
      {
        return send_GetTransformByID(callback, state, id);
      }

      public MMIStandard.MTransform End_GetTransformByID(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTransformByID();
      }

      #endif

      public MMIStandard.MTransform GetTransformByID(string id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetTransformByID(null, null, id);
        return End_GetTransformByID(asyncResult);

        #else
        send_GetTransformByID(id);
        return recv_GetTransformByID();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTransformByID(AsyncCallback callback, object state, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetTransformByID", TMessageType.Call, seqid_));
        GetTransformByID_args args = new GetTransformByID_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetTransformByID(string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetTransformByID", TMessageType.Call, seqid_));
        GetTransformByID_args args = new GetTransformByID_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MTransform recv_GetTransformByID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTransformByID_result result = new GetTransformByID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTransformByID failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAvatars(AsyncCallback callback, object state)
      {
        return send_GetAvatars(callback, state);
      }

      public List<MMIStandard.MAvatar> End_GetAvatars(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAvatars();
      }

      #endif

      public List<MMIStandard.MAvatar> GetAvatars()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAvatars(null, null);
        return End_GetAvatars(asyncResult);

        #else
        send_GetAvatars();
        return recv_GetAvatars();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAvatars(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvatars", TMessageType.Call, seqid_));
        GetAvatars_args args = new GetAvatars_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAvatars()
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvatars", TMessageType.Call, seqid_));
        GetAvatars_args args = new GetAvatars_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MAvatar> recv_GetAvatars()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAvatars_result result = new GetAvatars_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAvatars failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAvatarByID(AsyncCallback callback, object state, string id)
      {
        return send_GetAvatarByID(callback, state, id);
      }

      public MMIStandard.MAvatar End_GetAvatarByID(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAvatarByID();
      }

      #endif

      public MMIStandard.MAvatar GetAvatarByID(string id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAvatarByID(null, null, id);
        return End_GetAvatarByID(asyncResult);

        #else
        send_GetAvatarByID(id);
        return recv_GetAvatarByID();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAvatarByID(AsyncCallback callback, object state, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvatarByID", TMessageType.Call, seqid_));
        GetAvatarByID_args args = new GetAvatarByID_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAvatarByID(string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvatarByID", TMessageType.Call, seqid_));
        GetAvatarByID_args args = new GetAvatarByID_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MAvatar recv_GetAvatarByID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAvatarByID_result result = new GetAvatarByID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAvatarByID failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAvatarByName(AsyncCallback callback, object state, string name)
      {
        return send_GetAvatarByName(callback, state, name);
      }

      public MMIStandard.MAvatar End_GetAvatarByName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAvatarByName();
      }

      #endif

      public MMIStandard.MAvatar GetAvatarByName(string name)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAvatarByName(null, null, name);
        return End_GetAvatarByName(asyncResult);

        #else
        send_GetAvatarByName(name);
        return recv_GetAvatarByName();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAvatarByName(AsyncCallback callback, object state, string name)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvatarByName", TMessageType.Call, seqid_));
        GetAvatarByName_args args = new GetAvatarByName_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAvatarByName(string name)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvatarByName", TMessageType.Call, seqid_));
        GetAvatarByName_args args = new GetAvatarByName_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MAvatar recv_GetAvatarByName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAvatarByName_result result = new GetAvatarByName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAvatarByName failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAvatarsInRange(AsyncCallback callback, object state, MMIStandard.MVector3 position, double distance)
      {
        return send_GetAvatarsInRange(callback, state, position, distance);
      }

      public List<MMIStandard.MAvatar> End_GetAvatarsInRange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAvatarsInRange();
      }

      #endif

      public List<MMIStandard.MAvatar> GetAvatarsInRange(MMIStandard.MVector3 position, double distance)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAvatarsInRange(null, null, position, distance);
        return End_GetAvatarsInRange(asyncResult);

        #else
        send_GetAvatarsInRange(position, distance);
        return recv_GetAvatarsInRange();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAvatarsInRange(AsyncCallback callback, object state, MMIStandard.MVector3 position, double distance)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvatarsInRange", TMessageType.Call, seqid_));
        GetAvatarsInRange_args args = new GetAvatarsInRange_args();
        args.Position = position;
        args.Distance = distance;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAvatarsInRange(MMIStandard.MVector3 position, double distance)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvatarsInRange", TMessageType.Call, seqid_));
        GetAvatarsInRange_args args = new GetAvatarsInRange_args();
        args.Position = position;
        args.Distance = distance;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MAvatar> recv_GetAvatarsInRange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAvatarsInRange_result result = new GetAvatarsInRange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAvatarsInRange failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetSimulationTime(AsyncCallback callback, object state)
      {
        return send_GetSimulationTime(callback, state);
      }

      public double End_GetSimulationTime(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSimulationTime();
      }

      #endif

      public double GetSimulationTime()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetSimulationTime(null, null);
        return End_GetSimulationTime(asyncResult);

        #else
        send_GetSimulationTime();
        return recv_GetSimulationTime();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSimulationTime(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSimulationTime", TMessageType.Call, seqid_));
        GetSimulationTime_args args = new GetSimulationTime_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetSimulationTime()
      {
        oprot_.WriteMessageBegin(new TMessage("GetSimulationTime", TMessageType.Call, seqid_));
        GetSimulationTime_args args = new GetSimulationTime_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public double recv_GetSimulationTime()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSimulationTime_result result = new GetSimulationTime_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSimulationTime failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetSceneChanges(AsyncCallback callback, object state)
      {
        return send_GetSceneChanges(callback, state);
      }

      public MMIStandard.MSceneUpdate End_GetSceneChanges(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSceneChanges();
      }

      #endif

      public MMIStandard.MSceneUpdate GetSceneChanges()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetSceneChanges(null, null);
        return End_GetSceneChanges(asyncResult);

        #else
        send_GetSceneChanges();
        return recv_GetSceneChanges();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSceneChanges(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneChanges", TMessageType.Call, seqid_));
        GetSceneChanges_args args = new GetSceneChanges_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetSceneChanges()
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneChanges", TMessageType.Call, seqid_));
        GetSceneChanges_args args = new GetSceneChanges_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MSceneUpdate recv_GetSceneChanges()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSceneChanges_result result = new GetSceneChanges_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSceneChanges failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetFullScene(AsyncCallback callback, object state)
      {
        return send_GetFullScene(callback, state);
      }

      public MMIStandard.MSceneUpdate End_GetFullScene(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFullScene();
      }

      #endif

      public MMIStandard.MSceneUpdate GetFullScene()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetFullScene(null, null);
        return End_GetFullScene(asyncResult);

        #else
        send_GetFullScene();
        return recv_GetFullScene();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFullScene(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetFullScene", TMessageType.Call, seqid_));
        GetFullScene_args args = new GetFullScene_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetFullScene()
      {
        oprot_.WriteMessageBegin(new TMessage("GetFullScene", TMessageType.Call, seqid_));
        GetFullScene_args args = new GetFullScene_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MSceneUpdate recv_GetFullScene()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFullScene_result result = new GetFullScene_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFullScene failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetNavigationMesh(AsyncCallback callback, object state)
      {
        return send_GetNavigationMesh(callback, state);
      }

      public MMIStandard.MNavigationMesh End_GetNavigationMesh(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetNavigationMesh();
      }

      #endif

      public MMIStandard.MNavigationMesh GetNavigationMesh()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetNavigationMesh(null, null);
        return End_GetNavigationMesh(asyncResult);

        #else
        send_GetNavigationMesh();
        return recv_GetNavigationMesh();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetNavigationMesh(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetNavigationMesh", TMessageType.Call, seqid_));
        GetNavigationMesh_args args = new GetNavigationMesh_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetNavigationMesh()
      {
        oprot_.WriteMessageBegin(new TMessage("GetNavigationMesh", TMessageType.Call, seqid_));
        GetNavigationMesh_args args = new GetNavigationMesh_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MNavigationMesh recv_GetNavigationMesh()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNavigationMesh_result result = new GetNavigationMesh_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNavigationMesh failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetData(AsyncCallback callback, object state, string fileFormat, string selection)
      {
        return send_GetData(callback, state, fileFormat, selection);
      }

      public byte[] End_GetData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetData();
      }

      #endif

      public byte[] GetData(string fileFormat, string selection)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetData(null, null, fileFormat, selection);
        return End_GetData(asyncResult);

        #else
        send_GetData(fileFormat, selection);
        return recv_GetData();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetData(AsyncCallback callback, object state, string fileFormat, string selection)
      {
        oprot_.WriteMessageBegin(new TMessage("GetData", TMessageType.Call, seqid_));
        GetData_args args = new GetData_args();
        args.FileFormat = fileFormat;
        args.Selection = selection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetData(string fileFormat, string selection)
      {
        oprot_.WriteMessageBegin(new TMessage("GetData", TMessageType.Call, seqid_));
        GetData_args args = new GetData_args();
        args.FileFormat = fileFormat;
        args.Selection = selection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public byte[] recv_GetData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetData_result result = new GetData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetData failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAttachments(AsyncCallback callback, object state)
      {
        return send_GetAttachments(callback, state);
      }

      public List<MMIStandard.MAttachment> End_GetAttachments(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAttachments();
      }

      #endif

      public List<MMIStandard.MAttachment> GetAttachments()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAttachments(null, null);
        return End_GetAttachments(asyncResult);

        #else
        send_GetAttachments();
        return recv_GetAttachments();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAttachments(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAttachments", TMessageType.Call, seqid_));
        GetAttachments_args args = new GetAttachments_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAttachments()
      {
        oprot_.WriteMessageBegin(new TMessage("GetAttachments", TMessageType.Call, seqid_));
        GetAttachments_args args = new GetAttachments_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MAttachment> recv_GetAttachments()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAttachments_result result = new GetAttachments_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAttachments failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAttachmentsByID(AsyncCallback callback, object state, string id)
      {
        return send_GetAttachmentsByID(callback, state, id);
      }

      public List<MMIStandard.MAttachment> End_GetAttachmentsByID(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAttachmentsByID();
      }

      #endif

      public List<MMIStandard.MAttachment> GetAttachmentsByID(string id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAttachmentsByID(null, null, id);
        return End_GetAttachmentsByID(asyncResult);

        #else
        send_GetAttachmentsByID(id);
        return recv_GetAttachmentsByID();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAttachmentsByID(AsyncCallback callback, object state, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAttachmentsByID", TMessageType.Call, seqid_));
        GetAttachmentsByID_args args = new GetAttachmentsByID_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAttachmentsByID(string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAttachmentsByID", TMessageType.Call, seqid_));
        GetAttachmentsByID_args args = new GetAttachmentsByID_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MAttachment> recv_GetAttachmentsByID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAttachmentsByID_result result = new GetAttachmentsByID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAttachmentsByID failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAttachmentsByName(AsyncCallback callback, object state, string name)
      {
        return send_GetAttachmentsByName(callback, state, name);
      }

      public List<MMIStandard.MAttachment> End_GetAttachmentsByName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAttachmentsByName();
      }

      #endif

      public List<MMIStandard.MAttachment> GetAttachmentsByName(string name)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAttachmentsByName(null, null, name);
        return End_GetAttachmentsByName(asyncResult);

        #else
        send_GetAttachmentsByName(name);
        return recv_GetAttachmentsByName();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAttachmentsByName(AsyncCallback callback, object state, string name)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAttachmentsByName", TMessageType.Call, seqid_));
        GetAttachmentsByName_args args = new GetAttachmentsByName_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAttachmentsByName(string name)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAttachmentsByName", TMessageType.Call, seqid_));
        GetAttachmentsByName_args args = new GetAttachmentsByName_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MAttachment> recv_GetAttachmentsByName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAttachmentsByName_result result = new GetAttachmentsByName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAttachmentsByName failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAttachmentsChildrenRecursive(AsyncCallback callback, object state, string id)
      {
        return send_GetAttachmentsChildrenRecursive(callback, state, id);
      }

      public List<MMIStandard.MAttachment> End_GetAttachmentsChildrenRecursive(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAttachmentsChildrenRecursive();
      }

      #endif

      public List<MMIStandard.MAttachment> GetAttachmentsChildrenRecursive(string id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAttachmentsChildrenRecursive(null, null, id);
        return End_GetAttachmentsChildrenRecursive(asyncResult);

        #else
        send_GetAttachmentsChildrenRecursive(id);
        return recv_GetAttachmentsChildrenRecursive();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAttachmentsChildrenRecursive(AsyncCallback callback, object state, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAttachmentsChildrenRecursive", TMessageType.Call, seqid_));
        GetAttachmentsChildrenRecursive_args args = new GetAttachmentsChildrenRecursive_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAttachmentsChildrenRecursive(string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAttachmentsChildrenRecursive", TMessageType.Call, seqid_));
        GetAttachmentsChildrenRecursive_args args = new GetAttachmentsChildrenRecursive_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MAttachment> recv_GetAttachmentsChildrenRecursive()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAttachmentsChildrenRecursive_result result = new GetAttachmentsChildrenRecursive_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAttachmentsChildrenRecursive failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAttachmentsParentsRecursive(AsyncCallback callback, object state, string id)
      {
        return send_GetAttachmentsParentsRecursive(callback, state, id);
      }

      public List<MMIStandard.MAttachment> End_GetAttachmentsParentsRecursive(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAttachmentsParentsRecursive();
      }

      #endif

      public List<MMIStandard.MAttachment> GetAttachmentsParentsRecursive(string id)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAttachmentsParentsRecursive(null, null, id);
        return End_GetAttachmentsParentsRecursive(asyncResult);

        #else
        send_GetAttachmentsParentsRecursive(id);
        return recv_GetAttachmentsParentsRecursive();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAttachmentsParentsRecursive(AsyncCallback callback, object state, string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAttachmentsParentsRecursive", TMessageType.Call, seqid_));
        GetAttachmentsParentsRecursive_args args = new GetAttachmentsParentsRecursive_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAttachmentsParentsRecursive(string id)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAttachmentsParentsRecursive", TMessageType.Call, seqid_));
        GetAttachmentsParentsRecursive_args args = new GetAttachmentsParentsRecursive_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MAttachment> recv_GetAttachmentsParentsRecursive()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAttachmentsParentsRecursive_result result = new GetAttachmentsParentsRecursive_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAttachmentsParentsRecursive failed: unknown result");
      }

    }
    public class Processor : MMIServiceBase.Processor, TProcessor {
      public Processor(ISync iface) : base(iface)
      {
        iface_ = iface;
        processMap_["GetSceneObjects"] = GetSceneObjects_Process;
        processMap_["GetSceneObjectByID"] = GetSceneObjectByID_Process;
        processMap_["GetSceneObjectByName"] = GetSceneObjectByName_Process;
        processMap_["GetSceneObjectsInRange"] = GetSceneObjectsInRange_Process;
        processMap_["GetColliders"] = GetColliders_Process;
        processMap_["GetColliderById"] = GetColliderById_Process;
        processMap_["GetCollidersInRange"] = GetCollidersInRange_Process;
        processMap_["GetMeshes"] = GetMeshes_Process;
        processMap_["GetMeshByID"] = GetMeshByID_Process;
        processMap_["GetTransforms"] = GetTransforms_Process;
        processMap_["GetTransformByID"] = GetTransformByID_Process;
        processMap_["GetAvatars"] = GetAvatars_Process;
        processMap_["GetAvatarByID"] = GetAvatarByID_Process;
        processMap_["GetAvatarByName"] = GetAvatarByName_Process;
        processMap_["GetAvatarsInRange"] = GetAvatarsInRange_Process;
        processMap_["GetSimulationTime"] = GetSimulationTime_Process;
        processMap_["GetSceneChanges"] = GetSceneChanges_Process;
        processMap_["GetFullScene"] = GetFullScene_Process;
        processMap_["GetNavigationMesh"] = GetNavigationMesh_Process;
        processMap_["GetData"] = GetData_Process;
        processMap_["GetAttachments"] = GetAttachments_Process;
        processMap_["GetAttachmentsByID"] = GetAttachmentsByID_Process;
        processMap_["GetAttachmentsByName"] = GetAttachmentsByName_Process;
        processMap_["GetAttachmentsChildrenRecursive"] = GetAttachmentsChildrenRecursive_Process;
        processMap_["GetAttachmentsParentsRecursive"] = GetAttachmentsParentsRecursive_Process;
      }

      private ISync iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetSceneObjects_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSceneObjects_args args = new GetSceneObjects_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSceneObjects_result result = new GetSceneObjects_result();
        try
        {
          result.Success = iface_.GetSceneObjects();
          oprot.WriteMessageBegin(new TMessage("GetSceneObjects", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetSceneObjects", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSceneObjectByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSceneObjectByID_args args = new GetSceneObjectByID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSceneObjectByID_result result = new GetSceneObjectByID_result();
        try
        {
          result.Success = iface_.GetSceneObjectByID(args.Id);
          oprot.WriteMessageBegin(new TMessage("GetSceneObjectByID", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetSceneObjectByID", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSceneObjectByName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSceneObjectByName_args args = new GetSceneObjectByName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSceneObjectByName_result result = new GetSceneObjectByName_result();
        try
        {
          result.Success = iface_.GetSceneObjectByName(args.Name);
          oprot.WriteMessageBegin(new TMessage("GetSceneObjectByName", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetSceneObjectByName", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSceneObjectsInRange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSceneObjectsInRange_args args = new GetSceneObjectsInRange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSceneObjectsInRange_result result = new GetSceneObjectsInRange_result();
        try
        {
          result.Success = iface_.GetSceneObjectsInRange(args.Position, args.Range);
          oprot.WriteMessageBegin(new TMessage("GetSceneObjectsInRange", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetSceneObjectsInRange", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetColliders_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetColliders_args args = new GetColliders_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetColliders_result result = new GetColliders_result();
        try
        {
          result.Success = iface_.GetColliders();
          oprot.WriteMessageBegin(new TMessage("GetColliders", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetColliders", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetColliderById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetColliderById_args args = new GetColliderById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetColliderById_result result = new GetColliderById_result();
        try
        {
          result.Success = iface_.GetColliderById(args.Id);
          oprot.WriteMessageBegin(new TMessage("GetColliderById", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetColliderById", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCollidersInRange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCollidersInRange_args args = new GetCollidersInRange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCollidersInRange_result result = new GetCollidersInRange_result();
        try
        {
          result.Success = iface_.GetCollidersInRange(args.Position, args.Range);
          oprot.WriteMessageBegin(new TMessage("GetCollidersInRange", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetCollidersInRange", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetMeshes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMeshes_args args = new GetMeshes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMeshes_result result = new GetMeshes_result();
        try
        {
          result.Success = iface_.GetMeshes();
          oprot.WriteMessageBegin(new TMessage("GetMeshes", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetMeshes", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetMeshByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMeshByID_args args = new GetMeshByID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMeshByID_result result = new GetMeshByID_result();
        try
        {
          result.Success = iface_.GetMeshByID(args.Id);
          oprot.WriteMessageBegin(new TMessage("GetMeshByID", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetMeshByID", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTransforms_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTransforms_args args = new GetTransforms_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTransforms_result result = new GetTransforms_result();
        try
        {
          result.Success = iface_.GetTransforms();
          oprot.WriteMessageBegin(new TMessage("GetTransforms", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetTransforms", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTransformByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTransformByID_args args = new GetTransformByID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTransformByID_result result = new GetTransformByID_result();
        try
        {
          result.Success = iface_.GetTransformByID(args.Id);
          oprot.WriteMessageBegin(new TMessage("GetTransformByID", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetTransformByID", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAvatars_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAvatars_args args = new GetAvatars_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAvatars_result result = new GetAvatars_result();
        try
        {
          result.Success = iface_.GetAvatars();
          oprot.WriteMessageBegin(new TMessage("GetAvatars", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAvatars", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAvatarByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAvatarByID_args args = new GetAvatarByID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAvatarByID_result result = new GetAvatarByID_result();
        try
        {
          result.Success = iface_.GetAvatarByID(args.Id);
          oprot.WriteMessageBegin(new TMessage("GetAvatarByID", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAvatarByID", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAvatarByName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAvatarByName_args args = new GetAvatarByName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAvatarByName_result result = new GetAvatarByName_result();
        try
        {
          result.Success = iface_.GetAvatarByName(args.Name);
          oprot.WriteMessageBegin(new TMessage("GetAvatarByName", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAvatarByName", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAvatarsInRange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAvatarsInRange_args args = new GetAvatarsInRange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAvatarsInRange_result result = new GetAvatarsInRange_result();
        try
        {
          result.Success = iface_.GetAvatarsInRange(args.Position, args.Distance);
          oprot.WriteMessageBegin(new TMessage("GetAvatarsInRange", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAvatarsInRange", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSimulationTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSimulationTime_args args = new GetSimulationTime_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSimulationTime_result result = new GetSimulationTime_result();
        try
        {
          result.Success = iface_.GetSimulationTime();
          oprot.WriteMessageBegin(new TMessage("GetSimulationTime", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetSimulationTime", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSceneChanges_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSceneChanges_args args = new GetSceneChanges_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSceneChanges_result result = new GetSceneChanges_result();
        try
        {
          result.Success = iface_.GetSceneChanges();
          oprot.WriteMessageBegin(new TMessage("GetSceneChanges", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetSceneChanges", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFullScene_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFullScene_args args = new GetFullScene_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFullScene_result result = new GetFullScene_result();
        try
        {
          result.Success = iface_.GetFullScene();
          oprot.WriteMessageBegin(new TMessage("GetFullScene", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetFullScene", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNavigationMesh_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNavigationMesh_args args = new GetNavigationMesh_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNavigationMesh_result result = new GetNavigationMesh_result();
        try
        {
          result.Success = iface_.GetNavigationMesh();
          oprot.WriteMessageBegin(new TMessage("GetNavigationMesh", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetNavigationMesh", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetData_args args = new GetData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetData_result result = new GetData_result();
        try
        {
          result.Success = iface_.GetData(args.FileFormat, args.Selection);
          oprot.WriteMessageBegin(new TMessage("GetData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAttachments_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAttachments_args args = new GetAttachments_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAttachments_result result = new GetAttachments_result();
        try
        {
          result.Success = iface_.GetAttachments();
          oprot.WriteMessageBegin(new TMessage("GetAttachments", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAttachments", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAttachmentsByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAttachmentsByID_args args = new GetAttachmentsByID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAttachmentsByID_result result = new GetAttachmentsByID_result();
        try
        {
          result.Success = iface_.GetAttachmentsByID(args.Id);
          oprot.WriteMessageBegin(new TMessage("GetAttachmentsByID", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAttachmentsByID", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAttachmentsByName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAttachmentsByName_args args = new GetAttachmentsByName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAttachmentsByName_result result = new GetAttachmentsByName_result();
        try
        {
          result.Success = iface_.GetAttachmentsByName(args.Name);
          oprot.WriteMessageBegin(new TMessage("GetAttachmentsByName", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAttachmentsByName", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAttachmentsChildrenRecursive_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAttachmentsChildrenRecursive_args args = new GetAttachmentsChildrenRecursive_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAttachmentsChildrenRecursive_result result = new GetAttachmentsChildrenRecursive_result();
        try
        {
          result.Success = iface_.GetAttachmentsChildrenRecursive(args.Id);
          oprot.WriteMessageBegin(new TMessage("GetAttachmentsChildrenRecursive", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAttachmentsChildrenRecursive", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAttachmentsParentsRecursive_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAttachmentsParentsRecursive_args args = new GetAttachmentsParentsRecursive_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAttachmentsParentsRecursive_result result = new GetAttachmentsParentsRecursive_result();
        try
        {
          result.Success = iface_.GetAttachmentsParentsRecursive(args.Id);
          oprot.WriteMessageBegin(new TMessage("GetAttachmentsParentsRecursive", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAttachmentsParentsRecursive", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneObjects_args : TBase
    {

      public GetSceneObjects_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneObjects_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneObjects_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneObjects_result : TBase
    {
      private List<MMIStandard.MSceneObject> _success;

      public List<MMIStandard.MSceneObject> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSceneObjects_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MSceneObject>();
                    TList _list38 = iprot.ReadListBegin();
                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)
                    {
                      MMIStandard.MSceneObject _elem40;
                      _elem40 = new MMIStandard.MSceneObject();
                      _elem40.Read(iprot);
                      Success.Add(_elem40);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneObjects_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MSceneObject _iter41 in Success)
                {
                  _iter41.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneObjects_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneObjectByID_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public GetSceneObjectByID_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneObjectByID_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneObjectByID_args(");
        bool __first = true;
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneObjectByID_result : TBase
    {
      private MMIStandard.MSceneObject _success;

      public MMIStandard.MSceneObject Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSceneObjectByID_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MSceneObject();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneObjectByID_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneObjectByID_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneObjectByName_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public GetSceneObjectByName_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneObjectByName_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneObjectByName_args(");
        bool __first = true;
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneObjectByName_result : TBase
    {
      private MMIStandard.MSceneObject _success;

      public MMIStandard.MSceneObject Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSceneObjectByName_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MSceneObject();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneObjectByName_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneObjectByName_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneObjectsInRange_args : TBase
    {
      private MMIStandard.MVector3 _position;
      private double _range;

      public MMIStandard.MVector3 Position
      {
        get
        {
          return _position;
        }
        set
        {
          __isset.position = true;
          this._position = value;
        }
      }

      public double Range
      {
        get
        {
          return _range;
        }
        set
        {
          __isset.range = true;
          this._range = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool position;
        public bool range;
      }

      public GetSceneObjectsInRange_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Position = new MMIStandard.MVector3();
                  Position.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Double) {
                  Range = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneObjectsInRange_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Position != null && __isset.position) {
            field.Name = "position";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Position.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.range) {
            field.Name = "range";
            field.Type = TType.Double;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Range);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneObjectsInRange_args(");
        bool __first = true;
        if (Position != null && __isset.position) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Position: ");
          __sb.Append(Position== null ? "<null>" : Position.ToString());
        }
        if (__isset.range) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Range: ");
          __sb.Append(Range);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneObjectsInRange_result : TBase
    {
      private List<MMIStandard.MSceneObject> _success;

      public List<MMIStandard.MSceneObject> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSceneObjectsInRange_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MSceneObject>();
                    TList _list42 = iprot.ReadListBegin();
                    for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                    {
                      MMIStandard.MSceneObject _elem44;
                      _elem44 = new MMIStandard.MSceneObject();
                      _elem44.Read(iprot);
                      Success.Add(_elem44);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneObjectsInRange_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MSceneObject _iter45 in Success)
                {
                  _iter45.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneObjectsInRange_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetColliders_args : TBase
    {

      public GetColliders_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetColliders_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetColliders_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetColliders_result : TBase
    {
      private List<MMIStandard.MCollider> _success;

      public List<MMIStandard.MCollider> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetColliders_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MCollider>();
                    TList _list46 = iprot.ReadListBegin();
                    for( int _i47 = 0; _i47 < _list46.Count; ++_i47)
                    {
                      MMIStandard.MCollider _elem48;
                      _elem48 = new MMIStandard.MCollider();
                      _elem48.Read(iprot);
                      Success.Add(_elem48);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetColliders_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MCollider _iter49 in Success)
                {
                  _iter49.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetColliders_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetColliderById_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public GetColliderById_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetColliderById_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetColliderById_args(");
        bool __first = true;
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetColliderById_result : TBase
    {
      private MMIStandard.MCollider _success;

      public MMIStandard.MCollider Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetColliderById_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MCollider();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetColliderById_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetColliderById_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCollidersInRange_args : TBase
    {
      private MMIStandard.MVector3 _position;
      private double _range;

      public MMIStandard.MVector3 Position
      {
        get
        {
          return _position;
        }
        set
        {
          __isset.position = true;
          this._position = value;
        }
      }

      public double Range
      {
        get
        {
          return _range;
        }
        set
        {
          __isset.range = true;
          this._range = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool position;
        public bool range;
      }

      public GetCollidersInRange_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Position = new MMIStandard.MVector3();
                  Position.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Double) {
                  Range = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCollidersInRange_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Position != null && __isset.position) {
            field.Name = "position";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Position.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.range) {
            field.Name = "range";
            field.Type = TType.Double;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Range);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCollidersInRange_args(");
        bool __first = true;
        if (Position != null && __isset.position) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Position: ");
          __sb.Append(Position== null ? "<null>" : Position.ToString());
        }
        if (__isset.range) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Range: ");
          __sb.Append(Range);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCollidersInRange_result : TBase
    {
      private List<MMIStandard.MCollider> _success;

      public List<MMIStandard.MCollider> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetCollidersInRange_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MCollider>();
                    TList _list50 = iprot.ReadListBegin();
                    for( int _i51 = 0; _i51 < _list50.Count; ++_i51)
                    {
                      MMIStandard.MCollider _elem52;
                      _elem52 = new MMIStandard.MCollider();
                      _elem52.Read(iprot);
                      Success.Add(_elem52);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCollidersInRange_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MCollider _iter53 in Success)
                {
                  _iter53.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCollidersInRange_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMeshes_args : TBase
    {

      public GetMeshes_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMeshes_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMeshes_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMeshes_result : TBase
    {
      private List<MMIStandard.MMesh> _success;

      public List<MMIStandard.MMesh> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetMeshes_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MMesh>();
                    TList _list54 = iprot.ReadListBegin();
                    for( int _i55 = 0; _i55 < _list54.Count; ++_i55)
                    {
                      MMIStandard.MMesh _elem56;
                      _elem56 = new MMIStandard.MMesh();
                      _elem56.Read(iprot);
                      Success.Add(_elem56);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMeshes_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MMesh _iter57 in Success)
                {
                  _iter57.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMeshes_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMeshByID_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public GetMeshByID_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMeshByID_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMeshByID_args(");
        bool __first = true;
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMeshByID_result : TBase
    {
      private MMIStandard.MMesh _success;

      public MMIStandard.MMesh Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetMeshByID_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MMesh();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMeshByID_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMeshByID_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTransforms_args : TBase
    {

      public GetTransforms_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetTransforms_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetTransforms_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTransforms_result : TBase
    {
      private List<MMIStandard.MTransform> _success;

      public List<MMIStandard.MTransform> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTransforms_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MTransform>();
                    TList _list58 = iprot.ReadListBegin();
                    for( int _i59 = 0; _i59 < _list58.Count; ++_i59)
                    {
                      MMIStandard.MTransform _elem60;
                      _elem60 = new MMIStandard.MTransform();
                      _elem60.Read(iprot);
                      Success.Add(_elem60);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetTransforms_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MTransform _iter61 in Success)
                {
                  _iter61.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetTransforms_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTransformByID_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public GetTransformByID_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetTransformByID_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetTransformByID_args(");
        bool __first = true;
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTransformByID_result : TBase
    {
      private MMIStandard.MTransform _success;

      public MMIStandard.MTransform Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTransformByID_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MTransform();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetTransformByID_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetTransformByID_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvatars_args : TBase
    {

      public GetAvatars_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvatars_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvatars_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvatars_result : TBase
    {
      private List<MMIStandard.MAvatar> _success;

      public List<MMIStandard.MAvatar> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAvatars_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MAvatar>();
                    TList _list62 = iprot.ReadListBegin();
                    for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                    {
                      MMIStandard.MAvatar _elem64;
                      _elem64 = new MMIStandard.MAvatar();
                      _elem64.Read(iprot);
                      Success.Add(_elem64);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvatars_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MAvatar _iter65 in Success)
                {
                  _iter65.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvatars_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvatarByID_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public GetAvatarByID_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvatarByID_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvatarByID_args(");
        bool __first = true;
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvatarByID_result : TBase
    {
      private MMIStandard.MAvatar _success;

      public MMIStandard.MAvatar Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAvatarByID_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MAvatar();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvatarByID_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvatarByID_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvatarByName_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public GetAvatarByName_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvatarByName_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvatarByName_args(");
        bool __first = true;
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvatarByName_result : TBase
    {
      private MMIStandard.MAvatar _success;

      public MMIStandard.MAvatar Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAvatarByName_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MAvatar();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvatarByName_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvatarByName_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvatarsInRange_args : TBase
    {
      private MMIStandard.MVector3 _position;
      private double _distance;

      public MMIStandard.MVector3 Position
      {
        get
        {
          return _position;
        }
        set
        {
          __isset.position = true;
          this._position = value;
        }
      }

      public double Distance
      {
        get
        {
          return _distance;
        }
        set
        {
          __isset.distance = true;
          this._distance = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool position;
        public bool distance;
      }

      public GetAvatarsInRange_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Position = new MMIStandard.MVector3();
                  Position.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Double) {
                  Distance = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvatarsInRange_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Position != null && __isset.position) {
            field.Name = "position";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Position.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.distance) {
            field.Name = "distance";
            field.Type = TType.Double;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Distance);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvatarsInRange_args(");
        bool __first = true;
        if (Position != null && __isset.position) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Position: ");
          __sb.Append(Position== null ? "<null>" : Position.ToString());
        }
        if (__isset.distance) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Distance: ");
          __sb.Append(Distance);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvatarsInRange_result : TBase
    {
      private List<MMIStandard.MAvatar> _success;

      public List<MMIStandard.MAvatar> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAvatarsInRange_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MAvatar>();
                    TList _list66 = iprot.ReadListBegin();
                    for( int _i67 = 0; _i67 < _list66.Count; ++_i67)
                    {
                      MMIStandard.MAvatar _elem68;
                      _elem68 = new MMIStandard.MAvatar();
                      _elem68.Read(iprot);
                      Success.Add(_elem68);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvatarsInRange_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MAvatar _iter69 in Success)
                {
                  _iter69.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvatarsInRange_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSimulationTime_args : TBase
    {

      public GetSimulationTime_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSimulationTime_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSimulationTime_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSimulationTime_result : TBase
    {
      private double _success;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSimulationTime_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Double) {
                  Success = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSimulationTime_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Double;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSimulationTime_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneChanges_args : TBase
    {

      public GetSceneChanges_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneChanges_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneChanges_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneChanges_result : TBase
    {
      private MMIStandard.MSceneUpdate _success;

      public MMIStandard.MSceneUpdate Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSceneChanges_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MSceneUpdate();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneChanges_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneChanges_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFullScene_args : TBase
    {

      public GetFullScene_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFullScene_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFullScene_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFullScene_result : TBase
    {
      private MMIStandard.MSceneUpdate _success;

      public MMIStandard.MSceneUpdate Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFullScene_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MSceneUpdate();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFullScene_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFullScene_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNavigationMesh_args : TBase
    {

      public GetNavigationMesh_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetNavigationMesh_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetNavigationMesh_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNavigationMesh_result : TBase
    {
      private MMIStandard.MNavigationMesh _success;

      public MMIStandard.MNavigationMesh Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetNavigationMesh_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MNavigationMesh();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetNavigationMesh_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetNavigationMesh_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetData_args : TBase
    {
      private string _fileFormat;
      private string _selection;

      public string FileFormat
      {
        get
        {
          return _fileFormat;
        }
        set
        {
          __isset.fileFormat = true;
          this._fileFormat = value;
        }
      }

      public string Selection
      {
        get
        {
          return _selection;
        }
        set
        {
          __isset.selection = true;
          this._selection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool fileFormat;
        public bool selection;
      }

      public GetData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  FileFormat = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Selection = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (FileFormat != null && __isset.fileFormat) {
            field.Name = "fileFormat";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FileFormat);
            oprot.WriteFieldEnd();
          }
          if (Selection != null && __isset.selection) {
            field.Name = "selection";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Selection);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetData_args(");
        bool __first = true;
        if (FileFormat != null && __isset.fileFormat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FileFormat: ");
          __sb.Append(FileFormat);
        }
        if (Selection != null && __isset.selection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Selection: ");
          __sb.Append(Selection);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetData_result : TBase
    {
      private byte[] _success;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAttachments_args : TBase
    {

      public GetAttachments_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAttachments_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAttachments_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAttachments_result : TBase
    {
      private List<MMIStandard.MAttachment> _success;

      public List<MMIStandard.MAttachment> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAttachments_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MAttachment>();
                    TList _list70 = iprot.ReadListBegin();
                    for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
                    {
                      MMIStandard.MAttachment _elem72;
                      _elem72 = new MMIStandard.MAttachment();
                      _elem72.Read(iprot);
                      Success.Add(_elem72);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAttachments_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MAttachment _iter73 in Success)
                {
                  _iter73.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAttachments_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAttachmentsByID_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public GetAttachmentsByID_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAttachmentsByID_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAttachmentsByID_args(");
        bool __first = true;
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAttachmentsByID_result : TBase
    {
      private List<MMIStandard.MAttachment> _success;

      public List<MMIStandard.MAttachment> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAttachmentsByID_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MAttachment>();
                    TList _list74 = iprot.ReadListBegin();
                    for( int _i75 = 0; _i75 < _list74.Count; ++_i75)
                    {
                      MMIStandard.MAttachment _elem76;
                      _elem76 = new MMIStandard.MAttachment();
                      _elem76.Read(iprot);
                      Success.Add(_elem76);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAttachmentsByID_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MAttachment _iter77 in Success)
                {
                  _iter77.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAttachmentsByID_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAttachmentsByName_args : TBase
    {
      private string _name;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
      }

      public GetAttachmentsByName_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAttachmentsByName_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAttachmentsByName_args(");
        bool __first = true;
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAttachmentsByName_result : TBase
    {
      private List<MMIStandard.MAttachment> _success;

      public List<MMIStandard.MAttachment> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAttachmentsByName_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MAttachment>();
                    TList _list78 = iprot.ReadListBegin();
                    for( int _i79 = 0; _i79 < _list78.Count; ++_i79)
                    {
                      MMIStandard.MAttachment _elem80;
                      _elem80 = new MMIStandard.MAttachment();
                      _elem80.Read(iprot);
                      Success.Add(_elem80);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAttachmentsByName_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MAttachment _iter81 in Success)
                {
                  _iter81.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAttachmentsByName_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAttachmentsChildrenRecursive_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public GetAttachmentsChildrenRecursive_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAttachmentsChildrenRecursive_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAttachmentsChildrenRecursive_args(");
        bool __first = true;
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAttachmentsChildrenRecursive_result : TBase
    {
      private List<MMIStandard.MAttachment> _success;

      public List<MMIStandard.MAttachment> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAttachmentsChildrenRecursive_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MAttachment>();
                    TList _list82 = iprot.ReadListBegin();
                    for( int _i83 = 0; _i83 < _list82.Count; ++_i83)
                    {
                      MMIStandard.MAttachment _elem84;
                      _elem84 = new MMIStandard.MAttachment();
                      _elem84.Read(iprot);
                      Success.Add(_elem84);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAttachmentsChildrenRecursive_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MAttachment _iter85 in Success)
                {
                  _iter85.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAttachmentsChildrenRecursive_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAttachmentsParentsRecursive_args : TBase
    {
      private string _id;

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public GetAttachmentsParentsRecursive_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAttachmentsParentsRecursive_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAttachmentsParentsRecursive_args(");
        bool __first = true;
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAttachmentsParentsRecursive_result : TBase
    {
      private List<MMIStandard.MAttachment> _success;

      public List<MMIStandard.MAttachment> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAttachmentsParentsRecursive_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MAttachment>();
                    TList _list86 = iprot.ReadListBegin();
                    for( int _i87 = 0; _i87 < _list86.Count; ++_i87)
                    {
                      MMIStandard.MAttachment _elem88;
                      _elem88 = new MMIStandard.MAttachment();
                      _elem88.Read(iprot);
                      Success.Add(_elem88);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAttachmentsParentsRecursive_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MAttachment _iter89 in Success)
                {
                  _iter89.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAttachmentsParentsRecursive_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
