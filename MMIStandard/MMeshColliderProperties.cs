/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class MMeshColliderProperties : TBase
{

  public List<MVector3> Vertices { get; set; }

  public List<int> Triangles { get; set; }

  public MMeshColliderProperties() {
  }

  public MMeshColliderProperties(List<MVector3> Vertices, List<int> Triangles) : this() {
    this.Vertices = Vertices;
    this.Triangles = Triangles;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_Vertices = false;
      bool isset_Triangles = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Vertices = new List<MVector3>();
                TList _list36 = iprot.ReadListBegin();
                for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                {
                  MVector3 _elem38;
                  _elem38 = new MVector3();
                  _elem38.Read(iprot);
                  Vertices.Add(_elem38);
                }
                iprot.ReadListEnd();
              }
              isset_Vertices = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Triangles = new List<int>();
                TList _list39 = iprot.ReadListBegin();
                for( int _i40 = 0; _i40 < _list39.Count; ++_i40)
                {
                  int _elem41;
                  _elem41 = iprot.ReadI32();
                  Triangles.Add(_elem41);
                }
                iprot.ReadListEnd();
              }
              isset_Triangles = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Vertices)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Vertices not set");
      if (!isset_Triangles)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Triangles not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("MMeshColliderProperties");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Vertices == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Vertices not set");
      field.Name = "Vertices";
      field.Type = TType.List;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Vertices.Count));
        foreach (MVector3 _iter42 in Vertices)
        {
          _iter42.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (Triangles == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Triangles not set");
      field.Name = "Triangles";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.I32, Triangles.Count));
        foreach (int _iter43 in Triangles)
        {
          oprot.WriteI32(_iter43);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("MMeshColliderProperties(");
    __sb.Append(", Vertices: ");
    __sb.Append(Vertices);
    __sb.Append(", Triangles: ");
    __sb.Append(Triangles);
    __sb.Append(")");
    return __sb.ToString();
  }

}

