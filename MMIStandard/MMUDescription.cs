/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MMUDescription : TBase
  {
    private List<MMIStandard.MConstraint> _Prerequisites;
    private Dictionary<string, string> _Properties;
    private List<MDependency> _Dependencies;
    private List<string> _Events;
    private string _LongDescription;
    private string _ShortDescription;
    private List<MMIStandard.MParameter> _Parameters;
    private List<MMIStandard.MParameter> _SceneParameters;
    private string _Vendor;
    private string _VendorDomain;
    private string _MmuUrl;
    private string _UpdateUrl;

    public string Name { get; set; }

    public string ID { get; set; }

    public string AssemblyName { get; set; }

    public string MotionType { get; set; }

    public string Language { get; set; }

    public string Author { get; set; }

    public string Version { get; set; }

    public List<MMIStandard.MConstraint> Prerequisites
    {
      get
      {
        return _Prerequisites;
      }
      set
      {
        __isset.Prerequisites = true;
        this._Prerequisites = value;
      }
    }

    public Dictionary<string, string> Properties
    {
      get
      {
        return _Properties;
      }
      set
      {
        __isset.Properties = true;
        this._Properties = value;
      }
    }

    public List<MDependency> Dependencies
    {
      get
      {
        return _Dependencies;
      }
      set
      {
        __isset.Dependencies = true;
        this._Dependencies = value;
      }
    }

    public List<string> Events
    {
      get
      {
        return _Events;
      }
      set
      {
        __isset.Events = true;
        this._Events = value;
      }
    }

    public string LongDescription
    {
      get
      {
        return _LongDescription;
      }
      set
      {
        __isset.LongDescription = true;
        this._LongDescription = value;
      }
    }

    public string ShortDescription
    {
      get
      {
        return _ShortDescription;
      }
      set
      {
        __isset.ShortDescription = true;
        this._ShortDescription = value;
      }
    }

    public List<MMIStandard.MParameter> Parameters
    {
      get
      {
        return _Parameters;
      }
      set
      {
        __isset.Parameters = true;
        this._Parameters = value;
      }
    }

    public List<MMIStandard.MParameter> SceneParameters
    {
      get
      {
        return _SceneParameters;
      }
      set
      {
        __isset.SceneParameters = true;
        this._SceneParameters = value;
      }
    }

    public string Vendor
    {
      get
      {
        return _Vendor;
      }
      set
      {
        __isset.Vendor = true;
        this._Vendor = value;
      }
    }

    public string VendorDomain
    {
      get
      {
        return _VendorDomain;
      }
      set
      {
        __isset.VendorDomain = true;
        this._VendorDomain = value;
      }
    }

    public string MmuUrl
    {
      get
      {
        return _MmuUrl;
      }
      set
      {
        __isset.MmuUrl = true;
        this._MmuUrl = value;
      }
    }

    public string UpdateUrl
    {
      get
      {
        return _UpdateUrl;
      }
      set
      {
        __isset.UpdateUrl = true;
        this._UpdateUrl = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Prerequisites;
      public bool Properties;
      public bool Dependencies;
      public bool Events;
      public bool LongDescription;
      public bool ShortDescription;
      public bool Parameters;
      public bool SceneParameters;
      public bool Vendor;
      public bool VendorDomain;
      public bool MmuUrl;
      public bool UpdateUrl;
    }

    public MMUDescription() {
    }

    public MMUDescription(string Name, string ID, string AssemblyName, string MotionType, string Language, string Author, string Version) : this() {
      this.Name = Name;
      this.ID = ID;
      this.AssemblyName = AssemblyName;
      this.MotionType = MotionType;
      this.Language = Language;
      this.Author = Author;
      this.Version = Version;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Name = false;
        bool isset_ID = false;
        bool isset_AssemblyName = false;
        bool isset_MotionType = false;
        bool isset_Language = false;
        bool isset_Author = false;
        bool isset_Version = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
                isset_Name = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
                isset_ID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                AssemblyName = iprot.ReadString();
                isset_AssemblyName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                MotionType = iprot.ReadString();
                isset_MotionType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
                isset_Language = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Author = iprot.ReadString();
                isset_Author = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Version = iprot.ReadString();
                isset_Version = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Prerequisites = new List<MMIStandard.MConstraint>();
                  TList _list41 = iprot.ReadListBegin();
                  for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                  {
                    MMIStandard.MConstraint _elem43;
                    _elem43 = new MMIStandard.MConstraint();
                    _elem43.Read(iprot);
                    Prerequisites.Add(_elem43);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Map) {
                {
                  Properties = new Dictionary<string, string>();
                  TMap _map44 = iprot.ReadMapBegin();
                  for( int _i45 = 0; _i45 < _map44.Count; ++_i45)
                  {
                    string _key46;
                    string _val47;
                    _key46 = iprot.ReadString();
                    _val47 = iprot.ReadString();
                    Properties[_key46] = _val47;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.List) {
                {
                  Dependencies = new List<MDependency>();
                  TList _list48 = iprot.ReadListBegin();
                  for( int _i49 = 0; _i49 < _list48.Count; ++_i49)
                  {
                    MDependency _elem50;
                    _elem50 = new MDependency();
                    _elem50.Read(iprot);
                    Dependencies.Add(_elem50);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.List) {
                {
                  Events = new List<string>();
                  TList _list51 = iprot.ReadListBegin();
                  for( int _i52 = 0; _i52 < _list51.Count; ++_i52)
                  {
                    string _elem53;
                    _elem53 = iprot.ReadString();
                    Events.Add(_elem53);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                LongDescription = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                ShortDescription = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.List) {
                {
                  Parameters = new List<MMIStandard.MParameter>();
                  TList _list54 = iprot.ReadListBegin();
                  for( int _i55 = 0; _i55 < _list54.Count; ++_i55)
                  {
                    MMIStandard.MParameter _elem56;
                    _elem56 = new MMIStandard.MParameter();
                    _elem56.Read(iprot);
                    Parameters.Add(_elem56);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.List) {
                {
                  SceneParameters = new List<MMIStandard.MParameter>();
                  TList _list57 = iprot.ReadListBegin();
                  for( int _i58 = 0; _i58 < _list57.Count; ++_i58)
                  {
                    MMIStandard.MParameter _elem59;
                    _elem59 = new MMIStandard.MParameter();
                    _elem59.Read(iprot);
                    SceneParameters.Add(_elem59);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.String) {
                Vendor = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.String) {
                VendorDomain = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                MmuUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.String) {
                UpdateUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Name)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        if (!isset_ID)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ID not set");
        if (!isset_AssemblyName)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AssemblyName not set");
        if (!isset_MotionType)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MotionType not set");
        if (!isset_Language)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Language not set");
        if (!isset_Author)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Author not set");
        if (!isset_Version)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Version not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MMUDescription");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        field.Name = "Name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
        if (ID == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ID not set");
        field.Name = "ID";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ID);
        oprot.WriteFieldEnd();
        if (AssemblyName == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AssemblyName not set");
        field.Name = "AssemblyName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AssemblyName);
        oprot.WriteFieldEnd();
        if (MotionType == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MotionType not set");
        field.Name = "MotionType";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MotionType);
        oprot.WriteFieldEnd();
        if (Language == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Language not set");
        field.Name = "Language";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Language);
        oprot.WriteFieldEnd();
        if (Author == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Author not set");
        field.Name = "Author";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Author);
        oprot.WriteFieldEnd();
        if (Version == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Version not set");
        field.Name = "Version";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Version);
        oprot.WriteFieldEnd();
        if (Prerequisites != null && __isset.Prerequisites) {
          field.Name = "Prerequisites";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Prerequisites.Count));
            foreach (MMIStandard.MConstraint _iter60 in Prerequisites)
            {
              _iter60.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Properties != null && __isset.Properties) {
          field.Name = "Properties";
          field.Type = TType.Map;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
            foreach (string _iter61 in Properties.Keys)
            {
              oprot.WriteString(_iter61);
              oprot.WriteString(Properties[_iter61]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Dependencies != null && __isset.Dependencies) {
          field.Name = "Dependencies";
          field.Type = TType.List;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Dependencies.Count));
            foreach (MDependency _iter62 in Dependencies)
            {
              _iter62.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Events != null && __isset.Events) {
          field.Name = "Events";
          field.Type = TType.List;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Events.Count));
            foreach (string _iter63 in Events)
            {
              oprot.WriteString(_iter63);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (LongDescription != null && __isset.LongDescription) {
          field.Name = "LongDescription";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LongDescription);
          oprot.WriteFieldEnd();
        }
        if (ShortDescription != null && __isset.ShortDescription) {
          field.Name = "ShortDescription";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ShortDescription);
          oprot.WriteFieldEnd();
        }
        if (Parameters != null && __isset.Parameters) {
          field.Name = "Parameters";
          field.Type = TType.List;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Parameters.Count));
            foreach (MMIStandard.MParameter _iter64 in Parameters)
            {
              _iter64.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SceneParameters != null && __isset.SceneParameters) {
          field.Name = "SceneParameters";
          field.Type = TType.List;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SceneParameters.Count));
            foreach (MMIStandard.MParameter _iter65 in SceneParameters)
            {
              _iter65.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Vendor != null && __isset.Vendor) {
          field.Name = "Vendor";
          field.Type = TType.String;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Vendor);
          oprot.WriteFieldEnd();
        }
        if (VendorDomain != null && __isset.VendorDomain) {
          field.Name = "VendorDomain";
          field.Type = TType.String;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VendorDomain);
          oprot.WriteFieldEnd();
        }
        if (MmuUrl != null && __isset.MmuUrl) {
          field.Name = "MmuUrl";
          field.Type = TType.String;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MmuUrl);
          oprot.WriteFieldEnd();
        }
        if (UpdateUrl != null && __isset.UpdateUrl) {
          field.Name = "UpdateUrl";
          field.Type = TType.String;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UpdateUrl);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MMUDescription(");
      __sb.Append(", Name: ");
      __sb.Append(Name);
      __sb.Append(", ID: ");
      __sb.Append(ID);
      __sb.Append(", AssemblyName: ");
      __sb.Append(AssemblyName);
      __sb.Append(", MotionType: ");
      __sb.Append(MotionType);
      __sb.Append(", Language: ");
      __sb.Append(Language);
      __sb.Append(", Author: ");
      __sb.Append(Author);
      __sb.Append(", Version: ");
      __sb.Append(Version);
      if (Prerequisites != null && __isset.Prerequisites) {
        __sb.Append(", Prerequisites: ");
        __sb.Append(Prerequisites);
      }
      if (Properties != null && __isset.Properties) {
        __sb.Append(", Properties: ");
        __sb.Append(Properties);
      }
      if (Dependencies != null && __isset.Dependencies) {
        __sb.Append(", Dependencies: ");
        __sb.Append(Dependencies);
      }
      if (Events != null && __isset.Events) {
        __sb.Append(", Events: ");
        __sb.Append(Events);
      }
      if (LongDescription != null && __isset.LongDescription) {
        __sb.Append(", LongDescription: ");
        __sb.Append(LongDescription);
      }
      if (ShortDescription != null && __isset.ShortDescription) {
        __sb.Append(", ShortDescription: ");
        __sb.Append(ShortDescription);
      }
      if (Parameters != null && __isset.Parameters) {
        __sb.Append(", Parameters: ");
        __sb.Append(Parameters);
      }
      if (SceneParameters != null && __isset.SceneParameters) {
        __sb.Append(", SceneParameters: ");
        __sb.Append(SceneParameters);
      }
      if (Vendor != null && __isset.Vendor) {
        __sb.Append(", Vendor: ");
        __sb.Append(Vendor);
      }
      if (VendorDomain != null && __isset.VendorDomain) {
        __sb.Append(", VendorDomain: ");
        __sb.Append(VendorDomain);
      }
      if (MmuUrl != null && __isset.MmuUrl) {
        __sb.Append(", MmuUrl: ");
        __sb.Append(MmuUrl);
      }
      if (UpdateUrl != null && __isset.UpdateUrl) {
        __sb.Append(", UpdateUrl: ");
        __sb.Append(UpdateUrl);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
