/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MTranslationConstraint : TBase
  {

    /// <summary>
    /// 
    /// <seealso cref="MTranslationConstraintType"/>
    /// </summary>
    public MTranslationConstraintType Type { get; set; }

    public MInterval3 Limits { get; set; }

    public MTranslationConstraint() {
    }

    public MTranslationConstraint(MTranslationConstraintType Type, MInterval3 Limits) : this() {
      this.Type = Type;
      this.Limits = Limits;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Type = false;
        bool isset_Limits = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Type = (MTranslationConstraintType)iprot.ReadI32();
                isset_Type = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Limits = new MInterval3();
                Limits.Read(iprot);
                isset_Limits = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Type)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Type not set");
        if (!isset_Limits)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Limits not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MTranslationConstraint");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "Type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
        if (Limits == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Limits not set");
        field.Name = "Limits";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Limits.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MTranslationConstraint(");
      __sb.Append(", Type: ");
      __sb.Append(Type);
      __sb.Append(", Limits: ");
      __sb.Append(Limits== null ? "<null>" : Limits.ToString());
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
