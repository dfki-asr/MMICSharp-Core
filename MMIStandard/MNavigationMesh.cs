/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MNavigationMesh : TBase
  {
    private Dictionary<string, string> _Properties;

    public List<MMIStandard.MVector3> Vertices { get; set; }

    public List<int> Triangles { get; set; }

    public Dictionary<string, string> Properties
    {
      get
      {
        return _Properties;
      }
      set
      {
        __isset.Properties = true;
        this._Properties = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Properties;
    }

    public MNavigationMesh() {
    }

    public MNavigationMesh(List<MMIStandard.MVector3> Vertices, List<int> Triangles) : this() {
      this.Vertices = Vertices;
      this.Triangles = Triangles;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Vertices = false;
        bool isset_Triangles = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Vertices = new List<MMIStandard.MVector3>();
                  TList _list57 = iprot.ReadListBegin();
                  for( int _i58 = 0; _i58 < _list57.Count; ++_i58)
                  {
                    MMIStandard.MVector3 _elem59;
                    _elem59 = new MMIStandard.MVector3();
                    _elem59.Read(iprot);
                    Vertices.Add(_elem59);
                  }
                  iprot.ReadListEnd();
                }
                isset_Vertices = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Triangles = new List<int>();
                  TList _list60 = iprot.ReadListBegin();
                  for( int _i61 = 0; _i61 < _list60.Count; ++_i61)
                  {
                    int _elem62;
                    _elem62 = iprot.ReadI32();
                    Triangles.Add(_elem62);
                  }
                  iprot.ReadListEnd();
                }
                isset_Triangles = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Properties = new Dictionary<string, string>();
                  TMap _map63 = iprot.ReadMapBegin();
                  for( int _i64 = 0; _i64 < _map63.Count; ++_i64)
                  {
                    string _key65;
                    string _val66;
                    _key65 = iprot.ReadString();
                    _val66 = iprot.ReadString();
                    Properties[_key65] = _val66;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Vertices)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Vertices not set");
        if (!isset_Triangles)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Triangles not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MNavigationMesh");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Vertices == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Vertices not set");
        field.Name = "Vertices";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Vertices.Count));
          foreach (MMIStandard.MVector3 _iter67 in Vertices)
          {
            _iter67.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        if (Triangles == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Triangles not set");
        field.Name = "Triangles";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Triangles.Count));
          foreach (int _iter68 in Triangles)
          {
            oprot.WriteI32(_iter68);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        if (Properties != null && __isset.Properties) {
          field.Name = "Properties";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
            foreach (string _iter69 in Properties.Keys)
            {
              oprot.WriteString(_iter69);
              oprot.WriteString(Properties[_iter69]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MNavigationMesh(");
      __sb.Append(", Vertices: ");
      __sb.Append(Vertices);
      __sb.Append(", Triangles: ");
      __sb.Append(Triangles);
      if (Properties != null && __isset.Properties) {
        __sb.Append(", Properties: ");
        __sb.Append(Properties);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
