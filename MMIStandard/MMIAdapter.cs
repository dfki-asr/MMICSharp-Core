/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MMIAdapter {
    public interface ISync {
      MMIStandard.MBoolResponse Initialize(MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties, string mmuID, string sessionID);
      MMIStandard.MBoolResponse AssignInstruction(MMIStandard.MInstruction instruction, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID);
      MMIStandard.MSimulationResult DoStep(double time, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID);
      List<MMIStandard.MConstraint> GetBoundaryConstraints(MMIStandard.MInstruction instruction, string mmuID, string sessionID);
      MMIStandard.MBoolResponse CheckPrerequisites(MMIStandard.MInstruction instruction, string mmuID, string sessionID);
      MMIStandard.MBoolResponse Abort(string instructionID, string mmuID, string sessionID);
      MMIStandard.MBoolResponse Dispose(string mmuID, string sessionID);
      Dictionary<string, string> ExecuteFunction(string name, Dictionary<string, string> parameters, string mmuID, string sessionID);
      Dictionary<string, string> GetStatus();
      MAdapterDescription GetAdapterDescription();
      MMIStandard.MBoolResponse CreateSession(string sessionID);
      MMIStandard.MBoolResponse CloseSession(string sessionID);
      MMIStandard.MBoolResponse PushScene(MMIStandard.MSceneUpdate sceneUpdates, string sessionID);
      List<MMIStandard.MMUDescription> GetLoadableMMUs();
      List<MMIStandard.MMUDescription> GetMMus(string sessionID);
      MMIStandard.MMUDescription GetDescription(string mmuID, string sessionID);
      List<MMIStandard.MSceneObject> GetScene(string sessionID);
      MMIStandard.MSceneUpdate GetSceneChanges(string sessionID);
      Dictionary<string, string> LoadMMUs(List<string> mmus, string sessionID);
      byte[] CreateCheckpoint(string mmuID, string sessionID);
      MMIStandard.MBoolResponse RestoreCheckpoint(string mmuID, string sessionID, byte[] checkpointData);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_Initialize(AsyncCallback callback, object state, MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties, string mmuID, string sessionID);
      MMIStandard.MBoolResponse End_Initialize(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_AssignInstruction(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID);
      MMIStandard.MBoolResponse End_AssignInstruction(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_DoStep(AsyncCallback callback, object state, double time, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID);
      MMIStandard.MSimulationResult End_DoStep(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetBoundaryConstraints(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, string mmuID, string sessionID);
      List<MMIStandard.MConstraint> End_GetBoundaryConstraints(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_CheckPrerequisites(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, string mmuID, string sessionID);
      MMIStandard.MBoolResponse End_CheckPrerequisites(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Abort(AsyncCallback callback, object state, string instructionID, string mmuID, string sessionID);
      MMIStandard.MBoolResponse End_Abort(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Dispose(AsyncCallback callback, object state, string mmuID, string sessionID);
      MMIStandard.MBoolResponse End_Dispose(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ExecuteFunction(AsyncCallback callback, object state, string name, Dictionary<string, string> parameters, string mmuID, string sessionID);
      Dictionary<string, string> End_ExecuteFunction(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetStatus(AsyncCallback callback, object state);
      Dictionary<string, string> End_GetStatus(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAdapterDescription(AsyncCallback callback, object state);
      MAdapterDescription End_GetAdapterDescription(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_CreateSession(AsyncCallback callback, object state, string sessionID);
      MMIStandard.MBoolResponse End_CreateSession(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_CloseSession(AsyncCallback callback, object state, string sessionID);
      MMIStandard.MBoolResponse End_CloseSession(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PushScene(AsyncCallback callback, object state, MMIStandard.MSceneUpdate sceneUpdates, string sessionID);
      MMIStandard.MBoolResponse End_PushScene(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetLoadableMMUs(AsyncCallback callback, object state);
      List<MMIStandard.MMUDescription> End_GetLoadableMMUs(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetMMus(AsyncCallback callback, object state, string sessionID);
      List<MMIStandard.MMUDescription> End_GetMMus(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetDescription(AsyncCallback callback, object state, string mmuID, string sessionID);
      MMIStandard.MMUDescription End_GetDescription(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetScene(AsyncCallback callback, object state, string sessionID);
      List<MMIStandard.MSceneObject> End_GetScene(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetSceneChanges(AsyncCallback callback, object state, string sessionID);
      MMIStandard.MSceneUpdate End_GetSceneChanges(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_LoadMMUs(AsyncCallback callback, object state, List<string> mmus, string sessionID);
      Dictionary<string, string> End_LoadMMUs(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_CreateCheckpoint(AsyncCallback callback, object state, string mmuID, string sessionID);
      byte[] End_CreateCheckpoint(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RestoreCheckpoint(AsyncCallback callback, object state, string mmuID, string sessionID, byte[] checkpointData);
      MMIStandard.MBoolResponse End_RestoreCheckpoint(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_Initialize(AsyncCallback callback, object state, MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties, string mmuID, string sessionID)
      {
        return send_Initialize(callback, state, avatarDescription, properties, mmuID, sessionID);
      }

      public MMIStandard.MBoolResponse End_Initialize(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Initialize();
      }

      #endif

      public MMIStandard.MBoolResponse Initialize(MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties, string mmuID, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_Initialize(null, null, avatarDescription, properties, mmuID, sessionID);
        return End_Initialize(asyncResult);

        #else
        send_Initialize(avatarDescription, properties, mmuID, sessionID);
        return recv_Initialize();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Initialize(AsyncCallback callback, object state, MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("Initialize", TMessageType.Call, seqid_));
        Initialize_args args = new Initialize_args();
        args.AvatarDescription = avatarDescription;
        args.Properties = properties;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_Initialize(MMIStandard.MAvatarDescription avatarDescription, Dictionary<string, string> properties, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("Initialize", TMessageType.Call, seqid_));
        Initialize_args args = new Initialize_args();
        args.AvatarDescription = avatarDescription;
        args.Properties = properties;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_Initialize()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Initialize_result result = new Initialize_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Initialize failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_AssignInstruction(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID)
      {
        return send_AssignInstruction(callback, state, instruction, simulationState, mmuID, sessionID);
      }

      public MMIStandard.MBoolResponse End_AssignInstruction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_AssignInstruction();
      }

      #endif

      public MMIStandard.MBoolResponse AssignInstruction(MMIStandard.MInstruction instruction, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_AssignInstruction(null, null, instruction, simulationState, mmuID, sessionID);
        return End_AssignInstruction(asyncResult);

        #else
        send_AssignInstruction(instruction, simulationState, mmuID, sessionID);
        return recv_AssignInstruction();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AssignInstruction(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Call, seqid_));
        AssignInstruction_args args = new AssignInstruction_args();
        args.Instruction = instruction;
        args.SimulationState = simulationState;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_AssignInstruction(MMIStandard.MInstruction instruction, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Call, seqid_));
        AssignInstruction_args args = new AssignInstruction_args();
        args.Instruction = instruction;
        args.SimulationState = simulationState;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_AssignInstruction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AssignInstruction_result result = new AssignInstruction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AssignInstruction failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_DoStep(AsyncCallback callback, object state, double time, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID)
      {
        return send_DoStep(callback, state, time, simulationState, mmuID, sessionID);
      }

      public MMIStandard.MSimulationResult End_DoStep(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DoStep();
      }

      #endif

      public MMIStandard.MSimulationResult DoStep(double time, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_DoStep(null, null, time, simulationState, mmuID, sessionID);
        return End_DoStep(asyncResult);

        #else
        send_DoStep(time, simulationState, mmuID, sessionID);
        return recv_DoStep();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DoStep(AsyncCallback callback, object state, double time, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("DoStep", TMessageType.Call, seqid_));
        DoStep_args args = new DoStep_args();
        args.Time = time;
        args.SimulationState = simulationState;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_DoStep(double time, MMIStandard.MSimulationState simulationState, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("DoStep", TMessageType.Call, seqid_));
        DoStep_args args = new DoStep_args();
        args.Time = time;
        args.SimulationState = simulationState;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MSimulationResult recv_DoStep()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DoStep_result result = new DoStep_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DoStep failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetBoundaryConstraints(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, string mmuID, string sessionID)
      {
        return send_GetBoundaryConstraints(callback, state, instruction, mmuID, sessionID);
      }

      public List<MMIStandard.MConstraint> End_GetBoundaryConstraints(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetBoundaryConstraints();
      }

      #endif

      public List<MMIStandard.MConstraint> GetBoundaryConstraints(MMIStandard.MInstruction instruction, string mmuID, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetBoundaryConstraints(null, null, instruction, mmuID, sessionID);
        return End_GetBoundaryConstraints(asyncResult);

        #else
        send_GetBoundaryConstraints(instruction, mmuID, sessionID);
        return recv_GetBoundaryConstraints();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetBoundaryConstraints(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetBoundaryConstraints", TMessageType.Call, seqid_));
        GetBoundaryConstraints_args args = new GetBoundaryConstraints_args();
        args.Instruction = instruction;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetBoundaryConstraints(MMIStandard.MInstruction instruction, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetBoundaryConstraints", TMessageType.Call, seqid_));
        GetBoundaryConstraints_args args = new GetBoundaryConstraints_args();
        args.Instruction = instruction;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MConstraint> recv_GetBoundaryConstraints()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetBoundaryConstraints failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_CheckPrerequisites(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, string mmuID, string sessionID)
      {
        return send_CheckPrerequisites(callback, state, instruction, mmuID, sessionID);
      }

      public MMIStandard.MBoolResponse End_CheckPrerequisites(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CheckPrerequisites();
      }

      #endif

      public MMIStandard.MBoolResponse CheckPrerequisites(MMIStandard.MInstruction instruction, string mmuID, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_CheckPrerequisites(null, null, instruction, mmuID, sessionID);
        return End_CheckPrerequisites(asyncResult);

        #else
        send_CheckPrerequisites(instruction, mmuID, sessionID);
        return recv_CheckPrerequisites();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CheckPrerequisites(AsyncCallback callback, object state, MMIStandard.MInstruction instruction, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("CheckPrerequisites", TMessageType.Call, seqid_));
        CheckPrerequisites_args args = new CheckPrerequisites_args();
        args.Instruction = instruction;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_CheckPrerequisites(MMIStandard.MInstruction instruction, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("CheckPrerequisites", TMessageType.Call, seqid_));
        CheckPrerequisites_args args = new CheckPrerequisites_args();
        args.Instruction = instruction;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_CheckPrerequisites()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CheckPrerequisites_result result = new CheckPrerequisites_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CheckPrerequisites failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_Abort(AsyncCallback callback, object state, string instructionID, string mmuID, string sessionID)
      {
        return send_Abort(callback, state, instructionID, mmuID, sessionID);
      }

      public MMIStandard.MBoolResponse End_Abort(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Abort();
      }

      #endif

      public MMIStandard.MBoolResponse Abort(string instructionID, string mmuID, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_Abort(null, null, instructionID, mmuID, sessionID);
        return End_Abort(asyncResult);

        #else
        send_Abort(instructionID, mmuID, sessionID);
        return recv_Abort();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Abort(AsyncCallback callback, object state, string instructionID, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("Abort", TMessageType.Call, seqid_));
        Abort_args args = new Abort_args();
        args.InstructionID = instructionID;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_Abort(string instructionID, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("Abort", TMessageType.Call, seqid_));
        Abort_args args = new Abort_args();
        args.InstructionID = instructionID;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_Abort()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Abort_result result = new Abort_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Abort failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_Dispose(AsyncCallback callback, object state, string mmuID, string sessionID)
      {
        return send_Dispose(callback, state, mmuID, sessionID);
      }

      public MMIStandard.MBoolResponse End_Dispose(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Dispose();
      }

      #endif

      public MMIStandard.MBoolResponse Dispose(string mmuID, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_Dispose(null, null, mmuID, sessionID);
        return End_Dispose(asyncResult);

        #else
        send_Dispose(mmuID, sessionID);
        return recv_Dispose();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Dispose(AsyncCallback callback, object state, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("Dispose", TMessageType.Call, seqid_));
        Dispose_args args = new Dispose_args();
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_Dispose(string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("Dispose", TMessageType.Call, seqid_));
        Dispose_args args = new Dispose_args();
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_Dispose()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Dispose_result result = new Dispose_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Dispose failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_ExecuteFunction(AsyncCallback callback, object state, string name, Dictionary<string, string> parameters, string mmuID, string sessionID)
      {
        return send_ExecuteFunction(callback, state, name, parameters, mmuID, sessionID);
      }

      public Dictionary<string, string> End_ExecuteFunction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ExecuteFunction();
      }

      #endif

      public Dictionary<string, string> ExecuteFunction(string name, Dictionary<string, string> parameters, string mmuID, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_ExecuteFunction(null, null, name, parameters, mmuID, sessionID);
        return End_ExecuteFunction(asyncResult);

        #else
        send_ExecuteFunction(name, parameters, mmuID, sessionID);
        return recv_ExecuteFunction();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ExecuteFunction(AsyncCallback callback, object state, string name, Dictionary<string, string> parameters, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("ExecuteFunction", TMessageType.Call, seqid_));
        ExecuteFunction_args args = new ExecuteFunction_args();
        args.Name = name;
        args.Parameters = parameters;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_ExecuteFunction(string name, Dictionary<string, string> parameters, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("ExecuteFunction", TMessageType.Call, seqid_));
        ExecuteFunction_args args = new ExecuteFunction_args();
        args.Name = name;
        args.Parameters = parameters;
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Dictionary<string, string> recv_ExecuteFunction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ExecuteFunction_result result = new ExecuteFunction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExecuteFunction failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetStatus(AsyncCallback callback, object state)
      {
        return send_GetStatus(callback, state);
      }

      public Dictionary<string, string> End_GetStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetStatus();
      }

      #endif

      public Dictionary<string, string> GetStatus()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetStatus(null, null);
        return End_GetStatus(asyncResult);

        #else
        send_GetStatus();
        return recv_GetStatus();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetStatus(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetStatus", TMessageType.Call, seqid_));
        GetStatus_args args = new GetStatus_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetStatus()
      {
        oprot_.WriteMessageBegin(new TMessage("GetStatus", TMessageType.Call, seqid_));
        GetStatus_args args = new GetStatus_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Dictionary<string, string> recv_GetStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetStatus_result result = new GetStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetAdapterDescription(AsyncCallback callback, object state)
      {
        return send_GetAdapterDescription(callback, state);
      }

      public MAdapterDescription End_GetAdapterDescription(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAdapterDescription();
      }

      #endif

      public MAdapterDescription GetAdapterDescription()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetAdapterDescription(null, null);
        return End_GetAdapterDescription(asyncResult);

        #else
        send_GetAdapterDescription();
        return recv_GetAdapterDescription();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAdapterDescription(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAdapterDescription", TMessageType.Call, seqid_));
        GetAdapterDescription_args args = new GetAdapterDescription_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetAdapterDescription()
      {
        oprot_.WriteMessageBegin(new TMessage("GetAdapterDescription", TMessageType.Call, seqid_));
        GetAdapterDescription_args args = new GetAdapterDescription_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MAdapterDescription recv_GetAdapterDescription()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAdapterDescription_result result = new GetAdapterDescription_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAdapterDescription failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_CreateSession(AsyncCallback callback, object state, string sessionID)
      {
        return send_CreateSession(callback, state, sessionID);
      }

      public MMIStandard.MBoolResponse End_CreateSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CreateSession();
      }

      #endif

      public MMIStandard.MBoolResponse CreateSession(string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_CreateSession(null, null, sessionID);
        return End_CreateSession(asyncResult);

        #else
        send_CreateSession(sessionID);
        return recv_CreateSession();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateSession(AsyncCallback callback, object state, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateSession", TMessageType.Call, seqid_));
        CreateSession_args args = new CreateSession_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_CreateSession(string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateSession", TMessageType.Call, seqid_));
        CreateSession_args args = new CreateSession_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_CreateSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateSession_result result = new CreateSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_CloseSession(AsyncCallback callback, object state, string sessionID)
      {
        return send_CloseSession(callback, state, sessionID);
      }

      public MMIStandard.MBoolResponse End_CloseSession(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CloseSession();
      }

      #endif

      public MMIStandard.MBoolResponse CloseSession(string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_CloseSession(null, null, sessionID);
        return End_CloseSession(asyncResult);

        #else
        send_CloseSession(sessionID);
        return recv_CloseSession();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CloseSession(AsyncCallback callback, object state, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("CloseSession", TMessageType.Call, seqid_));
        CloseSession_args args = new CloseSession_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_CloseSession(string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("CloseSession", TMessageType.Call, seqid_));
        CloseSession_args args = new CloseSession_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_CloseSession()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CloseSession_result result = new CloseSession_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseSession failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_PushScene(AsyncCallback callback, object state, MMIStandard.MSceneUpdate sceneUpdates, string sessionID)
      {
        return send_PushScene(callback, state, sceneUpdates, sessionID);
      }

      public MMIStandard.MBoolResponse End_PushScene(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PushScene();
      }

      #endif

      public MMIStandard.MBoolResponse PushScene(MMIStandard.MSceneUpdate sceneUpdates, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_PushScene(null, null, sceneUpdates, sessionID);
        return End_PushScene(asyncResult);

        #else
        send_PushScene(sceneUpdates, sessionID);
        return recv_PushScene();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PushScene(AsyncCallback callback, object state, MMIStandard.MSceneUpdate sceneUpdates, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("PushScene", TMessageType.Call, seqid_));
        PushScene_args args = new PushScene_args();
        args.SceneUpdates = sceneUpdates;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_PushScene(MMIStandard.MSceneUpdate sceneUpdates, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("PushScene", TMessageType.Call, seqid_));
        PushScene_args args = new PushScene_args();
        args.SceneUpdates = sceneUpdates;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_PushScene()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PushScene_result result = new PushScene_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushScene failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetLoadableMMUs(AsyncCallback callback, object state)
      {
        return send_GetLoadableMMUs(callback, state);
      }

      public List<MMIStandard.MMUDescription> End_GetLoadableMMUs(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetLoadableMMUs();
      }

      #endif

      public List<MMIStandard.MMUDescription> GetLoadableMMUs()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetLoadableMMUs(null, null);
        return End_GetLoadableMMUs(asyncResult);

        #else
        send_GetLoadableMMUs();
        return recv_GetLoadableMMUs();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetLoadableMMUs(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetLoadableMMUs", TMessageType.Call, seqid_));
        GetLoadableMMUs_args args = new GetLoadableMMUs_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetLoadableMMUs()
      {
        oprot_.WriteMessageBegin(new TMessage("GetLoadableMMUs", TMessageType.Call, seqid_));
        GetLoadableMMUs_args args = new GetLoadableMMUs_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MMUDescription> recv_GetLoadableMMUs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetLoadableMMUs_result result = new GetLoadableMMUs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLoadableMMUs failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetMMus(AsyncCallback callback, object state, string sessionID)
      {
        return send_GetMMus(callback, state, sessionID);
      }

      public List<MMIStandard.MMUDescription> End_GetMMus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMMus();
      }

      #endif

      public List<MMIStandard.MMUDescription> GetMMus(string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetMMus(null, null, sessionID);
        return End_GetMMus(asyncResult);

        #else
        send_GetMMus(sessionID);
        return recv_GetMMus();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMMus(AsyncCallback callback, object state, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetMMus", TMessageType.Call, seqid_));
        GetMMus_args args = new GetMMus_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetMMus(string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetMMus", TMessageType.Call, seqid_));
        GetMMus_args args = new GetMMus_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MMUDescription> recv_GetMMus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMMus_result result = new GetMMus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMMus failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetDescription(AsyncCallback callback, object state, string mmuID, string sessionID)
      {
        return send_GetDescription(callback, state, mmuID, sessionID);
      }

      public MMIStandard.MMUDescription End_GetDescription(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDescription();
      }

      #endif

      public MMIStandard.MMUDescription GetDescription(string mmuID, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetDescription(null, null, mmuID, sessionID);
        return End_GetDescription(asyncResult);

        #else
        send_GetDescription(mmuID, sessionID);
        return recv_GetDescription();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDescription(AsyncCallback callback, object state, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetDescription", TMessageType.Call, seqid_));
        GetDescription_args args = new GetDescription_args();
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetDescription(string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetDescription", TMessageType.Call, seqid_));
        GetDescription_args args = new GetDescription_args();
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MMUDescription recv_GetDescription()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDescription_result result = new GetDescription_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDescription failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetScene(AsyncCallback callback, object state, string sessionID)
      {
        return send_GetScene(callback, state, sessionID);
      }

      public List<MMIStandard.MSceneObject> End_GetScene(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetScene();
      }

      #endif

      public List<MMIStandard.MSceneObject> GetScene(string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetScene(null, null, sessionID);
        return End_GetScene(asyncResult);

        #else
        send_GetScene(sessionID);
        return recv_GetScene();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetScene(AsyncCallback callback, object state, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetScene", TMessageType.Call, seqid_));
        GetScene_args args = new GetScene_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetScene(string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetScene", TMessageType.Call, seqid_));
        GetScene_args args = new GetScene_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<MMIStandard.MSceneObject> recv_GetScene()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetScene_result result = new GetScene_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetScene failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_GetSceneChanges(AsyncCallback callback, object state, string sessionID)
      {
        return send_GetSceneChanges(callback, state, sessionID);
      }

      public MMIStandard.MSceneUpdate End_GetSceneChanges(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSceneChanges();
      }

      #endif

      public MMIStandard.MSceneUpdate GetSceneChanges(string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_GetSceneChanges(null, null, sessionID);
        return End_GetSceneChanges(asyncResult);

        #else
        send_GetSceneChanges(sessionID);
        return recv_GetSceneChanges();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSceneChanges(AsyncCallback callback, object state, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneChanges", TMessageType.Call, seqid_));
        GetSceneChanges_args args = new GetSceneChanges_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_GetSceneChanges(string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("GetSceneChanges", TMessageType.Call, seqid_));
        GetSceneChanges_args args = new GetSceneChanges_args();
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MSceneUpdate recv_GetSceneChanges()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSceneChanges_result result = new GetSceneChanges_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSceneChanges failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_LoadMMUs(AsyncCallback callback, object state, List<string> mmus, string sessionID)
      {
        return send_LoadMMUs(callback, state, mmus, sessionID);
      }

      public Dictionary<string, string> End_LoadMMUs(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_LoadMMUs();
      }

      #endif

      public Dictionary<string, string> LoadMMUs(List<string> mmus, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_LoadMMUs(null, null, mmus, sessionID);
        return End_LoadMMUs(asyncResult);

        #else
        send_LoadMMUs(mmus, sessionID);
        return recv_LoadMMUs();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_LoadMMUs(AsyncCallback callback, object state, List<string> mmus, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("LoadMMUs", TMessageType.Call, seqid_));
        LoadMMUs_args args = new LoadMMUs_args();
        args.Mmus = mmus;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_LoadMMUs(List<string> mmus, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("LoadMMUs", TMessageType.Call, seqid_));
        LoadMMUs_args args = new LoadMMUs_args();
        args.Mmus = mmus;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Dictionary<string, string> recv_LoadMMUs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        LoadMMUs_result result = new LoadMMUs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "LoadMMUs failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_CreateCheckpoint(AsyncCallback callback, object state, string mmuID, string sessionID)
      {
        return send_CreateCheckpoint(callback, state, mmuID, sessionID);
      }

      public byte[] End_CreateCheckpoint(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CreateCheckpoint();
      }

      #endif

      public byte[] CreateCheckpoint(string mmuID, string sessionID)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_CreateCheckpoint(null, null, mmuID, sessionID);
        return End_CreateCheckpoint(asyncResult);

        #else
        send_CreateCheckpoint(mmuID, sessionID);
        return recv_CreateCheckpoint();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CreateCheckpoint(AsyncCallback callback, object state, string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateCheckpoint", TMessageType.Call, seqid_));
        CreateCheckpoint_args args = new CreateCheckpoint_args();
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_CreateCheckpoint(string mmuID, string sessionID)
      {
        oprot_.WriteMessageBegin(new TMessage("CreateCheckpoint", TMessageType.Call, seqid_));
        CreateCheckpoint_args args = new CreateCheckpoint_args();
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public byte[] recv_CreateCheckpoint()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CreateCheckpoint_result result = new CreateCheckpoint_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateCheckpoint failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_RestoreCheckpoint(AsyncCallback callback, object state, string mmuID, string sessionID, byte[] checkpointData)
      {
        return send_RestoreCheckpoint(callback, state, mmuID, sessionID, checkpointData);
      }

      public MMIStandard.MBoolResponse End_RestoreCheckpoint(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RestoreCheckpoint();
      }

      #endif

      public MMIStandard.MBoolResponse RestoreCheckpoint(string mmuID, string sessionID, byte[] checkpointData)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_RestoreCheckpoint(null, null, mmuID, sessionID, checkpointData);
        return End_RestoreCheckpoint(asyncResult);

        #else
        send_RestoreCheckpoint(mmuID, sessionID, checkpointData);
        return recv_RestoreCheckpoint();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RestoreCheckpoint(AsyncCallback callback, object state, string mmuID, string sessionID, byte[] checkpointData)
      {
        oprot_.WriteMessageBegin(new TMessage("RestoreCheckpoint", TMessageType.Call, seqid_));
        RestoreCheckpoint_args args = new RestoreCheckpoint_args();
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.CheckpointData = checkpointData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_RestoreCheckpoint(string mmuID, string sessionID, byte[] checkpointData)
      {
        oprot_.WriteMessageBegin(new TMessage("RestoreCheckpoint", TMessageType.Call, seqid_));
        RestoreCheckpoint_args args = new RestoreCheckpoint_args();
        args.MmuID = mmuID;
        args.SessionID = sessionID;
        args.CheckpointData = checkpointData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MBoolResponse recv_RestoreCheckpoint()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RestoreCheckpoint_result result = new RestoreCheckpoint_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RestoreCheckpoint failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["Initialize"] = Initialize_Process;
        processMap_["AssignInstruction"] = AssignInstruction_Process;
        processMap_["DoStep"] = DoStep_Process;
        processMap_["GetBoundaryConstraints"] = GetBoundaryConstraints_Process;
        processMap_["CheckPrerequisites"] = CheckPrerequisites_Process;
        processMap_["Abort"] = Abort_Process;
        processMap_["Dispose"] = Dispose_Process;
        processMap_["ExecuteFunction"] = ExecuteFunction_Process;
        processMap_["GetStatus"] = GetStatus_Process;
        processMap_["GetAdapterDescription"] = GetAdapterDescription_Process;
        processMap_["CreateSession"] = CreateSession_Process;
        processMap_["CloseSession"] = CloseSession_Process;
        processMap_["PushScene"] = PushScene_Process;
        processMap_["GetLoadableMMUs"] = GetLoadableMMUs_Process;
        processMap_["GetMMus"] = GetMMus_Process;
        processMap_["GetDescription"] = GetDescription_Process;
        processMap_["GetScene"] = GetScene_Process;
        processMap_["GetSceneChanges"] = GetSceneChanges_Process;
        processMap_["LoadMMUs"] = LoadMMUs_Process;
        processMap_["CreateCheckpoint"] = CreateCheckpoint_Process;
        processMap_["RestoreCheckpoint"] = RestoreCheckpoint_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Initialize_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Initialize_args args = new Initialize_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Initialize_result result = new Initialize_result();
        try
        {
          result.Success = iface_.Initialize(args.AvatarDescription, args.Properties, args.MmuID, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("Initialize", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Initialize", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AssignInstruction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AssignInstruction_args args = new AssignInstruction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AssignInstruction_result result = new AssignInstruction_result();
        try
        {
          result.Success = iface_.AssignInstruction(args.Instruction, args.SimulationState, args.MmuID, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("AssignInstruction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DoStep_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DoStep_args args = new DoStep_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DoStep_result result = new DoStep_result();
        try
        {
          result.Success = iface_.DoStep(args.Time, args.SimulationState, args.MmuID, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("DoStep", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DoStep", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetBoundaryConstraints_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetBoundaryConstraints_args args = new GetBoundaryConstraints_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetBoundaryConstraints_result result = new GetBoundaryConstraints_result();
        try
        {
          result.Success = iface_.GetBoundaryConstraints(args.Instruction, args.MmuID, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("GetBoundaryConstraints", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetBoundaryConstraints", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CheckPrerequisites_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CheckPrerequisites_args args = new CheckPrerequisites_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CheckPrerequisites_result result = new CheckPrerequisites_result();
        try
        {
          result.Success = iface_.CheckPrerequisites(args.Instruction, args.MmuID, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("CheckPrerequisites", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CheckPrerequisites", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Abort_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Abort_args args = new Abort_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Abort_result result = new Abort_result();
        try
        {
          result.Success = iface_.Abort(args.InstructionID, args.MmuID, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("Abort", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Abort", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Dispose_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Dispose_args args = new Dispose_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Dispose_result result = new Dispose_result();
        try
        {
          result.Success = iface_.Dispose(args.MmuID, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("Dispose", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Dispose", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ExecuteFunction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ExecuteFunction_args args = new ExecuteFunction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ExecuteFunction_result result = new ExecuteFunction_result();
        try
        {
          result.Success = iface_.ExecuteFunction(args.Name, args.Parameters, args.MmuID, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("ExecuteFunction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ExecuteFunction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetStatus_args args = new GetStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetStatus_result result = new GetStatus_result();
        try
        {
          result.Success = iface_.GetStatus();
          oprot.WriteMessageBegin(new TMessage("GetStatus", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetStatus", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAdapterDescription_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAdapterDescription_args args = new GetAdapterDescription_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAdapterDescription_result result = new GetAdapterDescription_result();
        try
        {
          result.Success = iface_.GetAdapterDescription();
          oprot.WriteMessageBegin(new TMessage("GetAdapterDescription", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAdapterDescription", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateSession_args args = new CreateSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateSession_result result = new CreateSession_result();
        try
        {
          result.Success = iface_.CreateSession(args.SessionID);
          oprot.WriteMessageBegin(new TMessage("CreateSession", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CreateSession", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CloseSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CloseSession_args args = new CloseSession_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CloseSession_result result = new CloseSession_result();
        try
        {
          result.Success = iface_.CloseSession(args.SessionID);
          oprot.WriteMessageBegin(new TMessage("CloseSession", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CloseSession", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PushScene_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PushScene_args args = new PushScene_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PushScene_result result = new PushScene_result();
        try
        {
          result.Success = iface_.PushScene(args.SceneUpdates, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("PushScene", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PushScene", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetLoadableMMUs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetLoadableMMUs_args args = new GetLoadableMMUs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetLoadableMMUs_result result = new GetLoadableMMUs_result();
        try
        {
          result.Success = iface_.GetLoadableMMUs();
          oprot.WriteMessageBegin(new TMessage("GetLoadableMMUs", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetLoadableMMUs", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetMMus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMMus_args args = new GetMMus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMMus_result result = new GetMMus_result();
        try
        {
          result.Success = iface_.GetMMus(args.SessionID);
          oprot.WriteMessageBegin(new TMessage("GetMMus", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetMMus", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDescription_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDescription_args args = new GetDescription_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDescription_result result = new GetDescription_result();
        try
        {
          result.Success = iface_.GetDescription(args.MmuID, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("GetDescription", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetDescription", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetScene_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetScene_args args = new GetScene_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetScene_result result = new GetScene_result();
        try
        {
          result.Success = iface_.GetScene(args.SessionID);
          oprot.WriteMessageBegin(new TMessage("GetScene", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetScene", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSceneChanges_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSceneChanges_args args = new GetSceneChanges_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSceneChanges_result result = new GetSceneChanges_result();
        try
        {
          result.Success = iface_.GetSceneChanges(args.SessionID);
          oprot.WriteMessageBegin(new TMessage("GetSceneChanges", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetSceneChanges", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void LoadMMUs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        LoadMMUs_args args = new LoadMMUs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        LoadMMUs_result result = new LoadMMUs_result();
        try
        {
          result.Success = iface_.LoadMMUs(args.Mmus, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("LoadMMUs", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("LoadMMUs", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CreateCheckpoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CreateCheckpoint_args args = new CreateCheckpoint_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CreateCheckpoint_result result = new CreateCheckpoint_result();
        try
        {
          result.Success = iface_.CreateCheckpoint(args.MmuID, args.SessionID);
          oprot.WriteMessageBegin(new TMessage("CreateCheckpoint", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CreateCheckpoint", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RestoreCheckpoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RestoreCheckpoint_args args = new RestoreCheckpoint_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RestoreCheckpoint_result result = new RestoreCheckpoint_result();
        try
        {
          result.Success = iface_.RestoreCheckpoint(args.MmuID, args.SessionID, args.CheckpointData);
          oprot.WriteMessageBegin(new TMessage("RestoreCheckpoint", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RestoreCheckpoint", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Initialize_args : TBase
    {
      private MMIStandard.MAvatarDescription _avatarDescription;
      private Dictionary<string, string> _properties;
      private string _mmuID;
      private string _sessionID;

      public MMIStandard.MAvatarDescription AvatarDescription
      {
        get
        {
          return _avatarDescription;
        }
        set
        {
          __isset.avatarDescription = true;
          this._avatarDescription = value;
        }
      }

      public Dictionary<string, string> Properties
      {
        get
        {
          return _properties;
        }
        set
        {
          __isset.properties = true;
          this._properties = value;
        }
      }

      public string MmuID
      {
        get
        {
          return _mmuID;
        }
        set
        {
          __isset.mmuID = true;
          this._mmuID = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool avatarDescription;
        public bool properties;
        public bool mmuID;
        public bool sessionID;
      }

      public Initialize_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  AvatarDescription = new MMIStandard.MAvatarDescription();
                  AvatarDescription.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Map) {
                  {
                    Properties = new Dictionary<string, string>();
                    TMap _map13 = iprot.ReadMapBegin();
                    for( int _i14 = 0; _i14 < _map13.Count; ++_i14)
                    {
                      string _key15;
                      string _val16;
                      _key15 = iprot.ReadString();
                      _val16 = iprot.ReadString();
                      Properties[_key15] = _val16;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  MmuID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Initialize_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AvatarDescription != null && __isset.avatarDescription) {
            field.Name = "avatarDescription";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            AvatarDescription.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Properties != null && __isset.properties) {
            field.Name = "properties";
            field.Type = TType.Map;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
              foreach (string _iter17 in Properties.Keys)
              {
                oprot.WriteString(_iter17);
                oprot.WriteString(Properties[_iter17]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (MmuID != null && __isset.mmuID) {
            field.Name = "mmuID";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MmuID);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Initialize_args(");
        bool __first = true;
        if (AvatarDescription != null && __isset.avatarDescription) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AvatarDescription: ");
          __sb.Append(AvatarDescription== null ? "<null>" : AvatarDescription.ToString());
        }
        if (Properties != null && __isset.properties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Properties: ");
          __sb.Append(Properties);
        }
        if (MmuID != null && __isset.mmuID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MmuID: ");
          __sb.Append(MmuID);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Initialize_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Initialize_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Initialize_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Initialize_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AssignInstruction_args : TBase
    {
      private MMIStandard.MInstruction _instruction;
      private MMIStandard.MSimulationState _simulationState;
      private string _mmuID;
      private string _sessionID;

      public MMIStandard.MInstruction Instruction
      {
        get
        {
          return _instruction;
        }
        set
        {
          __isset.instruction = true;
          this._instruction = value;
        }
      }

      public MMIStandard.MSimulationState SimulationState
      {
        get
        {
          return _simulationState;
        }
        set
        {
          __isset.simulationState = true;
          this._simulationState = value;
        }
      }

      public string MmuID
      {
        get
        {
          return _mmuID;
        }
        set
        {
          __isset.mmuID = true;
          this._mmuID = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instruction;
        public bool simulationState;
        public bool mmuID;
        public bool sessionID;
      }

      public AssignInstruction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Instruction = new MMIStandard.MInstruction();
                  Instruction.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  SimulationState = new MMIStandard.MSimulationState();
                  SimulationState.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  MmuID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AssignInstruction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Instruction != null && __isset.instruction) {
            field.Name = "instruction";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Instruction.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (SimulationState != null && __isset.simulationState) {
            field.Name = "simulationState";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            SimulationState.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (MmuID != null && __isset.mmuID) {
            field.Name = "mmuID";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MmuID);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AssignInstruction_args(");
        bool __first = true;
        if (Instruction != null && __isset.instruction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Instruction: ");
          __sb.Append(Instruction== null ? "<null>" : Instruction.ToString());
        }
        if (SimulationState != null && __isset.simulationState) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SimulationState: ");
          __sb.Append(SimulationState== null ? "<null>" : SimulationState.ToString());
        }
        if (MmuID != null && __isset.mmuID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MmuID: ");
          __sb.Append(MmuID);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AssignInstruction_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public AssignInstruction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("AssignInstruction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("AssignInstruction_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoStep_args : TBase
    {
      private double _time;
      private MMIStandard.MSimulationState _simulationState;
      private string _mmuID;
      private string _sessionID;

      public double Time
      {
        get
        {
          return _time;
        }
        set
        {
          __isset.time = true;
          this._time = value;
        }
      }

      public MMIStandard.MSimulationState SimulationState
      {
        get
        {
          return _simulationState;
        }
        set
        {
          __isset.simulationState = true;
          this._simulationState = value;
        }
      }

      public string MmuID
      {
        get
        {
          return _mmuID;
        }
        set
        {
          __isset.mmuID = true;
          this._mmuID = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool time;
        public bool simulationState;
        public bool mmuID;
        public bool sessionID;
      }

      public DoStep_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Double) {
                  Time = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  SimulationState = new MMIStandard.MSimulationState();
                  SimulationState.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  MmuID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DoStep_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.time) {
            field.Name = "time";
            field.Type = TType.Double;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Time);
            oprot.WriteFieldEnd();
          }
          if (SimulationState != null && __isset.simulationState) {
            field.Name = "simulationState";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            SimulationState.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (MmuID != null && __isset.mmuID) {
            field.Name = "mmuID";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MmuID);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DoStep_args(");
        bool __first = true;
        if (__isset.time) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Time: ");
          __sb.Append(Time);
        }
        if (SimulationState != null && __isset.simulationState) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SimulationState: ");
          __sb.Append(SimulationState== null ? "<null>" : SimulationState.ToString());
        }
        if (MmuID != null && __isset.mmuID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MmuID: ");
          __sb.Append(MmuID);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DoStep_result : TBase
    {
      private MMIStandard.MSimulationResult _success;

      public MMIStandard.MSimulationResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public DoStep_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MSimulationResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DoStep_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DoStep_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBoundaryConstraints_args : TBase
    {
      private MMIStandard.MInstruction _instruction;
      private string _mmuID;
      private string _sessionID;

      public MMIStandard.MInstruction Instruction
      {
        get
        {
          return _instruction;
        }
        set
        {
          __isset.instruction = true;
          this._instruction = value;
        }
      }

      public string MmuID
      {
        get
        {
          return _mmuID;
        }
        set
        {
          __isset.mmuID = true;
          this._mmuID = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instruction;
        public bool mmuID;
        public bool sessionID;
      }

      public GetBoundaryConstraints_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Instruction = new MMIStandard.MInstruction();
                  Instruction.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MmuID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetBoundaryConstraints_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Instruction != null && __isset.instruction) {
            field.Name = "instruction";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Instruction.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (MmuID != null && __isset.mmuID) {
            field.Name = "mmuID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MmuID);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetBoundaryConstraints_args(");
        bool __first = true;
        if (Instruction != null && __isset.instruction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Instruction: ");
          __sb.Append(Instruction== null ? "<null>" : Instruction.ToString());
        }
        if (MmuID != null && __isset.mmuID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MmuID: ");
          __sb.Append(MmuID);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetBoundaryConstraints_result : TBase
    {
      private List<MMIStandard.MConstraint> _success;

      public List<MMIStandard.MConstraint> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetBoundaryConstraints_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MConstraint>();
                    TList _list18 = iprot.ReadListBegin();
                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                    {
                      MMIStandard.MConstraint _elem20;
                      _elem20 = new MMIStandard.MConstraint();
                      _elem20.Read(iprot);
                      Success.Add(_elem20);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetBoundaryConstraints_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MConstraint _iter21 in Success)
                {
                  _iter21.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetBoundaryConstraints_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckPrerequisites_args : TBase
    {
      private MMIStandard.MInstruction _instruction;
      private string _mmuID;
      private string _sessionID;

      public MMIStandard.MInstruction Instruction
      {
        get
        {
          return _instruction;
        }
        set
        {
          __isset.instruction = true;
          this._instruction = value;
        }
      }

      public string MmuID
      {
        get
        {
          return _mmuID;
        }
        set
        {
          __isset.mmuID = true;
          this._mmuID = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instruction;
        public bool mmuID;
        public bool sessionID;
      }

      public CheckPrerequisites_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Instruction = new MMIStandard.MInstruction();
                  Instruction.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MmuID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CheckPrerequisites_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Instruction != null && __isset.instruction) {
            field.Name = "instruction";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Instruction.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (MmuID != null && __isset.mmuID) {
            field.Name = "mmuID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MmuID);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckPrerequisites_args(");
        bool __first = true;
        if (Instruction != null && __isset.instruction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Instruction: ");
          __sb.Append(Instruction== null ? "<null>" : Instruction.ToString());
        }
        if (MmuID != null && __isset.mmuID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MmuID: ");
          __sb.Append(MmuID);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckPrerequisites_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CheckPrerequisites_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CheckPrerequisites_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckPrerequisites_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Abort_args : TBase
    {
      private string _instructionID;
      private string _mmuID;
      private string _sessionID;

      public string InstructionID
      {
        get
        {
          return _instructionID;
        }
        set
        {
          __isset.instructionID = true;
          this._instructionID = value;
        }
      }

      public string MmuID
      {
        get
        {
          return _mmuID;
        }
        set
        {
          __isset.mmuID = true;
          this._mmuID = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool instructionID;
        public bool mmuID;
        public bool sessionID;
      }

      public Abort_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  InstructionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  MmuID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Abort_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (InstructionID != null && __isset.instructionID) {
            field.Name = "instructionID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(InstructionID);
            oprot.WriteFieldEnd();
          }
          if (MmuID != null && __isset.mmuID) {
            field.Name = "mmuID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MmuID);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Abort_args(");
        bool __first = true;
        if (InstructionID != null && __isset.instructionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InstructionID: ");
          __sb.Append(InstructionID);
        }
        if (MmuID != null && __isset.mmuID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MmuID: ");
          __sb.Append(MmuID);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Abort_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Abort_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Abort_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Abort_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Dispose_args : TBase
    {
      private string _mmuID;
      private string _sessionID;

      public string MmuID
      {
        get
        {
          return _mmuID;
        }
        set
        {
          __isset.mmuID = true;
          this._mmuID = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mmuID;
        public bool sessionID;
      }

      public Dispose_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MmuID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Dispose_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MmuID != null && __isset.mmuID) {
            field.Name = "mmuID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MmuID);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Dispose_args(");
        bool __first = true;
        if (MmuID != null && __isset.mmuID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MmuID: ");
          __sb.Append(MmuID);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Dispose_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Dispose_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Dispose_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Dispose_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExecuteFunction_args : TBase
    {
      private string _name;
      private Dictionary<string, string> _parameters;
      private string _mmuID;
      private string _sessionID;

      public string Name
      {
        get
        {
          return _name;
        }
        set
        {
          __isset.name = true;
          this._name = value;
        }
      }

      public Dictionary<string, string> Parameters
      {
        get
        {
          return _parameters;
        }
        set
        {
          __isset.parameters = true;
          this._parameters = value;
        }
      }

      public string MmuID
      {
        get
        {
          return _mmuID;
        }
        set
        {
          __isset.mmuID = true;
          this._mmuID = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool name;
        public bool parameters;
        public bool mmuID;
        public bool sessionID;
      }

      public ExecuteFunction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Name = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Map) {
                  {
                    Parameters = new Dictionary<string, string>();
                    TMap _map22 = iprot.ReadMapBegin();
                    for( int _i23 = 0; _i23 < _map22.Count; ++_i23)
                    {
                      string _key24;
                      string _val25;
                      _key24 = iprot.ReadString();
                      _val25 = iprot.ReadString();
                      Parameters[_key24] = _val25;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  MmuID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ExecuteFunction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Name != null && __isset.name) {
            field.Name = "name";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Name);
            oprot.WriteFieldEnd();
          }
          if (Parameters != null && __isset.parameters) {
            field.Name = "parameters";
            field.Type = TType.Map;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
              foreach (string _iter26 in Parameters.Keys)
              {
                oprot.WriteString(_iter26);
                oprot.WriteString(Parameters[_iter26]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (MmuID != null && __isset.mmuID) {
            field.Name = "mmuID";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MmuID);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ExecuteFunction_args(");
        bool __first = true;
        if (Name != null && __isset.name) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Name: ");
          __sb.Append(Name);
        }
        if (Parameters != null && __isset.parameters) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Parameters: ");
          __sb.Append(Parameters);
        }
        if (MmuID != null && __isset.mmuID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MmuID: ");
          __sb.Append(MmuID);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ExecuteFunction_result : TBase
    {
      private Dictionary<string, string> _success;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ExecuteFunction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map) {
                  {
                    Success = new Dictionary<string, string>();
                    TMap _map27 = iprot.ReadMapBegin();
                    for( int _i28 = 0; _i28 < _map27.Count; ++_i28)
                    {
                      string _key29;
                      string _val30;
                      _key29 = iprot.ReadString();
                      _val30 = iprot.ReadString();
                      Success[_key29] = _val30;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ExecuteFunction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
                foreach (string _iter31 in Success.Keys)
                {
                  oprot.WriteString(_iter31);
                  oprot.WriteString(Success[_iter31]);
                }
                oprot.WriteMapEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ExecuteFunction_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetStatus_args : TBase
    {

      public GetStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetStatus_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetStatus_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetStatus_result : TBase
    {
      private Dictionary<string, string> _success;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map) {
                  {
                    Success = new Dictionary<string, string>();
                    TMap _map32 = iprot.ReadMapBegin();
                    for( int _i33 = 0; _i33 < _map32.Count; ++_i33)
                    {
                      string _key34;
                      string _val35;
                      _key34 = iprot.ReadString();
                      _val35 = iprot.ReadString();
                      Success[_key34] = _val35;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetStatus_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
                foreach (string _iter36 in Success.Keys)
                {
                  oprot.WriteString(_iter36);
                  oprot.WriteString(Success[_iter36]);
                }
                oprot.WriteMapEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAdapterDescription_args : TBase
    {

      public GetAdapterDescription_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAdapterDescription_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAdapterDescription_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAdapterDescription_result : TBase
    {
      private MAdapterDescription _success;

      public MAdapterDescription Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetAdapterDescription_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MAdapterDescription();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAdapterDescription_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAdapterDescription_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateSession_args : TBase
    {
      private string _sessionID;

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionID;
      }

      public CreateSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateSession_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateSession_args(");
        bool __first = true;
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateSession_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CreateSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateSession_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateSession_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CloseSession_args : TBase
    {
      private string _sessionID;

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionID;
      }

      public CloseSession_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CloseSession_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CloseSession_args(");
        bool __first = true;
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CloseSession_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CloseSession_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CloseSession_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CloseSession_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushScene_args : TBase
    {
      private MMIStandard.MSceneUpdate _sceneUpdates;
      private string _sessionID;

      public MMIStandard.MSceneUpdate SceneUpdates
      {
        get
        {
          return _sceneUpdates;
        }
        set
        {
          __isset.sceneUpdates = true;
          this._sceneUpdates = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sceneUpdates;
        public bool sessionID;
      }

      public PushScene_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  SceneUpdates = new MMIStandard.MSceneUpdate();
                  SceneUpdates.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushScene_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SceneUpdates != null && __isset.sceneUpdates) {
            field.Name = "sceneUpdates";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SceneUpdates.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushScene_args(");
        bool __first = true;
        if (SceneUpdates != null && __isset.sceneUpdates) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SceneUpdates: ");
          __sb.Append(SceneUpdates== null ? "<null>" : SceneUpdates.ToString());
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PushScene_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PushScene_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PushScene_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PushScene_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLoadableMMUs_args : TBase
    {

      public GetLoadableMMUs_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetLoadableMMUs_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLoadableMMUs_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLoadableMMUs_result : TBase
    {
      private List<MMIStandard.MMUDescription> _success;

      public List<MMIStandard.MMUDescription> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetLoadableMMUs_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MMUDescription>();
                    TList _list37 = iprot.ReadListBegin();
                    for( int _i38 = 0; _i38 < _list37.Count; ++_i38)
                    {
                      MMIStandard.MMUDescription _elem39;
                      _elem39 = new MMIStandard.MMUDescription();
                      _elem39.Read(iprot);
                      Success.Add(_elem39);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetLoadableMMUs_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MMUDescription _iter40 in Success)
                {
                  _iter40.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLoadableMMUs_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMMus_args : TBase
    {
      private string _sessionID;

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionID;
      }

      public GetMMus_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMMus_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMMus_args(");
        bool __first = true;
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMMus_result : TBase
    {
      private List<MMIStandard.MMUDescription> _success;

      public List<MMIStandard.MMUDescription> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetMMus_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MMUDescription>();
                    TList _list41 = iprot.ReadListBegin();
                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                    {
                      MMIStandard.MMUDescription _elem43;
                      _elem43 = new MMIStandard.MMUDescription();
                      _elem43.Read(iprot);
                      Success.Add(_elem43);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMMus_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MMUDescription _iter44 in Success)
                {
                  _iter44.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMMus_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDescription_args : TBase
    {
      private string _mmuID;
      private string _sessionID;

      public string MmuID
      {
        get
        {
          return _mmuID;
        }
        set
        {
          __isset.mmuID = true;
          this._mmuID = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mmuID;
        public bool sessionID;
      }

      public GetDescription_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MmuID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetDescription_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MmuID != null && __isset.mmuID) {
            field.Name = "mmuID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MmuID);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetDescription_args(");
        bool __first = true;
        if (MmuID != null && __isset.mmuID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MmuID: ");
          __sb.Append(MmuID);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetDescription_result : TBase
    {
      private MMIStandard.MMUDescription _success;

      public MMIStandard.MMUDescription Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetDescription_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MMUDescription();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetDescription_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetDescription_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetScene_args : TBase
    {
      private string _sessionID;

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionID;
      }

      public GetScene_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetScene_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetScene_args(");
        bool __first = true;
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetScene_result : TBase
    {
      private List<MMIStandard.MSceneObject> _success;

      public List<MMIStandard.MSceneObject> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetScene_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<MMIStandard.MSceneObject>();
                    TList _list45 = iprot.ReadListBegin();
                    for( int _i46 = 0; _i46 < _list45.Count; ++_i46)
                    {
                      MMIStandard.MSceneObject _elem47;
                      _elem47 = new MMIStandard.MSceneObject();
                      _elem47.Read(iprot);
                      Success.Add(_elem47);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetScene_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (MMIStandard.MSceneObject _iter48 in Success)
                {
                  _iter48.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetScene_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneChanges_args : TBase
    {
      private string _sessionID;

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sessionID;
      }

      public GetSceneChanges_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneChanges_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneChanges_args(");
        bool __first = true;
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSceneChanges_result : TBase
    {
      private MMIStandard.MSceneUpdate _success;

      public MMIStandard.MSceneUpdate Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSceneChanges_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MSceneUpdate();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSceneChanges_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSceneChanges_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LoadMMUs_args : TBase
    {
      private List<string> _mmus;
      private string _sessionID;

      public List<string> Mmus
      {
        get
        {
          return _mmus;
        }
        set
        {
          __isset.mmus = true;
          this._mmus = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mmus;
        public bool sessionID;
      }

      public LoadMMUs_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    Mmus = new List<string>();
                    TList _list49 = iprot.ReadListBegin();
                    for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                    {
                      string _elem51;
                      _elem51 = iprot.ReadString();
                      Mmus.Add(_elem51);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("LoadMMUs_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Mmus != null && __isset.mmus) {
            field.Name = "mmus";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Mmus.Count));
              foreach (string _iter52 in Mmus)
              {
                oprot.WriteString(_iter52);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("LoadMMUs_args(");
        bool __first = true;
        if (Mmus != null && __isset.mmus) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Mmus: ");
          __sb.Append(Mmus);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class LoadMMUs_result : TBase
    {
      private Dictionary<string, string> _success;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public LoadMMUs_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map) {
                  {
                    Success = new Dictionary<string, string>();
                    TMap _map53 = iprot.ReadMapBegin();
                    for( int _i54 = 0; _i54 < _map53.Count; ++_i54)
                    {
                      string _key55;
                      string _val56;
                      _key55 = iprot.ReadString();
                      _val56 = iprot.ReadString();
                      Success[_key55] = _val56;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("LoadMMUs_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
                foreach (string _iter57 in Success.Keys)
                {
                  oprot.WriteString(_iter57);
                  oprot.WriteString(Success[_iter57]);
                }
                oprot.WriteMapEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("LoadMMUs_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateCheckpoint_args : TBase
    {
      private string _mmuID;
      private string _sessionID;

      public string MmuID
      {
        get
        {
          return _mmuID;
        }
        set
        {
          __isset.mmuID = true;
          this._mmuID = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mmuID;
        public bool sessionID;
      }

      public CreateCheckpoint_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MmuID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateCheckpoint_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MmuID != null && __isset.mmuID) {
            field.Name = "mmuID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MmuID);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateCheckpoint_args(");
        bool __first = true;
        if (MmuID != null && __isset.mmuID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MmuID: ");
          __sb.Append(MmuID);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CreateCheckpoint_result : TBase
    {
      private byte[] _success;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public CreateCheckpoint_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CreateCheckpoint_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CreateCheckpoint_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RestoreCheckpoint_args : TBase
    {
      private string _mmuID;
      private string _sessionID;
      private byte[] _checkpointData;

      public string MmuID
      {
        get
        {
          return _mmuID;
        }
        set
        {
          __isset.mmuID = true;
          this._mmuID = value;
        }
      }

      public string SessionID
      {
        get
        {
          return _sessionID;
        }
        set
        {
          __isset.sessionID = true;
          this._sessionID = value;
        }
      }

      public byte[] CheckpointData
      {
        get
        {
          return _checkpointData;
        }
        set
        {
          __isset.checkpointData = true;
          this._checkpointData = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool mmuID;
        public bool sessionID;
        public bool checkpointData;
      }

      public RestoreCheckpoint_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  MmuID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  SessionID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  CheckpointData = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RestoreCheckpoint_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (MmuID != null && __isset.mmuID) {
            field.Name = "mmuID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MmuID);
            oprot.WriteFieldEnd();
          }
          if (SessionID != null && __isset.sessionID) {
            field.Name = "sessionID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SessionID);
            oprot.WriteFieldEnd();
          }
          if (CheckpointData != null && __isset.checkpointData) {
            field.Name = "checkpointData";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(CheckpointData);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RestoreCheckpoint_args(");
        bool __first = true;
        if (MmuID != null && __isset.mmuID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MmuID: ");
          __sb.Append(MmuID);
        }
        if (SessionID != null && __isset.sessionID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SessionID: ");
          __sb.Append(SessionID);
        }
        if (CheckpointData != null && __isset.checkpointData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CheckpointData: ");
          __sb.Append(CheckpointData);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RestoreCheckpoint_result : TBase
    {
      private MMIStandard.MBoolResponse _success;

      public MMIStandard.MBoolResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RestoreCheckpoint_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MBoolResponse();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RestoreCheckpoint_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RestoreCheckpoint_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
