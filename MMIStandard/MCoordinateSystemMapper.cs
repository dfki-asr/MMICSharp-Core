/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{
  public partial class MCoordinateSystemMapper {
    public interface ISync : MMIServiceBase.ISync {
      MMIStandard.MTransform TransformToMMI_L(MMIStandard.MTransform transform, List<MDirection> coordinateSystem);
      MMIStandard.MTransform TransformToMMI(MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
      MMIStandard.MTransform TransformFromMMI_L(MMIStandard.MTransform transform, List<MDirection> coordinateSystem);
      MMIStandard.MTransform TransformFromMMI(MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
      MMIStandard.MQuaternion QuaternionToMMI_L(MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem);
      MMIStandard.MQuaternion QuaternionToMMI(MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
      MMIStandard.MQuaternion QuaternionFromMMI_L(MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem);
      MMIStandard.MQuaternion QuaternionFromMMI(MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
      MMIStandard.MVector3 VectorToMMI_L(MMIStandard.MVector3 quat, List<MDirection> coordinateSystem);
      MMIStandard.MVector3 VectorToMMI(MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
      MMIStandard.MVector3 VectorFromMMI_L(MMIStandard.MVector3 quat, List<MDirection> coordinateSystem);
      MMIStandard.MVector3 VectorFromMMI(MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_TransformToMMI_L(AsyncCallback callback, object state, MMIStandard.MTransform transform, List<MDirection> coordinateSystem);
      MMIStandard.MTransform End_TransformToMMI_L(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TransformToMMI(AsyncCallback callback, object state, MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
      MMIStandard.MTransform End_TransformToMMI(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TransformFromMMI_L(AsyncCallback callback, object state, MMIStandard.MTransform transform, List<MDirection> coordinateSystem);
      MMIStandard.MTransform End_TransformFromMMI_L(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TransformFromMMI(AsyncCallback callback, object state, MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
      MMIStandard.MTransform End_TransformFromMMI(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_QuaternionToMMI_L(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem);
      MMIStandard.MQuaternion End_QuaternionToMMI_L(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_QuaternionToMMI(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
      MMIStandard.MQuaternion End_QuaternionToMMI(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_QuaternionFromMMI_L(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem);
      MMIStandard.MQuaternion End_QuaternionFromMMI_L(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_QuaternionFromMMI(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
      MMIStandard.MQuaternion End_QuaternionFromMMI(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_VectorToMMI_L(AsyncCallback callback, object state, MMIStandard.MVector3 quat, List<MDirection> coordinateSystem);
      MMIStandard.MVector3 End_VectorToMMI_L(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_VectorToMMI(AsyncCallback callback, object state, MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
      MMIStandard.MVector3 End_VectorToMMI(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_VectorFromMMI_L(AsyncCallback callback, object state, MMIStandard.MVector3 quat, List<MDirection> coordinateSystem);
      MMIStandard.MVector3 End_VectorFromMMI_L(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_VectorFromMMI(AsyncCallback callback, object state, MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis);
      MMIStandard.MVector3 End_VectorFromMMI(IAsyncResult asyncResult);
      #endif
    }

    public class Client : MMIServiceBase.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TransformToMMI_L(AsyncCallback callback, object state, MMIStandard.MTransform transform, List<MDirection> coordinateSystem)
      {
        return send_TransformToMMI_L(callback, state, transform, coordinateSystem);
      }

      public MMIStandard.MTransform End_TransformToMMI_L(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransformToMMI_L();
      }

      #endif

      public MMIStandard.MTransform TransformToMMI_L(MMIStandard.MTransform transform, List<MDirection> coordinateSystem)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TransformToMMI_L(null, null, transform, coordinateSystem);
        return End_TransformToMMI_L(asyncResult);

        #else
        send_TransformToMMI_L(transform, coordinateSystem);
        return recv_TransformToMMI_L();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransformToMMI_L(AsyncCallback callback, object state, MMIStandard.MTransform transform, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("TransformToMMI_L", TMessageType.Call, seqid_));
        TransformToMMI_L_args args = new TransformToMMI_L_args();
        args.Transform = transform;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TransformToMMI_L(MMIStandard.MTransform transform, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("TransformToMMI_L", TMessageType.Call, seqid_));
        TransformToMMI_L_args args = new TransformToMMI_L_args();
        args.Transform = transform;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MTransform recv_TransformToMMI_L()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransformToMMI_L_result result = new TransformToMMI_L_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransformToMMI_L failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TransformToMMI(AsyncCallback callback, object state, MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        return send_TransformToMMI(callback, state, transform, firstAxis, secondAxis, thirdAxis);
      }

      public MMIStandard.MTransform End_TransformToMMI(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransformToMMI();
      }

      #endif

      public MMIStandard.MTransform TransformToMMI(MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TransformToMMI(null, null, transform, firstAxis, secondAxis, thirdAxis);
        return End_TransformToMMI(asyncResult);

        #else
        send_TransformToMMI(transform, firstAxis, secondAxis, thirdAxis);
        return recv_TransformToMMI();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransformToMMI(AsyncCallback callback, object state, MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("TransformToMMI", TMessageType.Call, seqid_));
        TransformToMMI_args args = new TransformToMMI_args();
        args.Transform = transform;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TransformToMMI(MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("TransformToMMI", TMessageType.Call, seqid_));
        TransformToMMI_args args = new TransformToMMI_args();
        args.Transform = transform;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MTransform recv_TransformToMMI()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransformToMMI_result result = new TransformToMMI_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransformToMMI failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TransformFromMMI_L(AsyncCallback callback, object state, MMIStandard.MTransform transform, List<MDirection> coordinateSystem)
      {
        return send_TransformFromMMI_L(callback, state, transform, coordinateSystem);
      }

      public MMIStandard.MTransform End_TransformFromMMI_L(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransformFromMMI_L();
      }

      #endif

      public MMIStandard.MTransform TransformFromMMI_L(MMIStandard.MTransform transform, List<MDirection> coordinateSystem)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TransformFromMMI_L(null, null, transform, coordinateSystem);
        return End_TransformFromMMI_L(asyncResult);

        #else
        send_TransformFromMMI_L(transform, coordinateSystem);
        return recv_TransformFromMMI_L();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransformFromMMI_L(AsyncCallback callback, object state, MMIStandard.MTransform transform, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("TransformFromMMI_L", TMessageType.Call, seqid_));
        TransformFromMMI_L_args args = new TransformFromMMI_L_args();
        args.Transform = transform;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TransformFromMMI_L(MMIStandard.MTransform transform, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("TransformFromMMI_L", TMessageType.Call, seqid_));
        TransformFromMMI_L_args args = new TransformFromMMI_L_args();
        args.Transform = transform;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MTransform recv_TransformFromMMI_L()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransformFromMMI_L_result result = new TransformFromMMI_L_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransformFromMMI_L failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_TransformFromMMI(AsyncCallback callback, object state, MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        return send_TransformFromMMI(callback, state, transform, firstAxis, secondAxis, thirdAxis);
      }

      public MMIStandard.MTransform End_TransformFromMMI(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransformFromMMI();
      }

      #endif

      public MMIStandard.MTransform TransformFromMMI(MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_TransformFromMMI(null, null, transform, firstAxis, secondAxis, thirdAxis);
        return End_TransformFromMMI(asyncResult);

        #else
        send_TransformFromMMI(transform, firstAxis, secondAxis, thirdAxis);
        return recv_TransformFromMMI();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransformFromMMI(AsyncCallback callback, object state, MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("TransformFromMMI", TMessageType.Call, seqid_));
        TransformFromMMI_args args = new TransformFromMMI_args();
        args.Transform = transform;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_TransformFromMMI(MMIStandard.MTransform transform, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("TransformFromMMI", TMessageType.Call, seqid_));
        TransformFromMMI_args args = new TransformFromMMI_args();
        args.Transform = transform;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MTransform recv_TransformFromMMI()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransformFromMMI_result result = new TransformFromMMI_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransformFromMMI failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_QuaternionToMMI_L(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem)
      {
        return send_QuaternionToMMI_L(callback, state, quat, coordinateSystem);
      }

      public MMIStandard.MQuaternion End_QuaternionToMMI_L(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_QuaternionToMMI_L();
      }

      #endif

      public MMIStandard.MQuaternion QuaternionToMMI_L(MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_QuaternionToMMI_L(null, null, quat, coordinateSystem);
        return End_QuaternionToMMI_L(asyncResult);

        #else
        send_QuaternionToMMI_L(quat, coordinateSystem);
        return recv_QuaternionToMMI_L();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_QuaternionToMMI_L(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("QuaternionToMMI_L", TMessageType.Call, seqid_));
        QuaternionToMMI_L_args args = new QuaternionToMMI_L_args();
        args.Quat = quat;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_QuaternionToMMI_L(MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("QuaternionToMMI_L", TMessageType.Call, seqid_));
        QuaternionToMMI_L_args args = new QuaternionToMMI_L_args();
        args.Quat = quat;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MQuaternion recv_QuaternionToMMI_L()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        QuaternionToMMI_L_result result = new QuaternionToMMI_L_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QuaternionToMMI_L failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_QuaternionToMMI(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        return send_QuaternionToMMI(callback, state, quat, firstAxis, secondAxis, thirdAxis);
      }

      public MMIStandard.MQuaternion End_QuaternionToMMI(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_QuaternionToMMI();
      }

      #endif

      public MMIStandard.MQuaternion QuaternionToMMI(MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_QuaternionToMMI(null, null, quat, firstAxis, secondAxis, thirdAxis);
        return End_QuaternionToMMI(asyncResult);

        #else
        send_QuaternionToMMI(quat, firstAxis, secondAxis, thirdAxis);
        return recv_QuaternionToMMI();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_QuaternionToMMI(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("QuaternionToMMI", TMessageType.Call, seqid_));
        QuaternionToMMI_args args = new QuaternionToMMI_args();
        args.Quat = quat;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_QuaternionToMMI(MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("QuaternionToMMI", TMessageType.Call, seqid_));
        QuaternionToMMI_args args = new QuaternionToMMI_args();
        args.Quat = quat;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MQuaternion recv_QuaternionToMMI()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        QuaternionToMMI_result result = new QuaternionToMMI_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QuaternionToMMI failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_QuaternionFromMMI_L(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem)
      {
        return send_QuaternionFromMMI_L(callback, state, quat, coordinateSystem);
      }

      public MMIStandard.MQuaternion End_QuaternionFromMMI_L(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_QuaternionFromMMI_L();
      }

      #endif

      public MMIStandard.MQuaternion QuaternionFromMMI_L(MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_QuaternionFromMMI_L(null, null, quat, coordinateSystem);
        return End_QuaternionFromMMI_L(asyncResult);

        #else
        send_QuaternionFromMMI_L(quat, coordinateSystem);
        return recv_QuaternionFromMMI_L();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_QuaternionFromMMI_L(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("QuaternionFromMMI_L", TMessageType.Call, seqid_));
        QuaternionFromMMI_L_args args = new QuaternionFromMMI_L_args();
        args.Quat = quat;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_QuaternionFromMMI_L(MMIStandard.MQuaternion quat, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("QuaternionFromMMI_L", TMessageType.Call, seqid_));
        QuaternionFromMMI_L_args args = new QuaternionFromMMI_L_args();
        args.Quat = quat;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MQuaternion recv_QuaternionFromMMI_L()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        QuaternionFromMMI_L_result result = new QuaternionFromMMI_L_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QuaternionFromMMI_L failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_QuaternionFromMMI(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        return send_QuaternionFromMMI(callback, state, quat, firstAxis, secondAxis, thirdAxis);
      }

      public MMIStandard.MQuaternion End_QuaternionFromMMI(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_QuaternionFromMMI();
      }

      #endif

      public MMIStandard.MQuaternion QuaternionFromMMI(MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_QuaternionFromMMI(null, null, quat, firstAxis, secondAxis, thirdAxis);
        return End_QuaternionFromMMI(asyncResult);

        #else
        send_QuaternionFromMMI(quat, firstAxis, secondAxis, thirdAxis);
        return recv_QuaternionFromMMI();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_QuaternionFromMMI(AsyncCallback callback, object state, MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("QuaternionFromMMI", TMessageType.Call, seqid_));
        QuaternionFromMMI_args args = new QuaternionFromMMI_args();
        args.Quat = quat;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_QuaternionFromMMI(MMIStandard.MQuaternion quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("QuaternionFromMMI", TMessageType.Call, seqid_));
        QuaternionFromMMI_args args = new QuaternionFromMMI_args();
        args.Quat = quat;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MQuaternion recv_QuaternionFromMMI()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        QuaternionFromMMI_result result = new QuaternionFromMMI_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "QuaternionFromMMI failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_VectorToMMI_L(AsyncCallback callback, object state, MMIStandard.MVector3 quat, List<MDirection> coordinateSystem)
      {
        return send_VectorToMMI_L(callback, state, quat, coordinateSystem);
      }

      public MMIStandard.MVector3 End_VectorToMMI_L(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_VectorToMMI_L();
      }

      #endif

      public MMIStandard.MVector3 VectorToMMI_L(MMIStandard.MVector3 quat, List<MDirection> coordinateSystem)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_VectorToMMI_L(null, null, quat, coordinateSystem);
        return End_VectorToMMI_L(asyncResult);

        #else
        send_VectorToMMI_L(quat, coordinateSystem);
        return recv_VectorToMMI_L();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_VectorToMMI_L(AsyncCallback callback, object state, MMIStandard.MVector3 quat, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("VectorToMMI_L", TMessageType.Call, seqid_));
        VectorToMMI_L_args args = new VectorToMMI_L_args();
        args.Quat = quat;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_VectorToMMI_L(MMIStandard.MVector3 quat, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("VectorToMMI_L", TMessageType.Call, seqid_));
        VectorToMMI_L_args args = new VectorToMMI_L_args();
        args.Quat = quat;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MVector3 recv_VectorToMMI_L()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        VectorToMMI_L_result result = new VectorToMMI_L_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "VectorToMMI_L failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_VectorToMMI(AsyncCallback callback, object state, MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        return send_VectorToMMI(callback, state, quat, firstAxis, secondAxis, thirdAxis);
      }

      public MMIStandard.MVector3 End_VectorToMMI(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_VectorToMMI();
      }

      #endif

      public MMIStandard.MVector3 VectorToMMI(MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_VectorToMMI(null, null, quat, firstAxis, secondAxis, thirdAxis);
        return End_VectorToMMI(asyncResult);

        #else
        send_VectorToMMI(quat, firstAxis, secondAxis, thirdAxis);
        return recv_VectorToMMI();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_VectorToMMI(AsyncCallback callback, object state, MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("VectorToMMI", TMessageType.Call, seqid_));
        VectorToMMI_args args = new VectorToMMI_args();
        args.Quat = quat;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_VectorToMMI(MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("VectorToMMI", TMessageType.Call, seqid_));
        VectorToMMI_args args = new VectorToMMI_args();
        args.Quat = quat;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MVector3 recv_VectorToMMI()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        VectorToMMI_result result = new VectorToMMI_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "VectorToMMI failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_VectorFromMMI_L(AsyncCallback callback, object state, MMIStandard.MVector3 quat, List<MDirection> coordinateSystem)
      {
        return send_VectorFromMMI_L(callback, state, quat, coordinateSystem);
      }

      public MMIStandard.MVector3 End_VectorFromMMI_L(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_VectorFromMMI_L();
      }

      #endif

      public MMIStandard.MVector3 VectorFromMMI_L(MMIStandard.MVector3 quat, List<MDirection> coordinateSystem)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_VectorFromMMI_L(null, null, quat, coordinateSystem);
        return End_VectorFromMMI_L(asyncResult);

        #else
        send_VectorFromMMI_L(quat, coordinateSystem);
        return recv_VectorFromMMI_L();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_VectorFromMMI_L(AsyncCallback callback, object state, MMIStandard.MVector3 quat, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("VectorFromMMI_L", TMessageType.Call, seqid_));
        VectorFromMMI_L_args args = new VectorFromMMI_L_args();
        args.Quat = quat;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_VectorFromMMI_L(MMIStandard.MVector3 quat, List<MDirection> coordinateSystem)
      {
        oprot_.WriteMessageBegin(new TMessage("VectorFromMMI_L", TMessageType.Call, seqid_));
        VectorFromMMI_L_args args = new VectorFromMMI_L_args();
        args.Quat = quat;
        args.CoordinateSystem = coordinateSystem;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MVector3 recv_VectorFromMMI_L()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        VectorFromMMI_L_result result = new VectorFromMMI_L_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "VectorFromMMI_L failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_VectorFromMMI(AsyncCallback callback, object state, MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        return send_VectorFromMMI(callback, state, quat, firstAxis, secondAxis, thirdAxis);
      }

      public MMIStandard.MVector3 End_VectorFromMMI(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_VectorFromMMI();
      }

      #endif

      public MMIStandard.MVector3 VectorFromMMI(MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_VectorFromMMI(null, null, quat, firstAxis, secondAxis, thirdAxis);
        return End_VectorFromMMI(asyncResult);

        #else
        send_VectorFromMMI(quat, firstAxis, secondAxis, thirdAxis);
        return recv_VectorFromMMI();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_VectorFromMMI(AsyncCallback callback, object state, MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("VectorFromMMI", TMessageType.Call, seqid_));
        VectorFromMMI_args args = new VectorFromMMI_args();
        args.Quat = quat;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_VectorFromMMI(MMIStandard.MVector3 quat, MDirection firstAxis, MDirection secondAxis, MDirection thirdAxis)
      {
        oprot_.WriteMessageBegin(new TMessage("VectorFromMMI", TMessageType.Call, seqid_));
        VectorFromMMI_args args = new VectorFromMMI_args();
        args.Quat = quat;
        args.FirstAxis = firstAxis;
        args.SecondAxis = secondAxis;
        args.ThirdAxis = thirdAxis;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public MMIStandard.MVector3 recv_VectorFromMMI()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        VectorFromMMI_result result = new VectorFromMMI_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "VectorFromMMI failed: unknown result");
      }

    }
    public class Processor : MMIServiceBase.Processor, TProcessor {
      public Processor(ISync iface) : base(iface)
      {
        iface_ = iface;
        processMap_["TransformToMMI_L"] = TransformToMMI_L_Process;
        processMap_["TransformToMMI"] = TransformToMMI_Process;
        processMap_["TransformFromMMI_L"] = TransformFromMMI_L_Process;
        processMap_["TransformFromMMI"] = TransformFromMMI_Process;
        processMap_["QuaternionToMMI_L"] = QuaternionToMMI_L_Process;
        processMap_["QuaternionToMMI"] = QuaternionToMMI_Process;
        processMap_["QuaternionFromMMI_L"] = QuaternionFromMMI_L_Process;
        processMap_["QuaternionFromMMI"] = QuaternionFromMMI_Process;
        processMap_["VectorToMMI_L"] = VectorToMMI_L_Process;
        processMap_["VectorToMMI"] = VectorToMMI_Process;
        processMap_["VectorFromMMI_L"] = VectorFromMMI_L_Process;
        processMap_["VectorFromMMI"] = VectorFromMMI_Process;
      }

      private ISync iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void TransformToMMI_L_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransformToMMI_L_args args = new TransformToMMI_L_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransformToMMI_L_result result = new TransformToMMI_L_result();
        try
        {
          result.Success = iface_.TransformToMMI_L(args.Transform, args.CoordinateSystem);
          oprot.WriteMessageBegin(new TMessage("TransformToMMI_L", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransformToMMI_L", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TransformToMMI_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransformToMMI_args args = new TransformToMMI_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransformToMMI_result result = new TransformToMMI_result();
        try
        {
          result.Success = iface_.TransformToMMI(args.Transform, args.FirstAxis, args.SecondAxis, args.ThirdAxis);
          oprot.WriteMessageBegin(new TMessage("TransformToMMI", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransformToMMI", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TransformFromMMI_L_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransformFromMMI_L_args args = new TransformFromMMI_L_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransformFromMMI_L_result result = new TransformFromMMI_L_result();
        try
        {
          result.Success = iface_.TransformFromMMI_L(args.Transform, args.CoordinateSystem);
          oprot.WriteMessageBegin(new TMessage("TransformFromMMI_L", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransformFromMMI_L", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TransformFromMMI_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransformFromMMI_args args = new TransformFromMMI_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransformFromMMI_result result = new TransformFromMMI_result();
        try
        {
          result.Success = iface_.TransformFromMMI(args.Transform, args.FirstAxis, args.SecondAxis, args.ThirdAxis);
          oprot.WriteMessageBegin(new TMessage("TransformFromMMI", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransformFromMMI", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void QuaternionToMMI_L_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        QuaternionToMMI_L_args args = new QuaternionToMMI_L_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        QuaternionToMMI_L_result result = new QuaternionToMMI_L_result();
        try
        {
          result.Success = iface_.QuaternionToMMI_L(args.Quat, args.CoordinateSystem);
          oprot.WriteMessageBegin(new TMessage("QuaternionToMMI_L", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("QuaternionToMMI_L", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void QuaternionToMMI_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        QuaternionToMMI_args args = new QuaternionToMMI_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        QuaternionToMMI_result result = new QuaternionToMMI_result();
        try
        {
          result.Success = iface_.QuaternionToMMI(args.Quat, args.FirstAxis, args.SecondAxis, args.ThirdAxis);
          oprot.WriteMessageBegin(new TMessage("QuaternionToMMI", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("QuaternionToMMI", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void QuaternionFromMMI_L_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        QuaternionFromMMI_L_args args = new QuaternionFromMMI_L_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        QuaternionFromMMI_L_result result = new QuaternionFromMMI_L_result();
        try
        {
          result.Success = iface_.QuaternionFromMMI_L(args.Quat, args.CoordinateSystem);
          oprot.WriteMessageBegin(new TMessage("QuaternionFromMMI_L", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("QuaternionFromMMI_L", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void QuaternionFromMMI_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        QuaternionFromMMI_args args = new QuaternionFromMMI_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        QuaternionFromMMI_result result = new QuaternionFromMMI_result();
        try
        {
          result.Success = iface_.QuaternionFromMMI(args.Quat, args.FirstAxis, args.SecondAxis, args.ThirdAxis);
          oprot.WriteMessageBegin(new TMessage("QuaternionFromMMI", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("QuaternionFromMMI", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void VectorToMMI_L_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        VectorToMMI_L_args args = new VectorToMMI_L_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        VectorToMMI_L_result result = new VectorToMMI_L_result();
        try
        {
          result.Success = iface_.VectorToMMI_L(args.Quat, args.CoordinateSystem);
          oprot.WriteMessageBegin(new TMessage("VectorToMMI_L", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("VectorToMMI_L", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void VectorToMMI_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        VectorToMMI_args args = new VectorToMMI_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        VectorToMMI_result result = new VectorToMMI_result();
        try
        {
          result.Success = iface_.VectorToMMI(args.Quat, args.FirstAxis, args.SecondAxis, args.ThirdAxis);
          oprot.WriteMessageBegin(new TMessage("VectorToMMI", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("VectorToMMI", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void VectorFromMMI_L_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        VectorFromMMI_L_args args = new VectorFromMMI_L_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        VectorFromMMI_L_result result = new VectorFromMMI_L_result();
        try
        {
          result.Success = iface_.VectorFromMMI_L(args.Quat, args.CoordinateSystem);
          oprot.WriteMessageBegin(new TMessage("VectorFromMMI_L", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("VectorFromMMI_L", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void VectorFromMMI_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        VectorFromMMI_args args = new VectorFromMMI_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        VectorFromMMI_result result = new VectorFromMMI_result();
        try
        {
          result.Success = iface_.VectorFromMMI(args.Quat, args.FirstAxis, args.SecondAxis, args.ThirdAxis);
          oprot.WriteMessageBegin(new TMessage("VectorFromMMI", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("VectorFromMMI", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransformToMMI_L_args : TBase
    {
      private MMIStandard.MTransform _transform;
      private List<MDirection> _coordinateSystem;

      public MMIStandard.MTransform Transform
      {
        get
        {
          return _transform;
        }
        set
        {
          __isset.transform = true;
          this._transform = value;
        }
      }

      public List<MDirection> CoordinateSystem
      {
        get
        {
          return _coordinateSystem;
        }
        set
        {
          __isset.coordinateSystem = true;
          this._coordinateSystem = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transform;
        public bool coordinateSystem;
      }

      public TransformToMMI_L_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Transform = new MMIStandard.MTransform();
                  Transform.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    CoordinateSystem = new List<MDirection>();
                    TList _list174 = iprot.ReadListBegin();
                    for( int _i175 = 0; _i175 < _list174.Count; ++_i175)
                    {
                      MDirection _elem176;
                      _elem176 = (MDirection)iprot.ReadI32();
                      CoordinateSystem.Add(_elem176);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransformToMMI_L_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Transform != null && __isset.transform) {
            field.Name = "transform";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Transform.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (CoordinateSystem != null && __isset.coordinateSystem) {
            field.Name = "coordinateSystem";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, CoordinateSystem.Count));
              foreach (MDirection _iter177 in CoordinateSystem)
              {
                oprot.WriteI32((int)_iter177);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransformToMMI_L_args(");
        bool __first = true;
        if (Transform != null && __isset.transform) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Transform: ");
          __sb.Append(Transform== null ? "<null>" : Transform.ToString());
        }
        if (CoordinateSystem != null && __isset.coordinateSystem) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CoordinateSystem: ");
          __sb.Append(CoordinateSystem);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransformToMMI_L_result : TBase
    {
      private MMIStandard.MTransform _success;

      public MMIStandard.MTransform Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransformToMMI_L_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MTransform();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransformToMMI_L_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransformToMMI_L_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransformToMMI_args : TBase
    {
      private MMIStandard.MTransform _transform;
      private MDirection _firstAxis;
      private MDirection _secondAxis;
      private MDirection _thirdAxis;

      public MMIStandard.MTransform Transform
      {
        get
        {
          return _transform;
        }
        set
        {
          __isset.transform = true;
          this._transform = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection FirstAxis
      {
        get
        {
          return _firstAxis;
        }
        set
        {
          __isset.firstAxis = true;
          this._firstAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection SecondAxis
      {
        get
        {
          return _secondAxis;
        }
        set
        {
          __isset.secondAxis = true;
          this._secondAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection ThirdAxis
      {
        get
        {
          return _thirdAxis;
        }
        set
        {
          __isset.thirdAxis = true;
          this._thirdAxis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transform;
        public bool firstAxis;
        public bool secondAxis;
        public bool thirdAxis;
      }

      public TransformToMMI_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Transform = new MMIStandard.MTransform();
                  Transform.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  FirstAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  SecondAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ThirdAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransformToMMI_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Transform != null && __isset.transform) {
            field.Name = "transform";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Transform.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.firstAxis) {
            field.Name = "firstAxis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)FirstAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.secondAxis) {
            field.Name = "secondAxis";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)SecondAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.thirdAxis) {
            field.Name = "thirdAxis";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)ThirdAxis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransformToMMI_args(");
        bool __first = true;
        if (Transform != null && __isset.transform) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Transform: ");
          __sb.Append(Transform== null ? "<null>" : Transform.ToString());
        }
        if (__isset.firstAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FirstAxis: ");
          __sb.Append(FirstAxis);
        }
        if (__isset.secondAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SecondAxis: ");
          __sb.Append(SecondAxis);
        }
        if (__isset.thirdAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ThirdAxis: ");
          __sb.Append(ThirdAxis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransformToMMI_result : TBase
    {
      private MMIStandard.MTransform _success;

      public MMIStandard.MTransform Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransformToMMI_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MTransform();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransformToMMI_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransformToMMI_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransformFromMMI_L_args : TBase
    {
      private MMIStandard.MTransform _transform;
      private List<MDirection> _coordinateSystem;

      public MMIStandard.MTransform Transform
      {
        get
        {
          return _transform;
        }
        set
        {
          __isset.transform = true;
          this._transform = value;
        }
      }

      public List<MDirection> CoordinateSystem
      {
        get
        {
          return _coordinateSystem;
        }
        set
        {
          __isset.coordinateSystem = true;
          this._coordinateSystem = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transform;
        public bool coordinateSystem;
      }

      public TransformFromMMI_L_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Transform = new MMIStandard.MTransform();
                  Transform.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    CoordinateSystem = new List<MDirection>();
                    TList _list178 = iprot.ReadListBegin();
                    for( int _i179 = 0; _i179 < _list178.Count; ++_i179)
                    {
                      MDirection _elem180;
                      _elem180 = (MDirection)iprot.ReadI32();
                      CoordinateSystem.Add(_elem180);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransformFromMMI_L_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Transform != null && __isset.transform) {
            field.Name = "transform";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Transform.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (CoordinateSystem != null && __isset.coordinateSystem) {
            field.Name = "coordinateSystem";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, CoordinateSystem.Count));
              foreach (MDirection _iter181 in CoordinateSystem)
              {
                oprot.WriteI32((int)_iter181);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransformFromMMI_L_args(");
        bool __first = true;
        if (Transform != null && __isset.transform) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Transform: ");
          __sb.Append(Transform== null ? "<null>" : Transform.ToString());
        }
        if (CoordinateSystem != null && __isset.coordinateSystem) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CoordinateSystem: ");
          __sb.Append(CoordinateSystem);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransformFromMMI_L_result : TBase
    {
      private MMIStandard.MTransform _success;

      public MMIStandard.MTransform Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransformFromMMI_L_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MTransform();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransformFromMMI_L_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransformFromMMI_L_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransformFromMMI_args : TBase
    {
      private MMIStandard.MTransform _transform;
      private MDirection _firstAxis;
      private MDirection _secondAxis;
      private MDirection _thirdAxis;

      public MMIStandard.MTransform Transform
      {
        get
        {
          return _transform;
        }
        set
        {
          __isset.transform = true;
          this._transform = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection FirstAxis
      {
        get
        {
          return _firstAxis;
        }
        set
        {
          __isset.firstAxis = true;
          this._firstAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection SecondAxis
      {
        get
        {
          return _secondAxis;
        }
        set
        {
          __isset.secondAxis = true;
          this._secondAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection ThirdAxis
      {
        get
        {
          return _thirdAxis;
        }
        set
        {
          __isset.thirdAxis = true;
          this._thirdAxis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transform;
        public bool firstAxis;
        public bool secondAxis;
        public bool thirdAxis;
      }

      public TransformFromMMI_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Transform = new MMIStandard.MTransform();
                  Transform.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  FirstAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  SecondAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ThirdAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransformFromMMI_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Transform != null && __isset.transform) {
            field.Name = "transform";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Transform.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.firstAxis) {
            field.Name = "firstAxis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)FirstAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.secondAxis) {
            field.Name = "secondAxis";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)SecondAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.thirdAxis) {
            field.Name = "thirdAxis";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)ThirdAxis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransformFromMMI_args(");
        bool __first = true;
        if (Transform != null && __isset.transform) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Transform: ");
          __sb.Append(Transform== null ? "<null>" : Transform.ToString());
        }
        if (__isset.firstAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FirstAxis: ");
          __sb.Append(FirstAxis);
        }
        if (__isset.secondAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SecondAxis: ");
          __sb.Append(SecondAxis);
        }
        if (__isset.thirdAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ThirdAxis: ");
          __sb.Append(ThirdAxis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransformFromMMI_result : TBase
    {
      private MMIStandard.MTransform _success;

      public MMIStandard.MTransform Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransformFromMMI_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MTransform();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransformFromMMI_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransformFromMMI_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuaternionToMMI_L_args : TBase
    {
      private MMIStandard.MQuaternion _quat;
      private List<MDirection> _coordinateSystem;

      public MMIStandard.MQuaternion Quat
      {
        get
        {
          return _quat;
        }
        set
        {
          __isset.quat = true;
          this._quat = value;
        }
      }

      public List<MDirection> CoordinateSystem
      {
        get
        {
          return _coordinateSystem;
        }
        set
        {
          __isset.coordinateSystem = true;
          this._coordinateSystem = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool quat;
        public bool coordinateSystem;
      }

      public QuaternionToMMI_L_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Quat = new MMIStandard.MQuaternion();
                  Quat.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    CoordinateSystem = new List<MDirection>();
                    TList _list182 = iprot.ReadListBegin();
                    for( int _i183 = 0; _i183 < _list182.Count; ++_i183)
                    {
                      MDirection _elem184;
                      _elem184 = (MDirection)iprot.ReadI32();
                      CoordinateSystem.Add(_elem184);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuaternionToMMI_L_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Quat != null && __isset.quat) {
            field.Name = "quat";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Quat.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (CoordinateSystem != null && __isset.coordinateSystem) {
            field.Name = "coordinateSystem";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, CoordinateSystem.Count));
              foreach (MDirection _iter185 in CoordinateSystem)
              {
                oprot.WriteI32((int)_iter185);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuaternionToMMI_L_args(");
        bool __first = true;
        if (Quat != null && __isset.quat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Quat: ");
          __sb.Append(Quat== null ? "<null>" : Quat.ToString());
        }
        if (CoordinateSystem != null && __isset.coordinateSystem) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CoordinateSystem: ");
          __sb.Append(CoordinateSystem);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuaternionToMMI_L_result : TBase
    {
      private MMIStandard.MQuaternion _success;

      public MMIStandard.MQuaternion Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public QuaternionToMMI_L_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MQuaternion();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuaternionToMMI_L_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuaternionToMMI_L_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuaternionToMMI_args : TBase
    {
      private MMIStandard.MQuaternion _quat;
      private MDirection _firstAxis;
      private MDirection _secondAxis;
      private MDirection _thirdAxis;

      public MMIStandard.MQuaternion Quat
      {
        get
        {
          return _quat;
        }
        set
        {
          __isset.quat = true;
          this._quat = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection FirstAxis
      {
        get
        {
          return _firstAxis;
        }
        set
        {
          __isset.firstAxis = true;
          this._firstAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection SecondAxis
      {
        get
        {
          return _secondAxis;
        }
        set
        {
          __isset.secondAxis = true;
          this._secondAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection ThirdAxis
      {
        get
        {
          return _thirdAxis;
        }
        set
        {
          __isset.thirdAxis = true;
          this._thirdAxis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool quat;
        public bool firstAxis;
        public bool secondAxis;
        public bool thirdAxis;
      }

      public QuaternionToMMI_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Quat = new MMIStandard.MQuaternion();
                  Quat.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  FirstAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  SecondAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ThirdAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuaternionToMMI_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Quat != null && __isset.quat) {
            field.Name = "quat";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Quat.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.firstAxis) {
            field.Name = "firstAxis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)FirstAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.secondAxis) {
            field.Name = "secondAxis";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)SecondAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.thirdAxis) {
            field.Name = "thirdAxis";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)ThirdAxis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuaternionToMMI_args(");
        bool __first = true;
        if (Quat != null && __isset.quat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Quat: ");
          __sb.Append(Quat== null ? "<null>" : Quat.ToString());
        }
        if (__isset.firstAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FirstAxis: ");
          __sb.Append(FirstAxis);
        }
        if (__isset.secondAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SecondAxis: ");
          __sb.Append(SecondAxis);
        }
        if (__isset.thirdAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ThirdAxis: ");
          __sb.Append(ThirdAxis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuaternionToMMI_result : TBase
    {
      private MMIStandard.MQuaternion _success;

      public MMIStandard.MQuaternion Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public QuaternionToMMI_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MQuaternion();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuaternionToMMI_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuaternionToMMI_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuaternionFromMMI_L_args : TBase
    {
      private MMIStandard.MQuaternion _quat;
      private List<MDirection> _coordinateSystem;

      public MMIStandard.MQuaternion Quat
      {
        get
        {
          return _quat;
        }
        set
        {
          __isset.quat = true;
          this._quat = value;
        }
      }

      public List<MDirection> CoordinateSystem
      {
        get
        {
          return _coordinateSystem;
        }
        set
        {
          __isset.coordinateSystem = true;
          this._coordinateSystem = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool quat;
        public bool coordinateSystem;
      }

      public QuaternionFromMMI_L_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Quat = new MMIStandard.MQuaternion();
                  Quat.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    CoordinateSystem = new List<MDirection>();
                    TList _list186 = iprot.ReadListBegin();
                    for( int _i187 = 0; _i187 < _list186.Count; ++_i187)
                    {
                      MDirection _elem188;
                      _elem188 = (MDirection)iprot.ReadI32();
                      CoordinateSystem.Add(_elem188);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuaternionFromMMI_L_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Quat != null && __isset.quat) {
            field.Name = "quat";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Quat.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (CoordinateSystem != null && __isset.coordinateSystem) {
            field.Name = "coordinateSystem";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, CoordinateSystem.Count));
              foreach (MDirection _iter189 in CoordinateSystem)
              {
                oprot.WriteI32((int)_iter189);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuaternionFromMMI_L_args(");
        bool __first = true;
        if (Quat != null && __isset.quat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Quat: ");
          __sb.Append(Quat== null ? "<null>" : Quat.ToString());
        }
        if (CoordinateSystem != null && __isset.coordinateSystem) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CoordinateSystem: ");
          __sb.Append(CoordinateSystem);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuaternionFromMMI_L_result : TBase
    {
      private MMIStandard.MQuaternion _success;

      public MMIStandard.MQuaternion Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public QuaternionFromMMI_L_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MQuaternion();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuaternionFromMMI_L_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuaternionFromMMI_L_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuaternionFromMMI_args : TBase
    {
      private MMIStandard.MQuaternion _quat;
      private MDirection _firstAxis;
      private MDirection _secondAxis;
      private MDirection _thirdAxis;

      public MMIStandard.MQuaternion Quat
      {
        get
        {
          return _quat;
        }
        set
        {
          __isset.quat = true;
          this._quat = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection FirstAxis
      {
        get
        {
          return _firstAxis;
        }
        set
        {
          __isset.firstAxis = true;
          this._firstAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection SecondAxis
      {
        get
        {
          return _secondAxis;
        }
        set
        {
          __isset.secondAxis = true;
          this._secondAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection ThirdAxis
      {
        get
        {
          return _thirdAxis;
        }
        set
        {
          __isset.thirdAxis = true;
          this._thirdAxis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool quat;
        public bool firstAxis;
        public bool secondAxis;
        public bool thirdAxis;
      }

      public QuaternionFromMMI_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Quat = new MMIStandard.MQuaternion();
                  Quat.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  FirstAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  SecondAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ThirdAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuaternionFromMMI_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Quat != null && __isset.quat) {
            field.Name = "quat";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Quat.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.firstAxis) {
            field.Name = "firstAxis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)FirstAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.secondAxis) {
            field.Name = "secondAxis";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)SecondAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.thirdAxis) {
            field.Name = "thirdAxis";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)ThirdAxis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuaternionFromMMI_args(");
        bool __first = true;
        if (Quat != null && __isset.quat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Quat: ");
          __sb.Append(Quat== null ? "<null>" : Quat.ToString());
        }
        if (__isset.firstAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FirstAxis: ");
          __sb.Append(FirstAxis);
        }
        if (__isset.secondAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SecondAxis: ");
          __sb.Append(SecondAxis);
        }
        if (__isset.thirdAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ThirdAxis: ");
          __sb.Append(ThirdAxis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class QuaternionFromMMI_result : TBase
    {
      private MMIStandard.MQuaternion _success;

      public MMIStandard.MQuaternion Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public QuaternionFromMMI_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MQuaternion();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("QuaternionFromMMI_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("QuaternionFromMMI_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class VectorToMMI_L_args : TBase
    {
      private MMIStandard.MVector3 _quat;
      private List<MDirection> _coordinateSystem;

      public MMIStandard.MVector3 Quat
      {
        get
        {
          return _quat;
        }
        set
        {
          __isset.quat = true;
          this._quat = value;
        }
      }

      public List<MDirection> CoordinateSystem
      {
        get
        {
          return _coordinateSystem;
        }
        set
        {
          __isset.coordinateSystem = true;
          this._coordinateSystem = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool quat;
        public bool coordinateSystem;
      }

      public VectorToMMI_L_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Quat = new MMIStandard.MVector3();
                  Quat.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    CoordinateSystem = new List<MDirection>();
                    TList _list190 = iprot.ReadListBegin();
                    for( int _i191 = 0; _i191 < _list190.Count; ++_i191)
                    {
                      MDirection _elem192;
                      _elem192 = (MDirection)iprot.ReadI32();
                      CoordinateSystem.Add(_elem192);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("VectorToMMI_L_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Quat != null && __isset.quat) {
            field.Name = "quat";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Quat.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (CoordinateSystem != null && __isset.coordinateSystem) {
            field.Name = "coordinateSystem";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, CoordinateSystem.Count));
              foreach (MDirection _iter193 in CoordinateSystem)
              {
                oprot.WriteI32((int)_iter193);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("VectorToMMI_L_args(");
        bool __first = true;
        if (Quat != null && __isset.quat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Quat: ");
          __sb.Append(Quat== null ? "<null>" : Quat.ToString());
        }
        if (CoordinateSystem != null && __isset.coordinateSystem) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CoordinateSystem: ");
          __sb.Append(CoordinateSystem);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class VectorToMMI_L_result : TBase
    {
      private MMIStandard.MVector3 _success;

      public MMIStandard.MVector3 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public VectorToMMI_L_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MVector3();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("VectorToMMI_L_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("VectorToMMI_L_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class VectorToMMI_args : TBase
    {
      private MMIStandard.MVector3 _quat;
      private MDirection _firstAxis;
      private MDirection _secondAxis;
      private MDirection _thirdAxis;

      public MMIStandard.MVector3 Quat
      {
        get
        {
          return _quat;
        }
        set
        {
          __isset.quat = true;
          this._quat = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection FirstAxis
      {
        get
        {
          return _firstAxis;
        }
        set
        {
          __isset.firstAxis = true;
          this._firstAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection SecondAxis
      {
        get
        {
          return _secondAxis;
        }
        set
        {
          __isset.secondAxis = true;
          this._secondAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection ThirdAxis
      {
        get
        {
          return _thirdAxis;
        }
        set
        {
          __isset.thirdAxis = true;
          this._thirdAxis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool quat;
        public bool firstAxis;
        public bool secondAxis;
        public bool thirdAxis;
      }

      public VectorToMMI_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Quat = new MMIStandard.MVector3();
                  Quat.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  FirstAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  SecondAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ThirdAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("VectorToMMI_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Quat != null && __isset.quat) {
            field.Name = "quat";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Quat.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.firstAxis) {
            field.Name = "firstAxis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)FirstAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.secondAxis) {
            field.Name = "secondAxis";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)SecondAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.thirdAxis) {
            field.Name = "thirdAxis";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)ThirdAxis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("VectorToMMI_args(");
        bool __first = true;
        if (Quat != null && __isset.quat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Quat: ");
          __sb.Append(Quat== null ? "<null>" : Quat.ToString());
        }
        if (__isset.firstAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FirstAxis: ");
          __sb.Append(FirstAxis);
        }
        if (__isset.secondAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SecondAxis: ");
          __sb.Append(SecondAxis);
        }
        if (__isset.thirdAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ThirdAxis: ");
          __sb.Append(ThirdAxis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class VectorToMMI_result : TBase
    {
      private MMIStandard.MVector3 _success;

      public MMIStandard.MVector3 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public VectorToMMI_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MVector3();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("VectorToMMI_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("VectorToMMI_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class VectorFromMMI_L_args : TBase
    {
      private MMIStandard.MVector3 _quat;
      private List<MDirection> _coordinateSystem;

      public MMIStandard.MVector3 Quat
      {
        get
        {
          return _quat;
        }
        set
        {
          __isset.quat = true;
          this._quat = value;
        }
      }

      public List<MDirection> CoordinateSystem
      {
        get
        {
          return _coordinateSystem;
        }
        set
        {
          __isset.coordinateSystem = true;
          this._coordinateSystem = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool quat;
        public bool coordinateSystem;
      }

      public VectorFromMMI_L_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Quat = new MMIStandard.MVector3();
                  Quat.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    CoordinateSystem = new List<MDirection>();
                    TList _list194 = iprot.ReadListBegin();
                    for( int _i195 = 0; _i195 < _list194.Count; ++_i195)
                    {
                      MDirection _elem196;
                      _elem196 = (MDirection)iprot.ReadI32();
                      CoordinateSystem.Add(_elem196);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("VectorFromMMI_L_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Quat != null && __isset.quat) {
            field.Name = "quat";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Quat.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (CoordinateSystem != null && __isset.coordinateSystem) {
            field.Name = "coordinateSystem";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, CoordinateSystem.Count));
              foreach (MDirection _iter197 in CoordinateSystem)
              {
                oprot.WriteI32((int)_iter197);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("VectorFromMMI_L_args(");
        bool __first = true;
        if (Quat != null && __isset.quat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Quat: ");
          __sb.Append(Quat== null ? "<null>" : Quat.ToString());
        }
        if (CoordinateSystem != null && __isset.coordinateSystem) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CoordinateSystem: ");
          __sb.Append(CoordinateSystem);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class VectorFromMMI_L_result : TBase
    {
      private MMIStandard.MVector3 _success;

      public MMIStandard.MVector3 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public VectorFromMMI_L_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MVector3();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("VectorFromMMI_L_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("VectorFromMMI_L_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class VectorFromMMI_args : TBase
    {
      private MMIStandard.MVector3 _quat;
      private MDirection _firstAxis;
      private MDirection _secondAxis;
      private MDirection _thirdAxis;

      public MMIStandard.MVector3 Quat
      {
        get
        {
          return _quat;
        }
        set
        {
          __isset.quat = true;
          this._quat = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection FirstAxis
      {
        get
        {
          return _firstAxis;
        }
        set
        {
          __isset.firstAxis = true;
          this._firstAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection SecondAxis
      {
        get
        {
          return _secondAxis;
        }
        set
        {
          __isset.secondAxis = true;
          this._secondAxis = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="MDirection"/>
      /// </summary>
      public MDirection ThirdAxis
      {
        get
        {
          return _thirdAxis;
        }
        set
        {
          __isset.thirdAxis = true;
          this._thirdAxis = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool quat;
        public bool firstAxis;
        public bool secondAxis;
        public bool thirdAxis;
      }

      public VectorFromMMI_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Quat = new MMIStandard.MVector3();
                  Quat.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  FirstAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  SecondAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  ThirdAxis = (MDirection)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("VectorFromMMI_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Quat != null && __isset.quat) {
            field.Name = "quat";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Quat.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.firstAxis) {
            field.Name = "firstAxis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)FirstAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.secondAxis) {
            field.Name = "secondAxis";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)SecondAxis);
            oprot.WriteFieldEnd();
          }
          if (__isset.thirdAxis) {
            field.Name = "thirdAxis";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)ThirdAxis);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("VectorFromMMI_args(");
        bool __first = true;
        if (Quat != null && __isset.quat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Quat: ");
          __sb.Append(Quat== null ? "<null>" : Quat.ToString());
        }
        if (__isset.firstAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FirstAxis: ");
          __sb.Append(FirstAxis);
        }
        if (__isset.secondAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SecondAxis: ");
          __sb.Append(SecondAxis);
        }
        if (__isset.thirdAxis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ThirdAxis: ");
          __sb.Append(ThirdAxis);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class VectorFromMMI_result : TBase
    {
      private MMIStandard.MVector3 _success;

      public MMIStandard.MVector3 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public VectorFromMMI_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new MMIStandard.MVector3();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("VectorFromMMI_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("VectorFromMMI_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
