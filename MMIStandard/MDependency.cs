/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MDependency : TBase
  {
    private List<MVersion> _ExcludedVersions;
    private string _Name;

    public string ID { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="MDependencyType"/>
    /// </summary>
    public MDependencyType Type { get; set; }

    public MVersion MinVersion { get; set; }

    public MVersion MaxVersion { get; set; }

    public List<MVersion> ExcludedVersions
    {
      get
      {
        return _ExcludedVersions;
      }
      set
      {
        __isset.ExcludedVersions = true;
        this._ExcludedVersions = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ExcludedVersions;
      public bool Name;
    }

    public MDependency() {
    }

    public MDependency(string ID, MDependencyType Type, MVersion MinVersion, MVersion MaxVersion) : this() {
      this.ID = ID;
      this.Type = Type;
      this.MinVersion = MinVersion;
      this.MaxVersion = MaxVersion;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_ID = false;
        bool isset_Type = false;
        bool isset_MinVersion = false;
        bool isset_MaxVersion = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
                isset_ID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Type = (MDependencyType)iprot.ReadI32();
                isset_Type = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                MinVersion = new MVersion();
                MinVersion.Read(iprot);
                isset_MinVersion = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                MaxVersion = new MVersion();
                MaxVersion.Read(iprot);
                isset_MaxVersion = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  ExcludedVersions = new List<MVersion>();
                  TList _list37 = iprot.ReadListBegin();
                  for( int _i38 = 0; _i38 < _list37.Count; ++_i38)
                  {
                    MVersion _elem39;
                    _elem39 = new MVersion();
                    _elem39.Read(iprot);
                    ExcludedVersions.Add(_elem39);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_ID)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ID not set");
        if (!isset_Type)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Type not set");
        if (!isset_MinVersion)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MinVersion not set");
        if (!isset_MaxVersion)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MaxVersion not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MDependency");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ID not set");
        field.Name = "ID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ID);
        oprot.WriteFieldEnd();
        field.Name = "Type";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
        if (MinVersion == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MinVersion not set");
        field.Name = "MinVersion";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        MinVersion.Write(oprot);
        oprot.WriteFieldEnd();
        if (MaxVersion == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MaxVersion not set");
        field.Name = "MaxVersion";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        MaxVersion.Write(oprot);
        oprot.WriteFieldEnd();
        if (ExcludedVersions != null && __isset.ExcludedVersions) {
          field.Name = "ExcludedVersions";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ExcludedVersions.Count));
            foreach (MVersion _iter40 in ExcludedVersions)
            {
              _iter40.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MDependency(");
      __sb.Append(", ID: ");
      __sb.Append(ID);
      __sb.Append(", Type: ");
      __sb.Append(Type);
      __sb.Append(", MinVersion: ");
      __sb.Append(MinVersion== null ? "<null>" : MinVersion.ToString());
      __sb.Append(", MaxVersion: ");
      __sb.Append(MaxVersion== null ? "<null>" : MaxVersion.ToString());
      if (ExcludedVersions != null && __isset.ExcludedVersions) {
        __sb.Append(", ExcludedVersions: ");
        __sb.Append(ExcludedVersions);
      }
      if (Name != null && __isset.Name) {
        __sb.Append(", Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
