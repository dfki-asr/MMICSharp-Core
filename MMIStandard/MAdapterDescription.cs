/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MMIStandard
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MAdapterDescription : TBase
  {
    private Dictionary<string, string> _Properties;
    private List<MMIStandard.MParameter> _Parameters;

    public string Name { get; set; }

    public string ID { get; set; }

    public string Language { get; set; }

    public List<MMIStandard.MIPAddress> Addresses { get; set; }

    public Dictionary<string, string> Properties
    {
      get
      {
        return _Properties;
      }
      set
      {
        __isset.Properties = true;
        this._Properties = value;
      }
    }

    public List<MMIStandard.MParameter> Parameters
    {
      get
      {
        return _Parameters;
      }
      set
      {
        __isset.Parameters = true;
        this._Parameters = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Properties;
      public bool Parameters;
    }

    public MAdapterDescription() {
    }

    public MAdapterDescription(string Name, string ID, string Language, List<MMIStandard.MIPAddress> Addresses) : this() {
      this.Name = Name;
      this.ID = ID;
      this.Language = Language;
      this.Addresses = Addresses;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Name = false;
        bool isset_ID = false;
        bool isset_Language = false;
        bool isset_Addresses = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
                isset_Name = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
                isset_ID = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
                isset_Language = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  Addresses = new List<MMIStandard.MIPAddress>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    MMIStandard.MIPAddress _elem2;
                    _elem2 = new MMIStandard.MIPAddress();
                    _elem2.Read(iprot);
                    Addresses.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
                isset_Addresses = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Map) {
                {
                  Properties = new Dictionary<string, string>();
                  TMap _map3 = iprot.ReadMapBegin();
                  for( int _i4 = 0; _i4 < _map3.Count; ++_i4)
                  {
                    string _key5;
                    string _val6;
                    _key5 = iprot.ReadString();
                    _val6 = iprot.ReadString();
                    Properties[_key5] = _val6;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  Parameters = new List<MMIStandard.MParameter>();
                  TList _list7 = iprot.ReadListBegin();
                  for( int _i8 = 0; _i8 < _list7.Count; ++_i8)
                  {
                    MMIStandard.MParameter _elem9;
                    _elem9 = new MMIStandard.MParameter();
                    _elem9.Read(iprot);
                    Parameters.Add(_elem9);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_Name)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        if (!isset_ID)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ID not set");
        if (!isset_Language)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Language not set");
        if (!isset_Addresses)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Addresses not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("MAdapterDescription");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        field.Name = "Name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
        if (ID == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ID not set");
        field.Name = "ID";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ID);
        oprot.WriteFieldEnd();
        if (Language == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Language not set");
        field.Name = "Language";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Language);
        oprot.WriteFieldEnd();
        if (Addresses == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Addresses not set");
        field.Name = "Addresses";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Addresses.Count));
          foreach (MMIStandard.MIPAddress _iter10 in Addresses)
          {
            _iter10.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        if (Properties != null && __isset.Properties) {
          field.Name = "Properties";
          field.Type = TType.Map;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
            foreach (string _iter11 in Properties.Keys)
            {
              oprot.WriteString(_iter11);
              oprot.WriteString(Properties[_iter11]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Parameters != null && __isset.Parameters) {
          field.Name = "Parameters";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Parameters.Count));
            foreach (MMIStandard.MParameter _iter12 in Parameters)
            {
              _iter12.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("MAdapterDescription(");
      __sb.Append(", Name: ");
      __sb.Append(Name);
      __sb.Append(", ID: ");
      __sb.Append(ID);
      __sb.Append(", Language: ");
      __sb.Append(Language);
      __sb.Append(", Addresses: ");
      __sb.Append(Addresses);
      if (Properties != null && __isset.Properties) {
        __sb.Append(", Properties: ");
        __sb.Append(Properties);
      }
      if (Parameters != null && __isset.Parameters) {
        __sb.Append(", Parameters: ");
        __sb.Append(Parameters);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
